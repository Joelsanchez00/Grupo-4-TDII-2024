
App_1_4_Grupo_4_2024 MOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004280  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004430  08004430  00005430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a0  080044a0  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  080044a0  080044a0  000054a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a8  080044a8  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044ac  080044ac  000054ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080044b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006084  2**0
                  CONTENTS
 10 .bss          000008e4  20000084  20000084  00006084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000968  20000968  00006084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2f1  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002392  00000000  00000000  000153a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  00017738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000994  00000000  00000000  000183c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002514c  00000000  00000000  00018d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee06  00000000  00000000  0003dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbc38  00000000  00000000  0004cca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001288de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b94  00000000  00000000  00128924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0012c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004418 	.word	0x08004418

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08004418 	.word	0x08004418

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
uint16_t Led[] = {LD1_Pin , LD2_Pin , LD3_Pin};
 8000586:	4a4e      	ldr	r2, [pc, #312]	@ (80006c0 <main+0x140>)
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	6018      	str	r0, [r3, #0]
 8000592:	3304      	adds	r3, #4
 8000594:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fdfb 	bl	8001190 <HAL_Init>

  /* USER CODE BEGIN Init */
delay_t myDelay;
debounceInit(GPIOC, GPIO_PIN_13);
 800059a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059e:	4849      	ldr	r0, [pc, #292]	@ (80006c4 <main+0x144>)
 80005a0:	f000 fd5e 	bl	8001060 <debounceInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f898 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fc4a 	bl	8000e40 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ac:	f000 f8fe 	bl	80007ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005b0:	f000 f94a 	bl	8000848 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b4:	f000 f972 	bl	800089c <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  debounceUpdate();
 80005b8:	f000 fd86 	bl	80010c8 <debounceUpdate>
	  if (readKey()) {
 80005bc:	f000 fdd0 	bl	8001160 <readKey>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d012      	beq.n	80005ec <main+0x6c>
	  	      secuenciaActual = (secuenciaActual + 1) % numeroTotalSecuencias;
 80005c6:	4b40      	ldr	r3, [pc, #256]	@ (80006c8 <main+0x148>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a3f      	ldr	r2, [pc, #252]	@ (80006cc <main+0x14c>)
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80005d4:	fb01 f202 	mul.w	r2, r1, r2
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b3a      	ldr	r3, [pc, #232]	@ (80006c8 <main+0x148>)
 80005de:	701a      	strb	r2, [r3, #0]
	  	    printf("Secuencia cambiada a: %d\n", secuenciaActual);
 80005e0:	4b39      	ldr	r3, [pc, #228]	@ (80006c8 <main+0x148>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	483a      	ldr	r0, [pc, #232]	@ (80006d0 <main+0x150>)
 80005e8:	f003 f8a8 	bl	800373c <iprintf>
	  	  }


	  	  for (uint8_t i = 0; i < 3; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	75fb      	strb	r3, [r7, #23]
 80005f0:	e00b      	b.n	800060a <main+0x8a>
	  	          writeLedOn_GPIO(Led[i]);
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	3318      	adds	r3, #24
 80005f8:	443b      	add	r3, r7
 80005fa:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fccc 	bl	8000f9c <writeLedOn_GPIO>
	  	  for (uint8_t i = 0; i < 3; i++) {
 8000604:	7dfb      	ldrb	r3, [r7, #23]
 8000606:	3301      	adds	r3, #1
 8000608:	75fb      	strb	r3, [r7, #23]
 800060a:	7dfb      	ldrb	r3, [r7, #23]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d9f0      	bls.n	80005f2 <main+0x72>
	  	      }
	  	      delayInit(&myDelay, secuencias[secuenciaActual].tiempo_encendido);
 8000610:	4b2d      	ldr	r3, [pc, #180]	@ (80006c8 <main+0x148>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4a2f      	ldr	r2, [pc, #188]	@ (80006d4 <main+0x154>)
 8000618:	460b      	mov	r3, r1
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	440b      	add	r3, r1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4413      	add	r3, r2
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fcda 	bl	8000fe4 <delayInit>
	  	      while (!delayRead(&myDelay)) {
 8000630:	e004      	b.n	800063c <main+0xbc>
	  	    	if (readKey()) {
 8000632:	f000 fd95 	bl	8001160 <readKey>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d10a      	bne.n	8000652 <main+0xd2>
	  	      while (!delayRead(&myDelay)) {
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fce4 	bl	800100c <delayRead>
 8000644:	4603      	mov	r3, r0
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f0      	bne.n	8000632 <main+0xb2>
 8000650:	e000      	b.n	8000654 <main+0xd4>
	  	    	            // Si se presionó el botón, salir del bucle
	  	    	            break;
 8000652:	bf00      	nop
	  	    	        }
	  	      }

	  	      for (uint8_t i = 0; i < 3; i++) {
 8000654:	2300      	movs	r3, #0
 8000656:	75bb      	strb	r3, [r7, #22]
 8000658:	e00b      	b.n	8000672 <main+0xf2>
	  	          writeLedOff_GPIO(Led[i]);
 800065a:	7dbb      	ldrb	r3, [r7, #22]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	3318      	adds	r3, #24
 8000660:	443b      	add	r3, r7
 8000662:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fcaa 	bl	8000fc0 <writeLedOff_GPIO>
	  	      for (uint8_t i = 0; i < 3; i++) {
 800066c:	7dbb      	ldrb	r3, [r7, #22]
 800066e:	3301      	adds	r3, #1
 8000670:	75bb      	strb	r3, [r7, #22]
 8000672:	7dbb      	ldrb	r3, [r7, #22]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d9f0      	bls.n	800065a <main+0xda>
	  	      }
	  	      delayInit(&myDelay, secuencias[secuenciaActual].tiempo_apagado);
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <main+0x148>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <main+0x154>)
 8000680:	460b      	mov	r3, r1
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	440b      	add	r3, r1
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	3302      	adds	r3, #2
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fca5 	bl	8000fe4 <delayInit>
	  	      while (!delayRead(&myDelay)) {
 800069a:	e004      	b.n	80006a6 <main+0x126>
	  	    	if (readKey()) {
 800069c:	f000 fd60 	bl	8001160 <readKey>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10a      	bne.n	80006bc <main+0x13c>
	  	      while (!delayRead(&myDelay)) {
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fcaf 	bl	800100c <delayRead>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f0      	bne.n	800069c <main+0x11c>
 80006ba:	e77d      	b.n	80005b8 <main+0x38>
	  	    	            // Si se presionó el botón, salir del bucle
	  	    	            break;
 80006bc:	bf00      	nop
	  debounceUpdate();
 80006be:	e77b      	b.n	80005b8 <main+0x38>
 80006c0:	0800444c 	.word	0x0800444c
 80006c4:	40020800 	.word	0x40020800
 80006c8:	20000800 	.word	0x20000800
 80006cc:	20000004 	.word	0x20000004
 80006d0:	08004430 	.word	0x08004430
 80006d4:	20000008 	.word	0x20000008

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	@ 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f87d 	bl	80037e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000738:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800074c:	23a8      	movs	r3, #168	@ 0xa8
 800074e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fccf 	bl	8002100 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f8c6 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2105      	movs	r1, #5
 800078a:	4618      	mov	r0, r3
 800078c:	f001 ff30 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 f8af 	bl	80008f8 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_ETH_Init+0x84>)
 80007b2:	4a20      	ldr	r2, [pc, #128]	@ (8000834 <MX_ETH_Init+0x88>)
 80007b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007be:	2280      	movs	r2, #128	@ 0x80
 80007c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007c4:	22e1      	movs	r2, #225	@ 0xe1
 80007c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_ETH_Init+0x84>)
 80007dc:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_ETH_Init+0x84>)
 80007e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_ETH_Init+0x84>)
 80007ea:	4a14      	ldr	r2, [pc, #80]	@ (800083c <MX_ETH_Init+0x90>)
 80007ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_ETH_Init+0x84>)
 80007f0:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_ETH_Init+0x94>)
 80007f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_ETH_Init+0x84>)
 80007f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <MX_ETH_Init+0x84>)
 80007fe:	f000 fe43 	bl	8001488 <HAL_ETH_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f876 	bl	80008f8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800080c:	2238      	movs	r2, #56	@ 0x38
 800080e:	2100      	movs	r1, #0
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_ETH_Init+0x98>)
 8000812:	f002 ffe8 	bl	80037e6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_ETH_Init+0x98>)
 8000818:	2221      	movs	r2, #33	@ 0x21
 800081a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_ETH_Init+0x98>)
 800081e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000822:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_ETH_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000218 	.word	0x20000218
 8000834:	40028000 	.word	0x40028000
 8000838:	200007f4 	.word	0x200007f4
 800083c:	20000178 	.word	0x20000178
 8000840:	200000d8 	.word	0x200000d8
 8000844:	200000a0 	.word	0x200000a0

08000848 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <MX_USART3_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USART3_UART_Init+0x4c>)
 8000880:	f002 f8d6 	bl	8002a30 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f835 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200002c8 	.word	0x200002c8
 8000898:	40004800 	.word	0x40004800

0800089c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2202      	movs	r2, #2
 80008be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	f001 faff 	bl	8001ee2 <HAL_PCD_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f805 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000310 	.word	0x20000310

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	4a0f      	ldr	r2, [pc, #60]	@ (8000950 <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000918:	6453      	str	r3, [r2, #68]	@ 0x44
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	4a08      	ldr	r2, [pc, #32]	@ (8000950 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	@ 0x40
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	@ 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a55      	ldr	r2, [pc, #340]	@ (8000ac8 <HAL_ETH_MspInit+0x174>)
 8000972:	4293      	cmp	r3, r2
 8000974:	f040 80a4 	bne.w	8000ac0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
 800097c:	4b53      	ldr	r3, [pc, #332]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000980:	4a52      	ldr	r2, [pc, #328]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 8000982:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000986:	6313      	str	r3, [r2, #48]	@ 0x30
 8000988:	4b50      	ldr	r3, [pc, #320]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000990:	623b      	str	r3, [r7, #32]
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	4b4c      	ldr	r3, [pc, #304]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099c:	4a4b      	ldr	r2, [pc, #300]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 800099e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a4:	4b49      	ldr	r3, [pc, #292]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009ac:	61fb      	str	r3, [r7, #28]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	4b45      	ldr	r3, [pc, #276]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4a44      	ldr	r2, [pc, #272]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80009be:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c0:	4b42      	ldr	r3, [pc, #264]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	4b3e      	ldr	r3, [pc, #248]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d4:	4a3d      	ldr	r2, [pc, #244]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	6313      	str	r3, [r2, #48]	@ 0x30
 80009dc:	4b3b      	ldr	r3, [pc, #236]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	4b37      	ldr	r3, [pc, #220]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f0:	4a36      	ldr	r2, [pc, #216]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f8:	4b34      	ldr	r3, [pc, #208]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a14:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a28:	4a28      	ldr	r2, [pc, #160]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 8000a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a30:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <HAL_ETH_MspInit+0x178>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a3c:	2332      	movs	r3, #50	@ 0x32
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	481e      	ldr	r0, [pc, #120]	@ (8000ad0 <HAL_ETH_MspInit+0x17c>)
 8000a58:	f001 f866 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a5c:	2386      	movs	r3, #134	@ 0x86
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6c:	230b      	movs	r3, #11
 8000a6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4817      	ldr	r0, [pc, #92]	@ (8000ad4 <HAL_ETH_MspInit+0x180>)
 8000a78:	f001 f856 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	480f      	ldr	r0, [pc, #60]	@ (8000ad8 <HAL_ETH_MspInit+0x184>)
 8000a9a:	f001 f845 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a9e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4808      	ldr	r0, [pc, #32]	@ (8000adc <HAL_ETH_MspInit+0x188>)
 8000abc:	f001 f834 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3738      	adds	r7, #56	@ 0x38
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40028000 	.word	0x40028000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40021800 	.word	0x40021800

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12c      	bne.n	8000b5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b58:	f000 ffe6 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40004800 	.word	0x40004800
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020c00 	.word	0x40020c00

08000b70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b90:	d13f      	bne.n	8000c12 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <HAL_PCD_MspInit+0xac>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a20      	ldr	r2, [pc, #128]	@ (8000c1c <HAL_PCD_MspInit+0xac>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <HAL_PCD_MspInit+0xac>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bae:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4815      	ldr	r0, [pc, #84]	@ (8000c20 <HAL_PCD_MspInit+0xb0>)
 8000bcc:	f000 ffac 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <HAL_PCD_MspInit+0xb0>)
 8000be6:	f000 ff9f 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_PCD_MspInit+0xac>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bee:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <HAL_PCD_MspInit+0xac>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_PCD_MspInit+0xac>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <HAL_PCD_MspInit+0xac>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c06:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_PCD_MspInit+0xac>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	@ 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7a:	f000 fadb 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e00a      	b.n	8000caa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c94:	f3af 8000 	nop.w
 8000c98:	4601      	mov	r1, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	60ba      	str	r2, [r7, #8]
 8000ca0:	b2ca      	uxtb	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbf0      	blt.n	8000c94 <_read+0x12>
  }

  return len;
 8000cb2:	687b      	ldr	r3, [r7, #4]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e009      	b.n	8000ce2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbf1      	blt.n	8000cce <_write+0x12>
  }
  return len;
 8000cea:	687b      	ldr	r3, [r7, #4]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_close>:

int _close(int file)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d1c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_isatty>:

int _isatty(int file)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d34:	2301      	movs	r3, #1
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b085      	sub	sp, #20
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f002 fd7a 	bl	8003884 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20030000 	.word	0x20030000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	200007fc 	.word	0x200007fc
 8000dc4:	20000968 	.word	0x20000968

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df0:	f7ff ffea 	bl	8000dc8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f002 fd39 	bl	8003890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fbaf 	bl	8000580 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e30:	080044b0 	.word	0x080044b0
  ldr r2, =_sbss
 8000e34:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000e38:	20000968 	.word	0x20000968

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	@ 0x30
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b49      	ldr	r3, [pc, #292]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b45      	ldr	r3, [pc, #276]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a44      	ldr	r2, [pc, #272]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b42      	ldr	r3, [pc, #264]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b3e      	ldr	r3, [pc, #248]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a3d      	ldr	r2, [pc, #244]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b37      	ldr	r3, [pc, #220]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a36      	ldr	r2, [pc, #216]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b34      	ldr	r3, [pc, #208]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a2f      	ldr	r2, [pc, #188]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a28      	ldr	r2, [pc, #160]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <MX_GPIO_Init+0x14c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f04:	4822      	ldr	r0, [pc, #136]	@ (8000f90 <MX_GPIO_Init+0x150>)
 8000f06:	f000 ffd3 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2140      	movs	r1, #64	@ 0x40
 8000f0e:	4821      	ldr	r0, [pc, #132]	@ (8000f94 <MX_GPIO_Init+0x154>)
 8000f10:	f000 ffce 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481b      	ldr	r0, [pc, #108]	@ (8000f98 <MX_GPIO_Init+0x158>)
 8000f2c:	f000 fdfc 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f30:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <MX_GPIO_Init+0x150>)
 8000f4a:	f000 fded 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f4e:	2340      	movs	r3, #64	@ 0x40
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <MX_GPIO_Init+0x154>)
 8000f66:	f000 fddf 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_GPIO_Init+0x154>)
 8000f7e:	f000 fdd3 	bl	8001b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f82:	bf00      	nop
 8000f84:	3730      	adds	r7, #48	@ 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40020800 	.word	0x40020800

08000f9c <writeLedOn_GPIO>:
  * @brief GPIO Led on Function
  * @param led_t LDx
  * @retval None
  */
void writeLedOn_GPIO(led_t LDx)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_SET);
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <writeLedOn_GPIO+0x20>)
 8000fae:	f000 ff7f 	bl	8001eb0 <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <writeLedOff_GPIO>:
  * @brief GPIO Led off Function
  * @param led_t LDx
  * @retval None
  */
void writeLedOff_GPIO(led_t LDx)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_RESET);
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <writeLedOff_GPIO+0x20>)
 8000fd2:	f000 ff6d 	bl	8001eb0 <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <delayInit>:
/**
  * @brief: FUNCION NO BLOQUEANTE
  * @param: none
  * @retval Button Status: La función actualiza las variables globales
  */
void delayInit(delay_t *delay, tick_t duration) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    delay->startTime = 0;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
    delay->duration = duration;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
    delay->running = false;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	721a      	strb	r2, [r3, #8]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <delayRead>:
bool_t delayRead(delay_t *delay) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    // Si el retardo no está en ejecución, lo iniciamos
    if (!delay->running) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7a1b      	ldrb	r3, [r3, #8]
 8001018:	f083 0301 	eor.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d009      	beq.n	8001036 <delayRead+0x2a>
        delay->startTime = HAL_GetTick(); // Guardar el tiempo de inicio actual
 8001022:	f000 f91b 	bl	800125c <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]
        delay->running = true;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	721a      	strb	r2, [r3, #8]
        return false; // Indicar que el retardo acaba de comenzar
 8001032:	2300      	movs	r3, #0
 8001034:	e00f      	b.n	8001056 <delayRead+0x4a>
    } else {
        // Si el retardo está en ejecución, verificamos si ha finalizado
        if (HAL_GetTick() - delay->startTime >= delay->duration) {
 8001036:	f000 f911 	bl	800125c <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1ad2      	subs	r2, r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d304      	bcc.n	8001054 <delayRead+0x48>
            delay->running = false; // Marcar el retardo como terminado
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	721a      	strb	r2, [r3, #8]
            return true; // Indicar que el retardo ha finalizado
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <delayRead+0x4a>
        } else {
            return false; // Indicar que el retardo aún no ha finalizado
 8001054:	2300      	movs	r3, #0
        }
    }
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <debounceInit>:
/**
  * @brief FUNCION ANTEREBOTE
  * @param debounceInit
  * @retval None
  */
void debounceInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
    // Inicializar el GPIO para leer el estado del botón
    debouncePinGPIOx = GPIOC;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <debounceInit+0x58>)
 800106e:	4a13      	ldr	r2, [pc, #76]	@ (80010bc <debounceInit+0x5c>)
 8001070:	601a      	str	r2, [r3, #0]
    debouncePinPin = USER_Btn_Pin;
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <debounceInit+0x60>)
 8001074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001078:	801a      	strh	r2, [r3, #0]

    // Configurar el GPIO como entrada
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = debouncePinPin;
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <debounceInit+0x60>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
    // ... Otras configuraciones según tu MCU

    HAL_GPIO_Init(debouncePinGPIOx, &GPIO_InitStruct);
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <debounceInit+0x58>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f107 020c 	add.w	r2, r7, #12
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fd42 	bl	8001b28 <HAL_GPIO_Init>

    // Inicializar el temporizador (si es necesario)
    debounceTimer = HAL_GetTick();
 80010a4:	f000 f8da 	bl	800125c <HAL_GetTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <debounceInit+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000804 	.word	0x20000804
 80010bc:	40020800 	.word	0x40020800
 80010c0:	20000808 	.word	0x20000808
 80010c4:	2000080c 	.word	0x2000080c

080010c8 <debounceUpdate>:

void debounceUpdate(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
    static uint32_t previousButtonValue = 0;
    uint32_t currentButtonValue = HAL_GPIO_ReadPin(debouncePinGPIOx, debouncePinPin);
 80010ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <debounceUpdate+0x80>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1e      	ldr	r2, [pc, #120]	@ (800114c <debounceUpdate+0x84>)
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fed1 	bl	8001e80 <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	607b      	str	r3, [r7, #4]

    // Detectar flanco descendente
    if (currentButtonValue == GPIO_PIN_RESET && previousButtonValue == GPIO_PIN_SET) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10b      	bne.n	8001100 <debounceUpdate+0x38>
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <debounceUpdate+0x88>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d107      	bne.n	8001100 <debounceUpdate+0x38>
        flagFlancoDescendente = true;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <debounceUpdate+0x8c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
        debounceTimer = HAL_GetTick();
 80010f6:	f000 f8b1 	bl	800125c <HAL_GetTick>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a16      	ldr	r2, [pc, #88]	@ (8001158 <debounceUpdate+0x90>)
 80010fe:	6013      	str	r3, [r2, #0]
    }

    // Si ha pasado el tiempo de debounce y se detectó un flanco descendente
    if (flagFlancoDescendente && HAL_GetTick() - debounceTimer > DEBOUNCE_DELAY) {
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <debounceUpdate+0x8c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00e      	beq.n	8001126 <debounceUpdate+0x5e>
 8001108:	f000 f8a8 	bl	800125c <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <debounceUpdate+0x90>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b28      	cmp	r3, #40	@ 0x28
 8001116:	d906      	bls.n	8001126 <debounceUpdate+0x5e>
        buttonState = BUTTON_DOWN;
 8001118:	4b10      	ldr	r3, [pc, #64]	@ (800115c <debounceUpdate+0x94>)
 800111a:	2202      	movs	r2, #2
 800111c:	701a      	strb	r2, [r3, #0]
        flagFlancoDescendente = false; // Reiniciar el flag
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <debounceUpdate+0x8c>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e008      	b.n	8001138 <debounceUpdate+0x70>
    } else if (currentButtonValue == GPIO_PIN_SET) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d105      	bne.n	8001138 <debounceUpdate+0x70>
        buttonState = BUTTON_UP;
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <debounceUpdate+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
        flagFlancoDescendente = false; // Reiniciar el flag en caso de que el botón se suelte
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <debounceUpdate+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    }

    previousButtonValue = currentButtonValue;
 8001138:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <debounceUpdate+0x88>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000804 	.word	0x20000804
 800114c:	20000808 	.word	0x20000808
 8001150:	20000814 	.word	0x20000814
 8001154:	20000811 	.word	0x20000811
 8001158:	2000080c 	.word	0x2000080c
 800115c:	20000810 	.word	0x20000810

08001160 <readKey>:

bool readKey() {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
    bool keyPressed = false;
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
    if (buttonState == BUTTON_DOWN) {
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <readKey+0x2c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d104      	bne.n	800117c <readKey+0x1c>
        keyPressed = true;
 8001172:	2301      	movs	r3, #1
 8001174:	71fb      	strb	r3, [r7, #7]
        buttonState = BUTTON_UP; // Restablecer el estado del botón
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <readKey+0x2c>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
    }
    return keyPressed;
 800117c:	79fb      	ldrb	r3, [r7, #7]
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000810 	.word	0x20000810

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f931 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fb9e 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f93b 	bl	800146e <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f911 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000024 	.word	0x20000024
 8001230:	20000020 	.word	0x20000020

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000024 	.word	0x20000024
 8001258:	20000818 	.word	0x20000818

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000818 	.word	0x20000818

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000024 	.word	0x20000024

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff5c 	bl	8001304 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffb0 	bl	80013dc <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e08a      	b.n	80015b0 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d106      	bne.n	80014b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2223      	movs	r2, #35	@ 0x23
 80014a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fa51 	bl	8000954 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <HAL_ETH_Init+0x130>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	4a3f      	ldr	r2, [pc, #252]	@ (80015b8 <HAL_ETH_Init+0x130>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c2:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <HAL_ETH_Init+0x130>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014ce:	4b3b      	ldr	r3, [pc, #236]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a3a      	ldr	r2, [pc, #232]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	4936      	ldr	r1, [pc, #216]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014e8:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001502:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001504:	f7ff feaa 	bl	800125c <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800150a:	e011      	b.n	8001530 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800150c:	f7ff fea6 	bl	800125c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800151a:	d909      	bls.n	8001530 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2204      	movs	r2, #4
 8001520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	22e0      	movs	r2, #224	@ 0xe0
 8001528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e03f      	b.n	80015b0 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e4      	bne.n	800150c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f97a 	bl	800183c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fa25 	bl	8001998 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fa7b 	bl	8001a4a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	2100      	movs	r1, #0
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f9e3 	bl	8001928 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001570:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001582:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001586:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800159a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2210      	movs	r2, #16
 80015aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800

080015c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <ETH_SetMACConfig+0x164>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7b9b      	ldrb	r3, [r3, #14]
 80015de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	7c12      	ldrb	r2, [r2, #16]
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d102      	bne.n	80015ee <ETH_SetMACConfig+0x2e>
 80015e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015ec:	e000      	b.n	80015f0 <ETH_SetMACConfig+0x30>
 80015ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	7c52      	ldrb	r2, [r2, #17]
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d102      	bne.n	8001600 <ETH_SetMACConfig+0x40>
 80015fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015fe:	e000      	b.n	8001602 <ETH_SetMACConfig+0x42>
 8001600:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001602:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001608:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	7fdb      	ldrb	r3, [r3, #31]
 800160e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001610:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001616:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	7f92      	ldrb	r2, [r2, #30]
 800161c:	2a00      	cmp	r2, #0
 800161e:	d102      	bne.n	8001626 <ETH_SetMACConfig+0x66>
 8001620:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001624:	e000      	b.n	8001628 <ETH_SetMACConfig+0x68>
 8001626:	2200      	movs	r2, #0
                        macconf->Speed |
 8001628:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	7f1b      	ldrb	r3, [r3, #28]
 800162e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001630:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001636:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	791b      	ldrb	r3, [r3, #4]
 800163c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800163e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001646:	2a00      	cmp	r2, #0
 8001648:	d102      	bne.n	8001650 <ETH_SetMACConfig+0x90>
 800164a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164e:	e000      	b.n	8001652 <ETH_SetMACConfig+0x92>
 8001650:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001652:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	7bdb      	ldrb	r3, [r3, #15]
 8001658:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800165a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001660:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001668:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800166a:	4313      	orrs	r3, r2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff fdf6 	bl	8001274 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d101      	bne.n	80016b6 <ETH_SetMACConfig+0xf6>
 80016b2:	2280      	movs	r2, #128	@ 0x80
 80016b4:	e000      	b.n	80016b8 <ETH_SetMACConfig+0xf8>
 80016b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80016c6:	2a01      	cmp	r2, #1
 80016c8:	d101      	bne.n	80016ce <ETH_SetMACConfig+0x10e>
 80016ca:	2208      	movs	r2, #8
 80016cc:	e000      	b.n	80016d0 <ETH_SetMACConfig+0x110>
 80016ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80016d8:	2a01      	cmp	r2, #1
 80016da:	d101      	bne.n	80016e0 <ETH_SetMACConfig+0x120>
 80016dc:	2204      	movs	r2, #4
 80016de:	e000      	b.n	80016e2 <ETH_SetMACConfig+0x122>
 80016e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80016ea:	2a01      	cmp	r2, #1
 80016ec:	d101      	bne.n	80016f2 <ETH_SetMACConfig+0x132>
 80016ee:	2202      	movs	r2, #2
 80016f0:	e000      	b.n	80016f4 <ETH_SetMACConfig+0x134>
 80016f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016f4:	4313      	orrs	r3, r2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fdb1 	bl	8001274 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	fd20810f 	.word	0xfd20810f

08001728 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <ETH_SetDMAConfig+0x110>)
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	7b1b      	ldrb	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <ETH_SetDMAConfig+0x2c>
 800174e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001752:	e000      	b.n	8001756 <ETH_SetDMAConfig+0x2e>
 8001754:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7b5b      	ldrb	r3, [r3, #13]
 800175a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800175c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	7f52      	ldrb	r2, [r2, #29]
 8001762:	2a00      	cmp	r2, #0
 8001764:	d102      	bne.n	800176c <ETH_SetDMAConfig+0x44>
 8001766:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800176a:	e000      	b.n	800176e <ETH_SetDMAConfig+0x46>
 800176c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800176e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	7b9b      	ldrb	r3, [r3, #14]
 8001774:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001776:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800177c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	7f1b      	ldrb	r3, [r3, #28]
 8001782:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001784:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	7f9b      	ldrb	r3, [r3, #30]
 800178a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800178c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001792:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800179a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800179c:	4313      	orrs	r3, r2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ac:	461a      	mov	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff fd58 	bl	8001274 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	791b      	ldrb	r3, [r3, #4]
 80017d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80017f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001800:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800180a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800180e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff fd29 	bl	8001274 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	f8de3f23 	.word	0xf8de3f23

0800183c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0a6      	sub	sp, #152	@ 0x98
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800187e:	2300      	movs	r3, #0
 8001880:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001888:	2300      	movs	r3, #0
 800188a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018ba:	4619      	mov	r1, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fe7f 	bl	80015c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018c6:	2301      	movs	r3, #1
 80018c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018ee:	2301      	movs	r3, #1
 80018f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001902:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001904:	2301      	movs	r3, #1
 8001906:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	4619      	mov	r1, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff05 	bl	8001728 <ETH_SetDMAConfig>
}
 800191e:	bf00      	nop
 8001920:	3798      	adds	r7, #152	@ 0x98
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3305      	adds	r3, #5
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	3204      	adds	r2, #4
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <ETH_MACAddressConfig+0x68>)
 800194a:	4413      	add	r3, r2
 800194c:	461a      	mov	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3303      	adds	r3, #3
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	061a      	lsls	r2, r3, #24
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3302      	adds	r3, #2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3301      	adds	r3, #1
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4313      	orrs	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <ETH_MACAddressConfig+0x6c>)
 800197a:	4413      	add	r3, r2
 800197c:	461a      	mov	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	6013      	str	r3, [r2, #0]
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40028040 	.word	0x40028040
 8001994:	40028044 	.word	0x40028044

08001998 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e03e      	b.n	8001a24 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68d9      	ldr	r1, [r3, #12]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	3206      	adds	r2, #6
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d80c      	bhi.n	8001a08 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68d9      	ldr	r1, [r3, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	461a      	mov	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	e004      	b.n	8001a12 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d9bd      	bls.n	80019a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a3c:	611a      	str	r2, [r3, #16]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e048      	b.n	8001aea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6919      	ldr	r1, [r3, #16]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a94:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	3212      	adds	r2, #18
 8001ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d80c      	bhi.n	8001ada <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6919      	ldr	r1, [r3, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	e004      	b.n	8001ae4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d9b3      	bls.n	8001a58 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1a:	60da      	str	r2, [r3, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e177      	b.n	8001e34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8166 	bne.w	8001e2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d130      	bne.n	8001bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80c0 	beq.w	8001e2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b66      	ldr	r3, [pc, #408]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a65      	ldr	r2, [pc, #404]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cca:	4a61      	ldr	r2, [pc, #388]	@ (8001e50 <HAL_GPIO_Init+0x328>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	@ (8001e54 <HAL_GPIO_Init+0x32c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d037      	beq.n	8001d66 <HAL_GPIO_Init+0x23e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a57      	ldr	r2, [pc, #348]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d031      	beq.n	8001d62 <HAL_GPIO_Init+0x23a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a56      	ldr	r2, [pc, #344]	@ (8001e5c <HAL_GPIO_Init+0x334>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02b      	beq.n	8001d5e <HAL_GPIO_Init+0x236>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a55      	ldr	r2, [pc, #340]	@ (8001e60 <HAL_GPIO_Init+0x338>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x232>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a54      	ldr	r2, [pc, #336]	@ (8001e64 <HAL_GPIO_Init+0x33c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x22e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a53      	ldr	r2, [pc, #332]	@ (8001e68 <HAL_GPIO_Init+0x340>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x22a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_GPIO_Init+0x344>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x226>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a51      	ldr	r2, [pc, #324]	@ (8001e70 <HAL_GPIO_Init+0x348>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x222>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a50      	ldr	r2, [pc, #320]	@ (8001e74 <HAL_GPIO_Init+0x34c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x21e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x21a>
 8001d3e:	2309      	movs	r3, #9
 8001d40:	e012      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d42:	230a      	movs	r3, #10
 8001d44:	e010      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d46:	2308      	movs	r3, #8
 8001d48:	e00e      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e00c      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00a      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e008      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d66:	2300      	movs	r3, #0
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d78:	4935      	ldr	r1, [pc, #212]	@ (8001e50 <HAL_GPIO_Init+0x328>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b3d      	ldr	r3, [pc, #244]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001daa:	4a34      	ldr	r2, [pc, #208]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db0:	4b32      	ldr	r3, [pc, #200]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd4:	4a29      	ldr	r2, [pc, #164]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dda:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e28:	4a14      	ldr	r2, [pc, #80]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f67f ae84 	bls.w	8001b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3724      	adds	r7, #36	@ 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	40021c00 	.word	0x40021c00
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40022400 	.word	0x40022400
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af02      	add	r7, sp, #8
 8001ee8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e101      	b.n	80020f8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fe2e 	bl	8000b70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f22:	d102      	bne.n	8001f2a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 f8a6 	bl	8003080 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7c1a      	ldrb	r2, [r3, #16]
 8001f3c:	f88d 2000 	strb.w	r2, [sp]
 8001f40:	3304      	adds	r3, #4
 8001f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f44:	f001 f838 	bl	8002fb8 <USB_CoreInit>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0ce      	b.n	80020f8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 f89e 	bl	80030a2 <USB_SetCurrentMode>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0bf      	b.n	80020f8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e04a      	b.n	8002014 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3315      	adds	r3, #21
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	b298      	uxth	r0, r3
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	332e      	adds	r3, #46	@ 0x2e
 8001fba:	4602      	mov	r2, r0
 8001fbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3318      	adds	r3, #24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	331c      	adds	r3, #28
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3324      	adds	r3, #36	@ 0x24
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	3301      	adds	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	791b      	ldrb	r3, [r3, #4]
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	429a      	cmp	r2, r3
 800201c:	d3af      	bcc.n	8001f7e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e044      	b.n	80020ae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	3301      	adds	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d3b5      	bcc.n	8002024 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7c1a      	ldrb	r2, [r3, #16]
 80020c0:	f88d 2000 	strb.w	r2, [sp]
 80020c4:	3304      	adds	r3, #4
 80020c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c8:	f001 f838 	bl	800313c <USB_DevInit>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00c      	b.n	80020f8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fa00 	bl	80034f6 <USB_DevDisconnect>

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e267      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d075      	beq.n	800220a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800211e:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00c      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4b85      	ldr	r3, [pc, #532]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002132:	2b08      	cmp	r3, #8
 8002134:	d112      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4b82      	ldr	r3, [pc, #520]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800213e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b7e      	ldr	r3, [pc, #504]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05b      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d157      	bne.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e242      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x74>
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a75      	ldr	r2, [pc, #468]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b70      	ldr	r3, [pc, #448]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6f      	ldr	r2, [pc, #444]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6c      	ldr	r2, [pc, #432]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002198:	4b69      	ldr	r3, [pc, #420]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a68      	ldr	r2, [pc, #416]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b66      	ldr	r3, [pc, #408]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a65      	ldr	r2, [pc, #404]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f850 	bl	800125c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f84c 	bl	800125c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e207      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xc0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff f83c 	bl	800125c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff f838 	bl	800125c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1f3      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe8>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002216:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b44      	ldr	r3, [pc, #272]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c7      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4937      	ldr	r1, [pc, #220]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b34      	ldr	r3, [pc, #208]	@ (8002344 <HAL_RCC_OscConfig+0x244>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe fff1 	bl	800125c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe ffed 	bl	800125c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a8      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4925      	ldr	r1, [pc, #148]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_RCC_OscConfig+0x244>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe ffd0 	bl	800125c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe ffcc 	bl	800125c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e187      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d036      	beq.n	8002358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_RCC_OscConfig+0x248>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe ffb0 	bl	800125c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe ffac 	bl	800125c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e167      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x200>
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_RCC_OscConfig+0x248>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe ff99 	bl	800125c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e00e      	b.n	800234c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe ff95 	bl	800125c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d907      	bls.n	800234c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e150      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002340:	40023800 	.word	0x40023800
 8002344:	42470000 	.word	0x42470000
 8002348:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b88      	ldr	r3, [pc, #544]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ea      	bne.n	800232e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8097 	beq.w	8002494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b7d      	ldr	r3, [pc, #500]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	4a7c      	ldr	r2, [pc, #496]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	@ 0x40
 8002386:	4b7a      	ldr	r3, [pc, #488]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b77      	ldr	r3, [pc, #476]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d118      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b74      	ldr	r3, [pc, #464]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a73      	ldr	r2, [pc, #460]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe ff55 	bl	800125c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b6:	f7fe ff51 	bl	800125c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e10c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x2ea>
 80023dc:	4b64      	ldr	r3, [pc, #400]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a63      	ldr	r2, [pc, #396]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x30c>
 80023f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002402:	4a5b      	ldr	r2, [pc, #364]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	@ 0x70
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 800240c:	4b58      	ldr	r3, [pc, #352]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	4a57      	ldr	r2, [pc, #348]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	@ 0x70
 8002418:	4b55      	ldr	r3, [pc, #340]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	4a54      	ldr	r2, [pc, #336]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800241e:	f023 0304 	bic.w	r3, r3, #4
 8002422:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe ff16 	bl	800125c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe ff12 	bl	800125c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0cb      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	4b49      	ldr	r3, [pc, #292]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ee      	beq.n	8002434 <HAL_RCC_OscConfig+0x334>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe ff00 	bl	800125c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe fefc 	bl	800125c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0b5      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	4b3e      	ldr	r3, [pc, #248]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	4a38      	ldr	r2, [pc, #224]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002492:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a1 	beq.w	80025e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800249e:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d05c      	beq.n	8002564 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d141      	bne.n	8002536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fed0 	bl	800125c <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fecc 	bl	800125c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e087      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	4b27      	ldr	r3, [pc, #156]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	491b      	ldr	r1, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fea5 	bl	800125c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fea1 	bl	800125c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e05c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x416>
 8002534:	e054      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fe8e 	bl	800125c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fe8a 	bl	800125c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e045      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
 8002562:	e03d      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e038      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000
 8002578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800257c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_RCC_OscConfig+0x4ec>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d028      	beq.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d121      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d11a      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d111      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	3b01      	subs	r3, #1
 80025c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fdbc 	bl	800125c <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fdb8 	bl	800125c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fd1c 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08004454 	.word	0x08004454
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000020 	.word	0x20000020

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b094      	sub	sp, #80	@ 0x50
 80027c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d4:	4b79      	ldr	r3, [pc, #484]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d00d      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	f200 80e1 	bhi.w	80029a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ee:	e0db      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b73      	ldr	r3, [pc, #460]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027f4:	e0db      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f6:	4b73      	ldr	r3, [pc, #460]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80027f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fa:	e0d8      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fc:	4b6f      	ldr	r3, [pc, #444]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002804:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002806:	4b6d      	ldr	r3, [pc, #436]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d063      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b6a      	ldr	r3, [pc, #424]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	2200      	movs	r2, #0
 800281a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800281c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800281e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
 8002826:	2300      	movs	r3, #0
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
 800282a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800282e:	4622      	mov	r2, r4
 8002830:	462b      	mov	r3, r5
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	0159      	lsls	r1, r3, #5
 800283c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002840:	0150      	lsls	r0, r2, #5
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4621      	mov	r1, r4
 8002848:	1a51      	subs	r1, r2, r1
 800284a:	6139      	str	r1, [r7, #16]
 800284c:	4629      	mov	r1, r5
 800284e:	eb63 0301 	sbc.w	r3, r3, r1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002860:	4659      	mov	r1, fp
 8002862:	018b      	lsls	r3, r1, #6
 8002864:	4651      	mov	r1, sl
 8002866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286a:	4651      	mov	r1, sl
 800286c:	018a      	lsls	r2, r1, #6
 800286e:	4651      	mov	r1, sl
 8002870:	ebb2 0801 	subs.w	r8, r2, r1
 8002874:	4659      	mov	r1, fp
 8002876:	eb63 0901 	sbc.w	r9, r3, r1
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800288a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800288e:	4690      	mov	r8, r2
 8002890:	4699      	mov	r9, r3
 8002892:	4623      	mov	r3, r4
 8002894:	eb18 0303 	adds.w	r3, r8, r3
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	462b      	mov	r3, r5
 800289c:	eb49 0303 	adc.w	r3, r9, r3
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ae:	4629      	mov	r1, r5
 80028b0:	024b      	lsls	r3, r1, #9
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028b8:	4621      	mov	r1, r4
 80028ba:	024a      	lsls	r2, r1, #9
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c2:	2200      	movs	r2, #0
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028cc:	f7fd fce0 	bl	8000290 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028d8:	e058      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028da:	4b38      	ldr	r3, [pc, #224]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	099b      	lsrs	r3, r3, #6
 80028e0:	2200      	movs	r2, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	4611      	mov	r1, r2
 80028e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028f4:	4642      	mov	r2, r8
 80028f6:	464b      	mov	r3, r9
 80028f8:	f04f 0000 	mov.w	r0, #0
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	0159      	lsls	r1, r3, #5
 8002902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002906:	0150      	lsls	r0, r2, #5
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4641      	mov	r1, r8
 800290e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002912:	4649      	mov	r1, r9
 8002914:	eb63 0b01 	sbc.w	fp, r3, r1
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800292c:	ebb2 040a 	subs.w	r4, r2, sl
 8002930:	eb63 050b 	sbc.w	r5, r3, fp
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	00eb      	lsls	r3, r5, #3
 800293e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002942:	00e2      	lsls	r2, r4, #3
 8002944:	4614      	mov	r4, r2
 8002946:	461d      	mov	r5, r3
 8002948:	4643      	mov	r3, r8
 800294a:	18e3      	adds	r3, r4, r3
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	464b      	mov	r3, r9
 8002950:	eb45 0303 	adc.w	r3, r5, r3
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002962:	4629      	mov	r1, r5
 8002964:	028b      	lsls	r3, r1, #10
 8002966:	4621      	mov	r1, r4
 8002968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800296c:	4621      	mov	r1, r4
 800296e:	028a      	lsls	r2, r1, #10
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002976:	2200      	movs	r2, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	61fa      	str	r2, [r7, #28]
 800297c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002980:	f7fd fc86 	bl	8000290 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4613      	mov	r3, r2
 800298a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	3301      	adds	r3, #1
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800299c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800299e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029a6:	e002      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3750      	adds	r7, #80	@ 0x50
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0a9b      	lsrs	r3, r3, #10
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08004464 	.word	0x08004464

08002a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a0c:	f7ff ffdc 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0b5b      	lsrs	r3, r3, #13
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	@ (8002a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08004464 	.word	0x08004464

08002a30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e042      	b.n	8002ac8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f842 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	@ 0x24
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f82b 	bl	8002ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad4:	b0c0      	sub	sp, #256	@ 0x100
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	68d9      	ldr	r1, [r3, #12]
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	ea40 0301 	orr.w	r3, r0, r1
 8002af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b28:	f021 010c 	bic.w	r1, r1, #12
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b36:	430b      	orrs	r3, r1
 8002b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4a:	6999      	ldr	r1, [r3, #24]
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	ea40 0301 	orr.w	r3, r0, r1
 8002b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b8f      	ldr	r3, [pc, #572]	@ (8002d9c <UART_SetConfig+0x2cc>)
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d005      	beq.n	8002b70 <UART_SetConfig+0xa0>
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8002da0 <UART_SetConfig+0x2d0>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d104      	bne.n	8002b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7ff ff4a 	bl	8002a08 <HAL_RCC_GetPCLK2Freq>
 8002b74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b78:	e003      	b.n	8002b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7ff ff31 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b8c:	f040 810c 	bne.w	8002da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	1891      	adds	r1, r2, r2
 8002ba8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002baa:	415b      	adcs	r3, r3
 8002bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	eb12 0801 	adds.w	r8, r2, r1
 8002bb8:	4629      	mov	r1, r5
 8002bba:	eb43 0901 	adc.w	r9, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb18 0303 	adds.w	r3, r8, r3
 8002bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002be0:	462b      	mov	r3, r5
 8002be2:	eb49 0303 	adc.w	r3, r9, r3
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bfe:	460b      	mov	r3, r1
 8002c00:	18db      	adds	r3, r3, r3
 8002c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c04:	4613      	mov	r3, r2
 8002c06:	eb42 0303 	adc.w	r3, r2, r3
 8002c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c14:	f7fd fb3c 	bl	8000290 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	011c      	lsls	r4, r3, #4
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c40:	415b      	adcs	r3, r3
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c48:	4641      	mov	r1, r8
 8002c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb43 0b01 	adc.w	fp, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c68:	4692      	mov	sl, r2
 8002c6a:	469b      	mov	fp, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c76:	464b      	mov	r3, r9
 8002c78:	eb4b 0303 	adc.w	r3, fp, r3
 8002c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c94:	460b      	mov	r3, r1
 8002c96:	18db      	adds	r3, r3, r3
 8002c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002caa:	f7fd faf1 	bl	8000290 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2264      	movs	r2, #100	@ 0x64
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	1acb      	subs	r3, r1, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cca:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cd8:	441c      	add	r4, r3
 8002cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	1851      	adds	r1, r2, r1
 8002d00:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d02:	4649      	mov	r1, r9
 8002d04:	414b      	adcs	r3, r1
 8002d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d14:	4659      	mov	r1, fp
 8002d16:	00cb      	lsls	r3, r1, #3
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1e:	4651      	mov	r1, sl
 8002d20:	00ca      	lsls	r2, r1, #3
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	4642      	mov	r2, r8
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d30:	464b      	mov	r3, r9
 8002d32:	460a      	mov	r2, r1
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d50:	460b      	mov	r3, r1
 8002d52:	18db      	adds	r3, r3, r3
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d56:	4613      	mov	r3, r2
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d66:	f7fd fa93 	bl	8000290 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	@ 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	@ 0x32
 8002d82:	4a08      	ldr	r2, [pc, #32]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 0207 	and.w	r2, r3, #7
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4422      	add	r2, r4
 8002d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d98:	e106      	b.n	8002fa8 <UART_SetConfig+0x4d8>
 8002d9a:	bf00      	nop
 8002d9c:	40011000 	.word	0x40011000
 8002da0:	40011400 	.word	0x40011400
 8002da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002db2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dba:	4642      	mov	r2, r8
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	1891      	adds	r1, r2, r2
 8002dc0:	6239      	str	r1, [r7, #32]
 8002dc2:	415b      	adcs	r3, r3
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dca:	4641      	mov	r1, r8
 8002dcc:	1854      	adds	r4, r2, r1
 8002dce:	4649      	mov	r1, r9
 8002dd0:	eb43 0501 	adc.w	r5, r3, r1
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	00eb      	lsls	r3, r5, #3
 8002dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de2:	00e2      	lsls	r2, r4, #3
 8002de4:	4614      	mov	r4, r2
 8002de6:	461d      	mov	r5, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	18e3      	adds	r3, r4, r3
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002df0:	464b      	mov	r3, r9
 8002df2:	eb45 0303 	adc.w	r3, r5, r3
 8002df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e16:	4629      	mov	r1, r5
 8002e18:	008b      	lsls	r3, r1, #2
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e20:	4621      	mov	r1, r4
 8002e22:	008a      	lsls	r2, r1, #2
 8002e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e28:	f7fd fa32 	bl	8000290 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b60      	ldr	r3, [pc, #384]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011c      	lsls	r4, r3, #4
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	61b9      	str	r1, [r7, #24]
 8002e54:	415b      	adcs	r3, r3
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6139      	str	r1, [r7, #16]
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e90:	464b      	mov	r3, r9
 8002e92:	460a      	mov	r2, r1
 8002e94:	eb42 0303 	adc.w	r3, r2, r3
 8002e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ea6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	008a      	lsls	r2, r1, #2
 8002ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ec6:	f7fd f9e3 	bl	8000290 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4b38      	ldr	r3, [pc, #224]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2264      	movs	r2, #100	@ 0x64
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	1acb      	subs	r3, r1, r3
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	3332      	adds	r3, #50	@ 0x32
 8002ee4:	4a33      	ldr	r2, [pc, #204]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef0:	441c      	add	r4, r3
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002efa:	677a      	str	r2, [r7, #116]	@ 0x74
 8002efc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f10:	4641      	mov	r1, r8
 8002f12:	1851      	adds	r1, r2, r1
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	4649      	mov	r1, r9
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f28:	4659      	mov	r1, fp
 8002f2a:	00cb      	lsls	r3, r1, #3
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f32:	4651      	mov	r1, sl
 8002f34:	00ca      	lsls	r2, r1, #3
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f42:	464b      	mov	r3, r9
 8002f44:	460a      	mov	r2, r1
 8002f46:	eb42 0303 	adc.w	r3, r2, r3
 8002f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f56:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f64:	4649      	mov	r1, r9
 8002f66:	008b      	lsls	r3, r1, #2
 8002f68:	4641      	mov	r1, r8
 8002f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6e:	4641      	mov	r1, r8
 8002f70:	008a      	lsls	r2, r1, #2
 8002f72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f76:	f7fd f98b 	bl	8000290 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	2164      	movs	r1, #100	@ 0x64
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	3332      	adds	r3, #50	@ 0x32
 8002f92:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	f003 020f 	and.w	r2, r3, #15
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4422      	add	r2, r4
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb4:	51eb851f 	.word	0x51eb851f

08002fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fb8:	b084      	sub	sp, #16
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	f107 001c 	add.w	r0, r7, #28
 8002fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d123      	bne.n	800301a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 faa0 	bl	8003554 <USB_CoreReset>
 8003014:	4603      	mov	r3, r0
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	e01b      	b.n	8003052 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa94 	bl	8003554 <USB_CoreReset>
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003030:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	@ 0x38
 8003044:	e005      	b.n	8003052 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003052:	7fbb      	ldrb	r3, [r7, #30]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d10b      	bne.n	8003070 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f043 0206 	orr.w	r2, r3, #6
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800307c:	b004      	add	sp, #16
 800307e:	4770      	bx	lr

08003080 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 0201 	bic.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d115      	bne.n	80030f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80030d0:	200a      	movs	r0, #10
 80030d2:	f7fe f8cf 	bl	8001274 <HAL_Delay>
      ms += 10U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	330a      	adds	r3, #10
 80030da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fa2b 	bl	8003538 <USB_GetMode>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d01e      	beq.n	8003126 <USB_SetCurrentMode+0x84>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80030ec:	d9f0      	bls.n	80030d0 <USB_SetCurrentMode+0x2e>
 80030ee:	e01a      	b.n	8003126 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003102:	200a      	movs	r0, #10
 8003104:	f7fe f8b6 	bl	8001274 <HAL_Delay>
      ms += 10U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	330a      	adds	r3, #10
 800310c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa12 	bl	8003538 <USB_GetMode>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <USB_SetCurrentMode+0x84>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2bc7      	cmp	r3, #199	@ 0xc7
 800311e:	d9f0      	bls.n	8003102 <USB_SetCurrentMode+0x60>
 8003120:	e001      	b.n	8003126 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e005      	b.n	8003132 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2bc8      	cmp	r3, #200	@ 0xc8
 800312a:	d101      	bne.n	8003130 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800313c:	b084      	sub	sp, #16
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800314a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	e009      	b.n	8003170 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	3340      	adds	r3, #64	@ 0x40
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3301      	adds	r3, #1
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b0e      	cmp	r3, #14
 8003174:	d9f2      	bls.n	800315c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003176:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11c      	bne.n	80031b8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80031b6:	e00b      	b.n	80031d0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80031d6:	461a      	mov	r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10d      	bne.n	8003200 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031ec:	2100      	movs	r1, #0
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f968 	bl	80034c4 <USB_SetDevSpeed>
 80031f4:	e008      	b.n	8003208 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031f6:	2101      	movs	r1, #1
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f963 	bl	80034c4 <USB_SetDevSpeed>
 80031fe:	e003      	b.n	8003208 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003200:	2103      	movs	r1, #3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f95e 	bl	80034c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003208:	2110      	movs	r1, #16
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f8fa 	bl	8003404 <USB_FlushTxFifo>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f924 	bl	8003468 <USB_FlushRxFifo>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003230:	461a      	mov	r2, r3
 8003232:	2300      	movs	r3, #0
 8003234:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323c:	461a      	mov	r2, r3
 800323e:	2300      	movs	r3, #0
 8003240:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003248:	461a      	mov	r2, r3
 800324a:	2300      	movs	r3, #0
 800324c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e043      	b.n	80032dc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003266:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800326a:	d118      	bne.n	800329e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800327e:	461a      	mov	r2, r3
 8003280:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e013      	b.n	80032b0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003294:	461a      	mov	r2, r3
 8003296:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e008      	b.n	80032b0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032aa:	461a      	mov	r2, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032bc:	461a      	mov	r2, r3
 80032be:	2300      	movs	r3, #0
 80032c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ce:	461a      	mov	r2, r3
 80032d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3301      	adds	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032e0:	461a      	mov	r2, r3
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d3b5      	bcc.n	8003254 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e043      	b.n	8003376 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003304:	d118      	bne.n	8003338 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	e013      	b.n	800334a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e008      	b.n	800334a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003344:	461a      	mov	r2, r3
 8003346:	2300      	movs	r3, #0
 8003348:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003356:	461a      	mov	r2, r3
 8003358:	2300      	movs	r3, #0
 800335a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800336e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3301      	adds	r3, #1
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800337a:	461a      	mov	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4293      	cmp	r3, r2
 8003380:	d3b5      	bcc.n	80032ee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003394:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80033a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <USB_DevInit+0x2c4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f043 0208 	orr.w	r2, r3, #8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033fc:	b004      	add	sp, #16
 80033fe:	4770      	bx	lr
 8003400:	803c3800 	.word	0x803c3800

08003404 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800341e:	d901      	bls.n	8003424 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e01b      	b.n	800345c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	daf2      	bge.n	8003412 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	019b      	lsls	r3, r3, #6
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003448:	d901      	bls.n	800344e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e006      	b.n	800345c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b20      	cmp	r3, #32
 8003458:	d0f0      	beq.n	800343c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3301      	adds	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003480:	d901      	bls.n	8003486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e018      	b.n	80034b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	daf2      	bge.n	8003474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2210      	movs	r2, #16
 8003496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034a4:	d901      	bls.n	80034aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e006      	b.n	80034b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d0f0      	beq.n	8003498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	68f9      	ldr	r1, [r7, #12]
 80034e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003510:	f023 0303 	bic.w	r3, r3, #3
 8003514:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0301 	and.w	r3, r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800356c:	d901      	bls.n	8003572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e01b      	b.n	80035aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	daf2      	bge.n	8003560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3301      	adds	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003596:	d901      	bls.n	800359c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e006      	b.n	80035aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d0f0      	beq.n	800358a <USB_CoreReset+0x36>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <std>:
 80035b8:	2300      	movs	r3, #0
 80035ba:	b510      	push	{r4, lr}
 80035bc:	4604      	mov	r4, r0
 80035be:	e9c0 3300 	strd	r3, r3, [r0]
 80035c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035c6:	6083      	str	r3, [r0, #8]
 80035c8:	8181      	strh	r1, [r0, #12]
 80035ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80035cc:	81c2      	strh	r2, [r0, #14]
 80035ce:	6183      	str	r3, [r0, #24]
 80035d0:	4619      	mov	r1, r3
 80035d2:	2208      	movs	r2, #8
 80035d4:	305c      	adds	r0, #92	@ 0x5c
 80035d6:	f000 f906 	bl	80037e6 <memset>
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <std+0x58>)
 80035dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <std+0x5c>)
 80035e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <std+0x60>)
 80035e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <std+0x64>)
 80035e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80035ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <std+0x68>)
 80035ec:	6224      	str	r4, [r4, #32]
 80035ee:	429c      	cmp	r4, r3
 80035f0:	d006      	beq.n	8003600 <std+0x48>
 80035f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035f6:	4294      	cmp	r4, r2
 80035f8:	d002      	beq.n	8003600 <std+0x48>
 80035fa:	33d0      	adds	r3, #208	@ 0xd0
 80035fc:	429c      	cmp	r4, r3
 80035fe:	d105      	bne.n	800360c <std+0x54>
 8003600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003608:	f000 b966 	b.w	80038d8 <__retarget_lock_init_recursive>
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	08003761 	.word	0x08003761
 8003614:	08003783 	.word	0x08003783
 8003618:	080037bb 	.word	0x080037bb
 800361c:	080037df 	.word	0x080037df
 8003620:	2000081c 	.word	0x2000081c

08003624 <stdio_exit_handler>:
 8003624:	4a02      	ldr	r2, [pc, #8]	@ (8003630 <stdio_exit_handler+0xc>)
 8003626:	4903      	ldr	r1, [pc, #12]	@ (8003634 <stdio_exit_handler+0x10>)
 8003628:	4803      	ldr	r0, [pc, #12]	@ (8003638 <stdio_exit_handler+0x14>)
 800362a:	f000 b869 	b.w	8003700 <_fwalk_sglue>
 800362e:	bf00      	nop
 8003630:	20000028 	.word	0x20000028
 8003634:	08004179 	.word	0x08004179
 8003638:	20000038 	.word	0x20000038

0800363c <cleanup_stdio>:
 800363c:	6841      	ldr	r1, [r0, #4]
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <cleanup_stdio+0x34>)
 8003640:	4299      	cmp	r1, r3
 8003642:	b510      	push	{r4, lr}
 8003644:	4604      	mov	r4, r0
 8003646:	d001      	beq.n	800364c <cleanup_stdio+0x10>
 8003648:	f000 fd96 	bl	8004178 <_fflush_r>
 800364c:	68a1      	ldr	r1, [r4, #8]
 800364e:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <cleanup_stdio+0x38>)
 8003650:	4299      	cmp	r1, r3
 8003652:	d002      	beq.n	800365a <cleanup_stdio+0x1e>
 8003654:	4620      	mov	r0, r4
 8003656:	f000 fd8f 	bl	8004178 <_fflush_r>
 800365a:	68e1      	ldr	r1, [r4, #12]
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <cleanup_stdio+0x3c>)
 800365e:	4299      	cmp	r1, r3
 8003660:	d004      	beq.n	800366c <cleanup_stdio+0x30>
 8003662:	4620      	mov	r0, r4
 8003664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003668:	f000 bd86 	b.w	8004178 <_fflush_r>
 800366c:	bd10      	pop	{r4, pc}
 800366e:	bf00      	nop
 8003670:	2000081c 	.word	0x2000081c
 8003674:	20000884 	.word	0x20000884
 8003678:	200008ec 	.word	0x200008ec

0800367c <global_stdio_init.part.0>:
 800367c:	b510      	push	{r4, lr}
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <global_stdio_init.part.0+0x30>)
 8003680:	4c0b      	ldr	r4, [pc, #44]	@ (80036b0 <global_stdio_init.part.0+0x34>)
 8003682:	4a0c      	ldr	r2, [pc, #48]	@ (80036b4 <global_stdio_init.part.0+0x38>)
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	4620      	mov	r0, r4
 8003688:	2200      	movs	r2, #0
 800368a:	2104      	movs	r1, #4
 800368c:	f7ff ff94 	bl	80035b8 <std>
 8003690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003694:	2201      	movs	r2, #1
 8003696:	2109      	movs	r1, #9
 8003698:	f7ff ff8e 	bl	80035b8 <std>
 800369c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036a0:	2202      	movs	r2, #2
 80036a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a6:	2112      	movs	r1, #18
 80036a8:	f7ff bf86 	b.w	80035b8 <std>
 80036ac:	20000954 	.word	0x20000954
 80036b0:	2000081c 	.word	0x2000081c
 80036b4:	08003625 	.word	0x08003625

080036b8 <__sfp_lock_acquire>:
 80036b8:	4801      	ldr	r0, [pc, #4]	@ (80036c0 <__sfp_lock_acquire+0x8>)
 80036ba:	f000 b90e 	b.w	80038da <__retarget_lock_acquire_recursive>
 80036be:	bf00      	nop
 80036c0:	2000095d 	.word	0x2000095d

080036c4 <__sfp_lock_release>:
 80036c4:	4801      	ldr	r0, [pc, #4]	@ (80036cc <__sfp_lock_release+0x8>)
 80036c6:	f000 b909 	b.w	80038dc <__retarget_lock_release_recursive>
 80036ca:	bf00      	nop
 80036cc:	2000095d 	.word	0x2000095d

080036d0 <__sinit>:
 80036d0:	b510      	push	{r4, lr}
 80036d2:	4604      	mov	r4, r0
 80036d4:	f7ff fff0 	bl	80036b8 <__sfp_lock_acquire>
 80036d8:	6a23      	ldr	r3, [r4, #32]
 80036da:	b11b      	cbz	r3, 80036e4 <__sinit+0x14>
 80036dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e0:	f7ff bff0 	b.w	80036c4 <__sfp_lock_release>
 80036e4:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <__sinit+0x28>)
 80036e6:	6223      	str	r3, [r4, #32]
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <__sinit+0x2c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f5      	bne.n	80036dc <__sinit+0xc>
 80036f0:	f7ff ffc4 	bl	800367c <global_stdio_init.part.0>
 80036f4:	e7f2      	b.n	80036dc <__sinit+0xc>
 80036f6:	bf00      	nop
 80036f8:	0800363d 	.word	0x0800363d
 80036fc:	20000954 	.word	0x20000954

08003700 <_fwalk_sglue>:
 8003700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003704:	4607      	mov	r7, r0
 8003706:	4688      	mov	r8, r1
 8003708:	4614      	mov	r4, r2
 800370a:	2600      	movs	r6, #0
 800370c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003710:	f1b9 0901 	subs.w	r9, r9, #1
 8003714:	d505      	bpl.n	8003722 <_fwalk_sglue+0x22>
 8003716:	6824      	ldr	r4, [r4, #0]
 8003718:	2c00      	cmp	r4, #0
 800371a:	d1f7      	bne.n	800370c <_fwalk_sglue+0xc>
 800371c:	4630      	mov	r0, r6
 800371e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003722:	89ab      	ldrh	r3, [r5, #12]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d907      	bls.n	8003738 <_fwalk_sglue+0x38>
 8003728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800372c:	3301      	adds	r3, #1
 800372e:	d003      	beq.n	8003738 <_fwalk_sglue+0x38>
 8003730:	4629      	mov	r1, r5
 8003732:	4638      	mov	r0, r7
 8003734:	47c0      	blx	r8
 8003736:	4306      	orrs	r6, r0
 8003738:	3568      	adds	r5, #104	@ 0x68
 800373a:	e7e9      	b.n	8003710 <_fwalk_sglue+0x10>

0800373c <iprintf>:
 800373c:	b40f      	push	{r0, r1, r2, r3}
 800373e:	b507      	push	{r0, r1, r2, lr}
 8003740:	4906      	ldr	r1, [pc, #24]	@ (800375c <iprintf+0x20>)
 8003742:	ab04      	add	r3, sp, #16
 8003744:	6808      	ldr	r0, [r1, #0]
 8003746:	f853 2b04 	ldr.w	r2, [r3], #4
 800374a:	6881      	ldr	r1, [r0, #8]
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	f000 f9e9 	bl	8003b24 <_vfiprintf_r>
 8003752:	b003      	add	sp, #12
 8003754:	f85d eb04 	ldr.w	lr, [sp], #4
 8003758:	b004      	add	sp, #16
 800375a:	4770      	bx	lr
 800375c:	20000034 	.word	0x20000034

08003760 <__sread>:
 8003760:	b510      	push	{r4, lr}
 8003762:	460c      	mov	r4, r1
 8003764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003768:	f000 f868 	bl	800383c <_read_r>
 800376c:	2800      	cmp	r0, #0
 800376e:	bfab      	itete	ge
 8003770:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003772:	89a3      	ldrhlt	r3, [r4, #12]
 8003774:	181b      	addge	r3, r3, r0
 8003776:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800377a:	bfac      	ite	ge
 800377c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800377e:	81a3      	strhlt	r3, [r4, #12]
 8003780:	bd10      	pop	{r4, pc}

08003782 <__swrite>:
 8003782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003786:	461f      	mov	r7, r3
 8003788:	898b      	ldrh	r3, [r1, #12]
 800378a:	05db      	lsls	r3, r3, #23
 800378c:	4605      	mov	r5, r0
 800378e:	460c      	mov	r4, r1
 8003790:	4616      	mov	r6, r2
 8003792:	d505      	bpl.n	80037a0 <__swrite+0x1e>
 8003794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003798:	2302      	movs	r3, #2
 800379a:	2200      	movs	r2, #0
 800379c:	f000 f83c 	bl	8003818 <_lseek_r>
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037aa:	81a3      	strh	r3, [r4, #12]
 80037ac:	4632      	mov	r2, r6
 80037ae:	463b      	mov	r3, r7
 80037b0:	4628      	mov	r0, r5
 80037b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037b6:	f000 b853 	b.w	8003860 <_write_r>

080037ba <__sseek>:
 80037ba:	b510      	push	{r4, lr}
 80037bc:	460c      	mov	r4, r1
 80037be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c2:	f000 f829 	bl	8003818 <_lseek_r>
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	bf15      	itete	ne
 80037cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037d6:	81a3      	strheq	r3, [r4, #12]
 80037d8:	bf18      	it	ne
 80037da:	81a3      	strhne	r3, [r4, #12]
 80037dc:	bd10      	pop	{r4, pc}

080037de <__sclose>:
 80037de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e2:	f000 b809 	b.w	80037f8 <_close_r>

080037e6 <memset>:
 80037e6:	4402      	add	r2, r0
 80037e8:	4603      	mov	r3, r0
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d100      	bne.n	80037f0 <memset+0xa>
 80037ee:	4770      	bx	lr
 80037f0:	f803 1b01 	strb.w	r1, [r3], #1
 80037f4:	e7f9      	b.n	80037ea <memset+0x4>
	...

080037f8 <_close_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4d06      	ldr	r5, [pc, #24]	@ (8003814 <_close_r+0x1c>)
 80037fc:	2300      	movs	r3, #0
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fd fa76 	bl	8000cf4 <_close>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d102      	bne.n	8003812 <_close_r+0x1a>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	b103      	cbz	r3, 8003812 <_close_r+0x1a>
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	bd38      	pop	{r3, r4, r5, pc}
 8003814:	20000958 	.word	0x20000958

08003818 <_lseek_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4d07      	ldr	r5, [pc, #28]	@ (8003838 <_lseek_r+0x20>)
 800381c:	4604      	mov	r4, r0
 800381e:	4608      	mov	r0, r1
 8003820:	4611      	mov	r1, r2
 8003822:	2200      	movs	r2, #0
 8003824:	602a      	str	r2, [r5, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	f7fd fa8b 	bl	8000d42 <_lseek>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d102      	bne.n	8003836 <_lseek_r+0x1e>
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	b103      	cbz	r3, 8003836 <_lseek_r+0x1e>
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	20000958 	.word	0x20000958

0800383c <_read_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4d07      	ldr	r5, [pc, #28]	@ (800385c <_read_r+0x20>)
 8003840:	4604      	mov	r4, r0
 8003842:	4608      	mov	r0, r1
 8003844:	4611      	mov	r1, r2
 8003846:	2200      	movs	r2, #0
 8003848:	602a      	str	r2, [r5, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	f7fd fa19 	bl	8000c82 <_read>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d102      	bne.n	800385a <_read_r+0x1e>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	b103      	cbz	r3, 800385a <_read_r+0x1e>
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	20000958 	.word	0x20000958

08003860 <_write_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4d07      	ldr	r5, [pc, #28]	@ (8003880 <_write_r+0x20>)
 8003864:	4604      	mov	r4, r0
 8003866:	4608      	mov	r0, r1
 8003868:	4611      	mov	r1, r2
 800386a:	2200      	movs	r2, #0
 800386c:	602a      	str	r2, [r5, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	f7fd fa24 	bl	8000cbc <_write>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d102      	bne.n	800387e <_write_r+0x1e>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	b103      	cbz	r3, 800387e <_write_r+0x1e>
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	20000958 	.word	0x20000958

08003884 <__errno>:
 8003884:	4b01      	ldr	r3, [pc, #4]	@ (800388c <__errno+0x8>)
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000034 	.word	0x20000034

08003890 <__libc_init_array>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4d0d      	ldr	r5, [pc, #52]	@ (80038c8 <__libc_init_array+0x38>)
 8003894:	4c0d      	ldr	r4, [pc, #52]	@ (80038cc <__libc_init_array+0x3c>)
 8003896:	1b64      	subs	r4, r4, r5
 8003898:	10a4      	asrs	r4, r4, #2
 800389a:	2600      	movs	r6, #0
 800389c:	42a6      	cmp	r6, r4
 800389e:	d109      	bne.n	80038b4 <__libc_init_array+0x24>
 80038a0:	4d0b      	ldr	r5, [pc, #44]	@ (80038d0 <__libc_init_array+0x40>)
 80038a2:	4c0c      	ldr	r4, [pc, #48]	@ (80038d4 <__libc_init_array+0x44>)
 80038a4:	f000 fdb8 	bl	8004418 <_init>
 80038a8:	1b64      	subs	r4, r4, r5
 80038aa:	10a4      	asrs	r4, r4, #2
 80038ac:	2600      	movs	r6, #0
 80038ae:	42a6      	cmp	r6, r4
 80038b0:	d105      	bne.n	80038be <__libc_init_array+0x2e>
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b8:	4798      	blx	r3
 80038ba:	3601      	adds	r6, #1
 80038bc:	e7ee      	b.n	800389c <__libc_init_array+0xc>
 80038be:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c2:	4798      	blx	r3
 80038c4:	3601      	adds	r6, #1
 80038c6:	e7f2      	b.n	80038ae <__libc_init_array+0x1e>
 80038c8:	080044a8 	.word	0x080044a8
 80038cc:	080044a8 	.word	0x080044a8
 80038d0:	080044a8 	.word	0x080044a8
 80038d4:	080044ac 	.word	0x080044ac

080038d8 <__retarget_lock_init_recursive>:
 80038d8:	4770      	bx	lr

080038da <__retarget_lock_acquire_recursive>:
 80038da:	4770      	bx	lr

080038dc <__retarget_lock_release_recursive>:
 80038dc:	4770      	bx	lr
	...

080038e0 <_free_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4605      	mov	r5, r0
 80038e4:	2900      	cmp	r1, #0
 80038e6:	d041      	beq.n	800396c <_free_r+0x8c>
 80038e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ec:	1f0c      	subs	r4, r1, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfb8      	it	lt
 80038f2:	18e4      	addlt	r4, r4, r3
 80038f4:	f000 f8e0 	bl	8003ab8 <__malloc_lock>
 80038f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003970 <_free_r+0x90>)
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	b933      	cbnz	r3, 800390c <_free_r+0x2c>
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	6014      	str	r4, [r2, #0]
 8003902:	4628      	mov	r0, r5
 8003904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003908:	f000 b8dc 	b.w	8003ac4 <__malloc_unlock>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d908      	bls.n	8003922 <_free_r+0x42>
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	1821      	adds	r1, r4, r0
 8003914:	428b      	cmp	r3, r1
 8003916:	bf01      	itttt	eq
 8003918:	6819      	ldreq	r1, [r3, #0]
 800391a:	685b      	ldreq	r3, [r3, #4]
 800391c:	1809      	addeq	r1, r1, r0
 800391e:	6021      	streq	r1, [r4, #0]
 8003920:	e7ed      	b.n	80038fe <_free_r+0x1e>
 8003922:	461a      	mov	r2, r3
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	b10b      	cbz	r3, 800392c <_free_r+0x4c>
 8003928:	42a3      	cmp	r3, r4
 800392a:	d9fa      	bls.n	8003922 <_free_r+0x42>
 800392c:	6811      	ldr	r1, [r2, #0]
 800392e:	1850      	adds	r0, r2, r1
 8003930:	42a0      	cmp	r0, r4
 8003932:	d10b      	bne.n	800394c <_free_r+0x6c>
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	4401      	add	r1, r0
 8003938:	1850      	adds	r0, r2, r1
 800393a:	4283      	cmp	r3, r0
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	d1e0      	bne.n	8003902 <_free_r+0x22>
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	6053      	str	r3, [r2, #4]
 8003946:	4408      	add	r0, r1
 8003948:	6010      	str	r0, [r2, #0]
 800394a:	e7da      	b.n	8003902 <_free_r+0x22>
 800394c:	d902      	bls.n	8003954 <_free_r+0x74>
 800394e:	230c      	movs	r3, #12
 8003950:	602b      	str	r3, [r5, #0]
 8003952:	e7d6      	b.n	8003902 <_free_r+0x22>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	1821      	adds	r1, r4, r0
 8003958:	428b      	cmp	r3, r1
 800395a:	bf04      	itt	eq
 800395c:	6819      	ldreq	r1, [r3, #0]
 800395e:	685b      	ldreq	r3, [r3, #4]
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	bf04      	itt	eq
 8003964:	1809      	addeq	r1, r1, r0
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	6054      	str	r4, [r2, #4]
 800396a:	e7ca      	b.n	8003902 <_free_r+0x22>
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	20000964 	.word	0x20000964

08003974 <sbrk_aligned>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4e0f      	ldr	r6, [pc, #60]	@ (80039b4 <sbrk_aligned+0x40>)
 8003978:	460c      	mov	r4, r1
 800397a:	6831      	ldr	r1, [r6, #0]
 800397c:	4605      	mov	r5, r0
 800397e:	b911      	cbnz	r1, 8003986 <sbrk_aligned+0x12>
 8003980:	f000 fcb6 	bl	80042f0 <_sbrk_r>
 8003984:	6030      	str	r0, [r6, #0]
 8003986:	4621      	mov	r1, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f000 fcb1 	bl	80042f0 <_sbrk_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d103      	bne.n	800399a <sbrk_aligned+0x26>
 8003992:	f04f 34ff 	mov.w	r4, #4294967295
 8003996:	4620      	mov	r0, r4
 8003998:	bd70      	pop	{r4, r5, r6, pc}
 800399a:	1cc4      	adds	r4, r0, #3
 800399c:	f024 0403 	bic.w	r4, r4, #3
 80039a0:	42a0      	cmp	r0, r4
 80039a2:	d0f8      	beq.n	8003996 <sbrk_aligned+0x22>
 80039a4:	1a21      	subs	r1, r4, r0
 80039a6:	4628      	mov	r0, r5
 80039a8:	f000 fca2 	bl	80042f0 <_sbrk_r>
 80039ac:	3001      	adds	r0, #1
 80039ae:	d1f2      	bne.n	8003996 <sbrk_aligned+0x22>
 80039b0:	e7ef      	b.n	8003992 <sbrk_aligned+0x1e>
 80039b2:	bf00      	nop
 80039b4:	20000960 	.word	0x20000960

080039b8 <_malloc_r>:
 80039b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039bc:	1ccd      	adds	r5, r1, #3
 80039be:	f025 0503 	bic.w	r5, r5, #3
 80039c2:	3508      	adds	r5, #8
 80039c4:	2d0c      	cmp	r5, #12
 80039c6:	bf38      	it	cc
 80039c8:	250c      	movcc	r5, #12
 80039ca:	2d00      	cmp	r5, #0
 80039cc:	4606      	mov	r6, r0
 80039ce:	db01      	blt.n	80039d4 <_malloc_r+0x1c>
 80039d0:	42a9      	cmp	r1, r5
 80039d2:	d904      	bls.n	80039de <_malloc_r+0x26>
 80039d4:	230c      	movs	r3, #12
 80039d6:	6033      	str	r3, [r6, #0]
 80039d8:	2000      	movs	r0, #0
 80039da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ab4 <_malloc_r+0xfc>
 80039e2:	f000 f869 	bl	8003ab8 <__malloc_lock>
 80039e6:	f8d8 3000 	ldr.w	r3, [r8]
 80039ea:	461c      	mov	r4, r3
 80039ec:	bb44      	cbnz	r4, 8003a40 <_malloc_r+0x88>
 80039ee:	4629      	mov	r1, r5
 80039f0:	4630      	mov	r0, r6
 80039f2:	f7ff ffbf 	bl	8003974 <sbrk_aligned>
 80039f6:	1c43      	adds	r3, r0, #1
 80039f8:	4604      	mov	r4, r0
 80039fa:	d158      	bne.n	8003aae <_malloc_r+0xf6>
 80039fc:	f8d8 4000 	ldr.w	r4, [r8]
 8003a00:	4627      	mov	r7, r4
 8003a02:	2f00      	cmp	r7, #0
 8003a04:	d143      	bne.n	8003a8e <_malloc_r+0xd6>
 8003a06:	2c00      	cmp	r4, #0
 8003a08:	d04b      	beq.n	8003aa2 <_malloc_r+0xea>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	4639      	mov	r1, r7
 8003a0e:	4630      	mov	r0, r6
 8003a10:	eb04 0903 	add.w	r9, r4, r3
 8003a14:	f000 fc6c 	bl	80042f0 <_sbrk_r>
 8003a18:	4581      	cmp	r9, r0
 8003a1a:	d142      	bne.n	8003aa2 <_malloc_r+0xea>
 8003a1c:	6821      	ldr	r1, [r4, #0]
 8003a1e:	1a6d      	subs	r5, r5, r1
 8003a20:	4629      	mov	r1, r5
 8003a22:	4630      	mov	r0, r6
 8003a24:	f7ff ffa6 	bl	8003974 <sbrk_aligned>
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d03a      	beq.n	8003aa2 <_malloc_r+0xea>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	442b      	add	r3, r5
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	f8d8 3000 	ldr.w	r3, [r8]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	bb62      	cbnz	r2, 8003a94 <_malloc_r+0xdc>
 8003a3a:	f8c8 7000 	str.w	r7, [r8]
 8003a3e:	e00f      	b.n	8003a60 <_malloc_r+0xa8>
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	1b52      	subs	r2, r2, r5
 8003a44:	d420      	bmi.n	8003a88 <_malloc_r+0xd0>
 8003a46:	2a0b      	cmp	r2, #11
 8003a48:	d917      	bls.n	8003a7a <_malloc_r+0xc2>
 8003a4a:	1961      	adds	r1, r4, r5
 8003a4c:	42a3      	cmp	r3, r4
 8003a4e:	6025      	str	r5, [r4, #0]
 8003a50:	bf18      	it	ne
 8003a52:	6059      	strne	r1, [r3, #4]
 8003a54:	6863      	ldr	r3, [r4, #4]
 8003a56:	bf08      	it	eq
 8003a58:	f8c8 1000 	streq.w	r1, [r8]
 8003a5c:	5162      	str	r2, [r4, r5]
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	4630      	mov	r0, r6
 8003a62:	f000 f82f 	bl	8003ac4 <__malloc_unlock>
 8003a66:	f104 000b 	add.w	r0, r4, #11
 8003a6a:	1d23      	adds	r3, r4, #4
 8003a6c:	f020 0007 	bic.w	r0, r0, #7
 8003a70:	1ac2      	subs	r2, r0, r3
 8003a72:	bf1c      	itt	ne
 8003a74:	1a1b      	subne	r3, r3, r0
 8003a76:	50a3      	strne	r3, [r4, r2]
 8003a78:	e7af      	b.n	80039da <_malloc_r+0x22>
 8003a7a:	6862      	ldr	r2, [r4, #4]
 8003a7c:	42a3      	cmp	r3, r4
 8003a7e:	bf0c      	ite	eq
 8003a80:	f8c8 2000 	streq.w	r2, [r8]
 8003a84:	605a      	strne	r2, [r3, #4]
 8003a86:	e7eb      	b.n	8003a60 <_malloc_r+0xa8>
 8003a88:	4623      	mov	r3, r4
 8003a8a:	6864      	ldr	r4, [r4, #4]
 8003a8c:	e7ae      	b.n	80039ec <_malloc_r+0x34>
 8003a8e:	463c      	mov	r4, r7
 8003a90:	687f      	ldr	r7, [r7, #4]
 8003a92:	e7b6      	b.n	8003a02 <_malloc_r+0x4a>
 8003a94:	461a      	mov	r2, r3
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	42a3      	cmp	r3, r4
 8003a9a:	d1fb      	bne.n	8003a94 <_malloc_r+0xdc>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6053      	str	r3, [r2, #4]
 8003aa0:	e7de      	b.n	8003a60 <_malloc_r+0xa8>
 8003aa2:	230c      	movs	r3, #12
 8003aa4:	6033      	str	r3, [r6, #0]
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f000 f80c 	bl	8003ac4 <__malloc_unlock>
 8003aac:	e794      	b.n	80039d8 <_malloc_r+0x20>
 8003aae:	6005      	str	r5, [r0, #0]
 8003ab0:	e7d6      	b.n	8003a60 <_malloc_r+0xa8>
 8003ab2:	bf00      	nop
 8003ab4:	20000964 	.word	0x20000964

08003ab8 <__malloc_lock>:
 8003ab8:	4801      	ldr	r0, [pc, #4]	@ (8003ac0 <__malloc_lock+0x8>)
 8003aba:	f7ff bf0e 	b.w	80038da <__retarget_lock_acquire_recursive>
 8003abe:	bf00      	nop
 8003ac0:	2000095c 	.word	0x2000095c

08003ac4 <__malloc_unlock>:
 8003ac4:	4801      	ldr	r0, [pc, #4]	@ (8003acc <__malloc_unlock+0x8>)
 8003ac6:	f7ff bf09 	b.w	80038dc <__retarget_lock_release_recursive>
 8003aca:	bf00      	nop
 8003acc:	2000095c 	.word	0x2000095c

08003ad0 <__sfputc_r>:
 8003ad0:	6893      	ldr	r3, [r2, #8]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	b410      	push	{r4}
 8003ad8:	6093      	str	r3, [r2, #8]
 8003ada:	da08      	bge.n	8003aee <__sfputc_r+0x1e>
 8003adc:	6994      	ldr	r4, [r2, #24]
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	db01      	blt.n	8003ae6 <__sfputc_r+0x16>
 8003ae2:	290a      	cmp	r1, #10
 8003ae4:	d103      	bne.n	8003aee <__sfputc_r+0x1e>
 8003ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aea:	f000 bb6d 	b.w	80041c8 <__swbuf_r>
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	1c58      	adds	r0, r3, #1
 8003af2:	6010      	str	r0, [r2, #0]
 8003af4:	7019      	strb	r1, [r3, #0]
 8003af6:	4608      	mov	r0, r1
 8003af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <__sfputs_r>:
 8003afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b00:	4606      	mov	r6, r0
 8003b02:	460f      	mov	r7, r1
 8003b04:	4614      	mov	r4, r2
 8003b06:	18d5      	adds	r5, r2, r3
 8003b08:	42ac      	cmp	r4, r5
 8003b0a:	d101      	bne.n	8003b10 <__sfputs_r+0x12>
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e007      	b.n	8003b20 <__sfputs_r+0x22>
 8003b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b14:	463a      	mov	r2, r7
 8003b16:	4630      	mov	r0, r6
 8003b18:	f7ff ffda 	bl	8003ad0 <__sfputc_r>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d1f3      	bne.n	8003b08 <__sfputs_r+0xa>
 8003b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b24 <_vfiprintf_r>:
 8003b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b28:	460d      	mov	r5, r1
 8003b2a:	b09d      	sub	sp, #116	@ 0x74
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	4698      	mov	r8, r3
 8003b30:	4606      	mov	r6, r0
 8003b32:	b118      	cbz	r0, 8003b3c <_vfiprintf_r+0x18>
 8003b34:	6a03      	ldr	r3, [r0, #32]
 8003b36:	b90b      	cbnz	r3, 8003b3c <_vfiprintf_r+0x18>
 8003b38:	f7ff fdca 	bl	80036d0 <__sinit>
 8003b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b3e:	07d9      	lsls	r1, r3, #31
 8003b40:	d405      	bmi.n	8003b4e <_vfiprintf_r+0x2a>
 8003b42:	89ab      	ldrh	r3, [r5, #12]
 8003b44:	059a      	lsls	r2, r3, #22
 8003b46:	d402      	bmi.n	8003b4e <_vfiprintf_r+0x2a>
 8003b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b4a:	f7ff fec6 	bl	80038da <__retarget_lock_acquire_recursive>
 8003b4e:	89ab      	ldrh	r3, [r5, #12]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	d501      	bpl.n	8003b58 <_vfiprintf_r+0x34>
 8003b54:	692b      	ldr	r3, [r5, #16]
 8003b56:	b99b      	cbnz	r3, 8003b80 <_vfiprintf_r+0x5c>
 8003b58:	4629      	mov	r1, r5
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f000 fb72 	bl	8004244 <__swsetup_r>
 8003b60:	b170      	cbz	r0, 8003b80 <_vfiprintf_r+0x5c>
 8003b62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b64:	07dc      	lsls	r4, r3, #31
 8003b66:	d504      	bpl.n	8003b72 <_vfiprintf_r+0x4e>
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	b01d      	add	sp, #116	@ 0x74
 8003b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b72:	89ab      	ldrh	r3, [r5, #12]
 8003b74:	0598      	lsls	r0, r3, #22
 8003b76:	d4f7      	bmi.n	8003b68 <_vfiprintf_r+0x44>
 8003b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b7a:	f7ff feaf 	bl	80038dc <__retarget_lock_release_recursive>
 8003b7e:	e7f3      	b.n	8003b68 <_vfiprintf_r+0x44>
 8003b80:	2300      	movs	r3, #0
 8003b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b84:	2320      	movs	r3, #32
 8003b86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b8e:	2330      	movs	r3, #48	@ 0x30
 8003b90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003d40 <_vfiprintf_r+0x21c>
 8003b94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b98:	f04f 0901 	mov.w	r9, #1
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	469a      	mov	sl, r3
 8003ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ba4:	b10a      	cbz	r2, 8003baa <_vfiprintf_r+0x86>
 8003ba6:	2a25      	cmp	r2, #37	@ 0x25
 8003ba8:	d1f9      	bne.n	8003b9e <_vfiprintf_r+0x7a>
 8003baa:	ebba 0b04 	subs.w	fp, sl, r4
 8003bae:	d00b      	beq.n	8003bc8 <_vfiprintf_r+0xa4>
 8003bb0:	465b      	mov	r3, fp
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f7ff ffa1 	bl	8003afe <__sfputs_r>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	f000 80a7 	beq.w	8003d10 <_vfiprintf_r+0x1ec>
 8003bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bc4:	445a      	add	r2, fp
 8003bc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 809f 	beq.w	8003d10 <_vfiprintf_r+0x1ec>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bdc:	f10a 0a01 	add.w	sl, sl, #1
 8003be0:	9304      	str	r3, [sp, #16]
 8003be2:	9307      	str	r3, [sp, #28]
 8003be4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003be8:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bea:	4654      	mov	r4, sl
 8003bec:	2205      	movs	r2, #5
 8003bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf2:	4853      	ldr	r0, [pc, #332]	@ (8003d40 <_vfiprintf_r+0x21c>)
 8003bf4:	f7fc fafc 	bl	80001f0 <memchr>
 8003bf8:	9a04      	ldr	r2, [sp, #16]
 8003bfa:	b9d8      	cbnz	r0, 8003c34 <_vfiprintf_r+0x110>
 8003bfc:	06d1      	lsls	r1, r2, #27
 8003bfe:	bf44      	itt	mi
 8003c00:	2320      	movmi	r3, #32
 8003c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c06:	0713      	lsls	r3, r2, #28
 8003c08:	bf44      	itt	mi
 8003c0a:	232b      	movmi	r3, #43	@ 0x2b
 8003c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c10:	f89a 3000 	ldrb.w	r3, [sl]
 8003c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c16:	d015      	beq.n	8003c44 <_vfiprintf_r+0x120>
 8003c18:	9a07      	ldr	r2, [sp, #28]
 8003c1a:	4654      	mov	r4, sl
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f04f 0c0a 	mov.w	ip, #10
 8003c22:	4621      	mov	r1, r4
 8003c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c28:	3b30      	subs	r3, #48	@ 0x30
 8003c2a:	2b09      	cmp	r3, #9
 8003c2c:	d94b      	bls.n	8003cc6 <_vfiprintf_r+0x1a2>
 8003c2e:	b1b0      	cbz	r0, 8003c5e <_vfiprintf_r+0x13a>
 8003c30:	9207      	str	r2, [sp, #28]
 8003c32:	e014      	b.n	8003c5e <_vfiprintf_r+0x13a>
 8003c34:	eba0 0308 	sub.w	r3, r0, r8
 8003c38:	fa09 f303 	lsl.w	r3, r9, r3
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	46a2      	mov	sl, r4
 8003c42:	e7d2      	b.n	8003bea <_vfiprintf_r+0xc6>
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	1d19      	adds	r1, r3, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	9103      	str	r1, [sp, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bfbb      	ittet	lt
 8003c50:	425b      	neglt	r3, r3
 8003c52:	f042 0202 	orrlt.w	r2, r2, #2
 8003c56:	9307      	strge	r3, [sp, #28]
 8003c58:	9307      	strlt	r3, [sp, #28]
 8003c5a:	bfb8      	it	lt
 8003c5c:	9204      	strlt	r2, [sp, #16]
 8003c5e:	7823      	ldrb	r3, [r4, #0]
 8003c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c62:	d10a      	bne.n	8003c7a <_vfiprintf_r+0x156>
 8003c64:	7863      	ldrb	r3, [r4, #1]
 8003c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c68:	d132      	bne.n	8003cd0 <_vfiprintf_r+0x1ac>
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	1d1a      	adds	r2, r3, #4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	9203      	str	r2, [sp, #12]
 8003c72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c76:	3402      	adds	r4, #2
 8003c78:	9305      	str	r3, [sp, #20]
 8003c7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003d50 <_vfiprintf_r+0x22c>
 8003c7e:	7821      	ldrb	r1, [r4, #0]
 8003c80:	2203      	movs	r2, #3
 8003c82:	4650      	mov	r0, sl
 8003c84:	f7fc fab4 	bl	80001f0 <memchr>
 8003c88:	b138      	cbz	r0, 8003c9a <_vfiprintf_r+0x176>
 8003c8a:	9b04      	ldr	r3, [sp, #16]
 8003c8c:	eba0 000a 	sub.w	r0, r0, sl
 8003c90:	2240      	movs	r2, #64	@ 0x40
 8003c92:	4082      	lsls	r2, r0
 8003c94:	4313      	orrs	r3, r2
 8003c96:	3401      	adds	r4, #1
 8003c98:	9304      	str	r3, [sp, #16]
 8003c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9e:	4829      	ldr	r0, [pc, #164]	@ (8003d44 <_vfiprintf_r+0x220>)
 8003ca0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ca4:	2206      	movs	r2, #6
 8003ca6:	f7fc faa3 	bl	80001f0 <memchr>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d03f      	beq.n	8003d2e <_vfiprintf_r+0x20a>
 8003cae:	4b26      	ldr	r3, [pc, #152]	@ (8003d48 <_vfiprintf_r+0x224>)
 8003cb0:	bb1b      	cbnz	r3, 8003cfa <_vfiprintf_r+0x1d6>
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	3307      	adds	r3, #7
 8003cb6:	f023 0307 	bic.w	r3, r3, #7
 8003cba:	3308      	adds	r3, #8
 8003cbc:	9303      	str	r3, [sp, #12]
 8003cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cc0:	443b      	add	r3, r7
 8003cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cc4:	e76a      	b.n	8003b9c <_vfiprintf_r+0x78>
 8003cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cca:	460c      	mov	r4, r1
 8003ccc:	2001      	movs	r0, #1
 8003cce:	e7a8      	b.n	8003c22 <_vfiprintf_r+0xfe>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	3401      	adds	r4, #1
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f04f 0c0a 	mov.w	ip, #10
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ce2:	3a30      	subs	r2, #48	@ 0x30
 8003ce4:	2a09      	cmp	r2, #9
 8003ce6:	d903      	bls.n	8003cf0 <_vfiprintf_r+0x1cc>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0c6      	beq.n	8003c7a <_vfiprintf_r+0x156>
 8003cec:	9105      	str	r1, [sp, #20]
 8003cee:	e7c4      	b.n	8003c7a <_vfiprintf_r+0x156>
 8003cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e7f0      	b.n	8003cdc <_vfiprintf_r+0x1b8>
 8003cfa:	ab03      	add	r3, sp, #12
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	462a      	mov	r2, r5
 8003d00:	4b12      	ldr	r3, [pc, #72]	@ (8003d4c <_vfiprintf_r+0x228>)
 8003d02:	a904      	add	r1, sp, #16
 8003d04:	4630      	mov	r0, r6
 8003d06:	f3af 8000 	nop.w
 8003d0a:	4607      	mov	r7, r0
 8003d0c:	1c78      	adds	r0, r7, #1
 8003d0e:	d1d6      	bne.n	8003cbe <_vfiprintf_r+0x19a>
 8003d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d12:	07d9      	lsls	r1, r3, #31
 8003d14:	d405      	bmi.n	8003d22 <_vfiprintf_r+0x1fe>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	059a      	lsls	r2, r3, #22
 8003d1a:	d402      	bmi.n	8003d22 <_vfiprintf_r+0x1fe>
 8003d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d1e:	f7ff fddd 	bl	80038dc <__retarget_lock_release_recursive>
 8003d22:	89ab      	ldrh	r3, [r5, #12]
 8003d24:	065b      	lsls	r3, r3, #25
 8003d26:	f53f af1f 	bmi.w	8003b68 <_vfiprintf_r+0x44>
 8003d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d2c:	e71e      	b.n	8003b6c <_vfiprintf_r+0x48>
 8003d2e:	ab03      	add	r3, sp, #12
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	462a      	mov	r2, r5
 8003d34:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <_vfiprintf_r+0x228>)
 8003d36:	a904      	add	r1, sp, #16
 8003d38:	4630      	mov	r0, r6
 8003d3a:	f000 f879 	bl	8003e30 <_printf_i>
 8003d3e:	e7e4      	b.n	8003d0a <_vfiprintf_r+0x1e6>
 8003d40:	0800446c 	.word	0x0800446c
 8003d44:	08004476 	.word	0x08004476
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	08003aff 	.word	0x08003aff
 8003d50:	08004472 	.word	0x08004472

08003d54 <_printf_common>:
 8003d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d58:	4616      	mov	r6, r2
 8003d5a:	4698      	mov	r8, r3
 8003d5c:	688a      	ldr	r2, [r1, #8]
 8003d5e:	690b      	ldr	r3, [r1, #16]
 8003d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d64:	4293      	cmp	r3, r2
 8003d66:	bfb8      	it	lt
 8003d68:	4613      	movlt	r3, r2
 8003d6a:	6033      	str	r3, [r6, #0]
 8003d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d70:	4607      	mov	r7, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	b10a      	cbz	r2, 8003d7a <_printf_common+0x26>
 8003d76:	3301      	adds	r3, #1
 8003d78:	6033      	str	r3, [r6, #0]
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	0699      	lsls	r1, r3, #26
 8003d7e:	bf42      	ittt	mi
 8003d80:	6833      	ldrmi	r3, [r6, #0]
 8003d82:	3302      	addmi	r3, #2
 8003d84:	6033      	strmi	r3, [r6, #0]
 8003d86:	6825      	ldr	r5, [r4, #0]
 8003d88:	f015 0506 	ands.w	r5, r5, #6
 8003d8c:	d106      	bne.n	8003d9c <_printf_common+0x48>
 8003d8e:	f104 0a19 	add.w	sl, r4, #25
 8003d92:	68e3      	ldr	r3, [r4, #12]
 8003d94:	6832      	ldr	r2, [r6, #0]
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	42ab      	cmp	r3, r5
 8003d9a:	dc26      	bgt.n	8003dea <_printf_common+0x96>
 8003d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003da0:	6822      	ldr	r2, [r4, #0]
 8003da2:	3b00      	subs	r3, #0
 8003da4:	bf18      	it	ne
 8003da6:	2301      	movne	r3, #1
 8003da8:	0692      	lsls	r2, r2, #26
 8003daa:	d42b      	bmi.n	8003e04 <_printf_common+0xb0>
 8003dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003db0:	4641      	mov	r1, r8
 8003db2:	4638      	mov	r0, r7
 8003db4:	47c8      	blx	r9
 8003db6:	3001      	adds	r0, #1
 8003db8:	d01e      	beq.n	8003df8 <_printf_common+0xa4>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	6922      	ldr	r2, [r4, #16]
 8003dbe:	f003 0306 	and.w	r3, r3, #6
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	bf02      	ittt	eq
 8003dc6:	68e5      	ldreq	r5, [r4, #12]
 8003dc8:	6833      	ldreq	r3, [r6, #0]
 8003dca:	1aed      	subeq	r5, r5, r3
 8003dcc:	68a3      	ldr	r3, [r4, #8]
 8003dce:	bf0c      	ite	eq
 8003dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd4:	2500      	movne	r5, #0
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	bfc4      	itt	gt
 8003dda:	1a9b      	subgt	r3, r3, r2
 8003ddc:	18ed      	addgt	r5, r5, r3
 8003dde:	2600      	movs	r6, #0
 8003de0:	341a      	adds	r4, #26
 8003de2:	42b5      	cmp	r5, r6
 8003de4:	d11a      	bne.n	8003e1c <_printf_common+0xc8>
 8003de6:	2000      	movs	r0, #0
 8003de8:	e008      	b.n	8003dfc <_printf_common+0xa8>
 8003dea:	2301      	movs	r3, #1
 8003dec:	4652      	mov	r2, sl
 8003dee:	4641      	mov	r1, r8
 8003df0:	4638      	mov	r0, r7
 8003df2:	47c8      	blx	r9
 8003df4:	3001      	adds	r0, #1
 8003df6:	d103      	bne.n	8003e00 <_printf_common+0xac>
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e00:	3501      	adds	r5, #1
 8003e02:	e7c6      	b.n	8003d92 <_printf_common+0x3e>
 8003e04:	18e1      	adds	r1, r4, r3
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	2030      	movs	r0, #48	@ 0x30
 8003e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e0e:	4422      	add	r2, r4
 8003e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e18:	3302      	adds	r3, #2
 8003e1a:	e7c7      	b.n	8003dac <_printf_common+0x58>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4622      	mov	r2, r4
 8003e20:	4641      	mov	r1, r8
 8003e22:	4638      	mov	r0, r7
 8003e24:	47c8      	blx	r9
 8003e26:	3001      	adds	r0, #1
 8003e28:	d0e6      	beq.n	8003df8 <_printf_common+0xa4>
 8003e2a:	3601      	adds	r6, #1
 8003e2c:	e7d9      	b.n	8003de2 <_printf_common+0x8e>
	...

08003e30 <_printf_i>:
 8003e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e34:	7e0f      	ldrb	r7, [r1, #24]
 8003e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e38:	2f78      	cmp	r7, #120	@ 0x78
 8003e3a:	4691      	mov	r9, r2
 8003e3c:	4680      	mov	r8, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	469a      	mov	sl, r3
 8003e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e46:	d807      	bhi.n	8003e58 <_printf_i+0x28>
 8003e48:	2f62      	cmp	r7, #98	@ 0x62
 8003e4a:	d80a      	bhi.n	8003e62 <_printf_i+0x32>
 8003e4c:	2f00      	cmp	r7, #0
 8003e4e:	f000 80d2 	beq.w	8003ff6 <_printf_i+0x1c6>
 8003e52:	2f58      	cmp	r7, #88	@ 0x58
 8003e54:	f000 80b9 	beq.w	8003fca <_printf_i+0x19a>
 8003e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e60:	e03a      	b.n	8003ed8 <_printf_i+0xa8>
 8003e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e66:	2b15      	cmp	r3, #21
 8003e68:	d8f6      	bhi.n	8003e58 <_printf_i+0x28>
 8003e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8003e70 <_printf_i+0x40>)
 8003e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e70:	08003ec9 	.word	0x08003ec9
 8003e74:	08003edd 	.word	0x08003edd
 8003e78:	08003e59 	.word	0x08003e59
 8003e7c:	08003e59 	.word	0x08003e59
 8003e80:	08003e59 	.word	0x08003e59
 8003e84:	08003e59 	.word	0x08003e59
 8003e88:	08003edd 	.word	0x08003edd
 8003e8c:	08003e59 	.word	0x08003e59
 8003e90:	08003e59 	.word	0x08003e59
 8003e94:	08003e59 	.word	0x08003e59
 8003e98:	08003e59 	.word	0x08003e59
 8003e9c:	08003fdd 	.word	0x08003fdd
 8003ea0:	08003f07 	.word	0x08003f07
 8003ea4:	08003f97 	.word	0x08003f97
 8003ea8:	08003e59 	.word	0x08003e59
 8003eac:	08003e59 	.word	0x08003e59
 8003eb0:	08003fff 	.word	0x08003fff
 8003eb4:	08003e59 	.word	0x08003e59
 8003eb8:	08003f07 	.word	0x08003f07
 8003ebc:	08003e59 	.word	0x08003e59
 8003ec0:	08003e59 	.word	0x08003e59
 8003ec4:	08003f9f 	.word	0x08003f9f
 8003ec8:	6833      	ldr	r3, [r6, #0]
 8003eca:	1d1a      	adds	r2, r3, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6032      	str	r2, [r6, #0]
 8003ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e09d      	b.n	8004018 <_printf_i+0x1e8>
 8003edc:	6833      	ldr	r3, [r6, #0]
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	1d19      	adds	r1, r3, #4
 8003ee2:	6031      	str	r1, [r6, #0]
 8003ee4:	0606      	lsls	r6, r0, #24
 8003ee6:	d501      	bpl.n	8003eec <_printf_i+0xbc>
 8003ee8:	681d      	ldr	r5, [r3, #0]
 8003eea:	e003      	b.n	8003ef4 <_printf_i+0xc4>
 8003eec:	0645      	lsls	r5, r0, #25
 8003eee:	d5fb      	bpl.n	8003ee8 <_printf_i+0xb8>
 8003ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	da03      	bge.n	8003f00 <_printf_i+0xd0>
 8003ef8:	232d      	movs	r3, #45	@ 0x2d
 8003efa:	426d      	negs	r5, r5
 8003efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f00:	4859      	ldr	r0, [pc, #356]	@ (8004068 <_printf_i+0x238>)
 8003f02:	230a      	movs	r3, #10
 8003f04:	e011      	b.n	8003f2a <_printf_i+0xfa>
 8003f06:	6821      	ldr	r1, [r4, #0]
 8003f08:	6833      	ldr	r3, [r6, #0]
 8003f0a:	0608      	lsls	r0, r1, #24
 8003f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f10:	d402      	bmi.n	8003f18 <_printf_i+0xe8>
 8003f12:	0649      	lsls	r1, r1, #25
 8003f14:	bf48      	it	mi
 8003f16:	b2ad      	uxthmi	r5, r5
 8003f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f1a:	4853      	ldr	r0, [pc, #332]	@ (8004068 <_printf_i+0x238>)
 8003f1c:	6033      	str	r3, [r6, #0]
 8003f1e:	bf14      	ite	ne
 8003f20:	230a      	movne	r3, #10
 8003f22:	2308      	moveq	r3, #8
 8003f24:	2100      	movs	r1, #0
 8003f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f2a:	6866      	ldr	r6, [r4, #4]
 8003f2c:	60a6      	str	r6, [r4, #8]
 8003f2e:	2e00      	cmp	r6, #0
 8003f30:	bfa2      	ittt	ge
 8003f32:	6821      	ldrge	r1, [r4, #0]
 8003f34:	f021 0104 	bicge.w	r1, r1, #4
 8003f38:	6021      	strge	r1, [r4, #0]
 8003f3a:	b90d      	cbnz	r5, 8003f40 <_printf_i+0x110>
 8003f3c:	2e00      	cmp	r6, #0
 8003f3e:	d04b      	beq.n	8003fd8 <_printf_i+0x1a8>
 8003f40:	4616      	mov	r6, r2
 8003f42:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f46:	fb03 5711 	mls	r7, r3, r1, r5
 8003f4a:	5dc7      	ldrb	r7, [r0, r7]
 8003f4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f50:	462f      	mov	r7, r5
 8003f52:	42bb      	cmp	r3, r7
 8003f54:	460d      	mov	r5, r1
 8003f56:	d9f4      	bls.n	8003f42 <_printf_i+0x112>
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d10b      	bne.n	8003f74 <_printf_i+0x144>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	07df      	lsls	r7, r3, #31
 8003f60:	d508      	bpl.n	8003f74 <_printf_i+0x144>
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	6861      	ldr	r1, [r4, #4]
 8003f66:	4299      	cmp	r1, r3
 8003f68:	bfde      	ittt	le
 8003f6a:	2330      	movle	r3, #48	@ 0x30
 8003f6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f74:	1b92      	subs	r2, r2, r6
 8003f76:	6122      	str	r2, [r4, #16]
 8003f78:	f8cd a000 	str.w	sl, [sp]
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	aa03      	add	r2, sp, #12
 8003f80:	4621      	mov	r1, r4
 8003f82:	4640      	mov	r0, r8
 8003f84:	f7ff fee6 	bl	8003d54 <_printf_common>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d14a      	bne.n	8004022 <_printf_i+0x1f2>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	b004      	add	sp, #16
 8003f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	f043 0320 	orr.w	r3, r3, #32
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	4833      	ldr	r0, [pc, #204]	@ (800406c <_printf_i+0x23c>)
 8003fa0:	2778      	movs	r7, #120	@ 0x78
 8003fa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	6831      	ldr	r1, [r6, #0]
 8003faa:	061f      	lsls	r7, r3, #24
 8003fac:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fb0:	d402      	bmi.n	8003fb8 <_printf_i+0x188>
 8003fb2:	065f      	lsls	r7, r3, #25
 8003fb4:	bf48      	it	mi
 8003fb6:	b2ad      	uxthmi	r5, r5
 8003fb8:	6031      	str	r1, [r6, #0]
 8003fba:	07d9      	lsls	r1, r3, #31
 8003fbc:	bf44      	itt	mi
 8003fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8003fc2:	6023      	strmi	r3, [r4, #0]
 8003fc4:	b11d      	cbz	r5, 8003fce <_printf_i+0x19e>
 8003fc6:	2310      	movs	r3, #16
 8003fc8:	e7ac      	b.n	8003f24 <_printf_i+0xf4>
 8003fca:	4827      	ldr	r0, [pc, #156]	@ (8004068 <_printf_i+0x238>)
 8003fcc:	e7e9      	b.n	8003fa2 <_printf_i+0x172>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	f023 0320 	bic.w	r3, r3, #32
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	e7f6      	b.n	8003fc6 <_printf_i+0x196>
 8003fd8:	4616      	mov	r6, r2
 8003fda:	e7bd      	b.n	8003f58 <_printf_i+0x128>
 8003fdc:	6833      	ldr	r3, [r6, #0]
 8003fde:	6825      	ldr	r5, [r4, #0]
 8003fe0:	6961      	ldr	r1, [r4, #20]
 8003fe2:	1d18      	adds	r0, r3, #4
 8003fe4:	6030      	str	r0, [r6, #0]
 8003fe6:	062e      	lsls	r6, r5, #24
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	d501      	bpl.n	8003ff0 <_printf_i+0x1c0>
 8003fec:	6019      	str	r1, [r3, #0]
 8003fee:	e002      	b.n	8003ff6 <_printf_i+0x1c6>
 8003ff0:	0668      	lsls	r0, r5, #25
 8003ff2:	d5fb      	bpl.n	8003fec <_printf_i+0x1bc>
 8003ff4:	8019      	strh	r1, [r3, #0]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6123      	str	r3, [r4, #16]
 8003ffa:	4616      	mov	r6, r2
 8003ffc:	e7bc      	b.n	8003f78 <_printf_i+0x148>
 8003ffe:	6833      	ldr	r3, [r6, #0]
 8004000:	1d1a      	adds	r2, r3, #4
 8004002:	6032      	str	r2, [r6, #0]
 8004004:	681e      	ldr	r6, [r3, #0]
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	2100      	movs	r1, #0
 800400a:	4630      	mov	r0, r6
 800400c:	f7fc f8f0 	bl	80001f0 <memchr>
 8004010:	b108      	cbz	r0, 8004016 <_printf_i+0x1e6>
 8004012:	1b80      	subs	r0, r0, r6
 8004014:	6060      	str	r0, [r4, #4]
 8004016:	6863      	ldr	r3, [r4, #4]
 8004018:	6123      	str	r3, [r4, #16]
 800401a:	2300      	movs	r3, #0
 800401c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004020:	e7aa      	b.n	8003f78 <_printf_i+0x148>
 8004022:	6923      	ldr	r3, [r4, #16]
 8004024:	4632      	mov	r2, r6
 8004026:	4649      	mov	r1, r9
 8004028:	4640      	mov	r0, r8
 800402a:	47d0      	blx	sl
 800402c:	3001      	adds	r0, #1
 800402e:	d0ad      	beq.n	8003f8c <_printf_i+0x15c>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	079b      	lsls	r3, r3, #30
 8004034:	d413      	bmi.n	800405e <_printf_i+0x22e>
 8004036:	68e0      	ldr	r0, [r4, #12]
 8004038:	9b03      	ldr	r3, [sp, #12]
 800403a:	4298      	cmp	r0, r3
 800403c:	bfb8      	it	lt
 800403e:	4618      	movlt	r0, r3
 8004040:	e7a6      	b.n	8003f90 <_printf_i+0x160>
 8004042:	2301      	movs	r3, #1
 8004044:	4632      	mov	r2, r6
 8004046:	4649      	mov	r1, r9
 8004048:	4640      	mov	r0, r8
 800404a:	47d0      	blx	sl
 800404c:	3001      	adds	r0, #1
 800404e:	d09d      	beq.n	8003f8c <_printf_i+0x15c>
 8004050:	3501      	adds	r5, #1
 8004052:	68e3      	ldr	r3, [r4, #12]
 8004054:	9903      	ldr	r1, [sp, #12]
 8004056:	1a5b      	subs	r3, r3, r1
 8004058:	42ab      	cmp	r3, r5
 800405a:	dcf2      	bgt.n	8004042 <_printf_i+0x212>
 800405c:	e7eb      	b.n	8004036 <_printf_i+0x206>
 800405e:	2500      	movs	r5, #0
 8004060:	f104 0619 	add.w	r6, r4, #25
 8004064:	e7f5      	b.n	8004052 <_printf_i+0x222>
 8004066:	bf00      	nop
 8004068:	0800447d 	.word	0x0800447d
 800406c:	0800448e 	.word	0x0800448e

08004070 <__sflush_r>:
 8004070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004078:	0716      	lsls	r6, r2, #28
 800407a:	4605      	mov	r5, r0
 800407c:	460c      	mov	r4, r1
 800407e:	d454      	bmi.n	800412a <__sflush_r+0xba>
 8004080:	684b      	ldr	r3, [r1, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	dc02      	bgt.n	800408c <__sflush_r+0x1c>
 8004086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	dd48      	ble.n	800411e <__sflush_r+0xae>
 800408c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800408e:	2e00      	cmp	r6, #0
 8004090:	d045      	beq.n	800411e <__sflush_r+0xae>
 8004092:	2300      	movs	r3, #0
 8004094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004098:	682f      	ldr	r7, [r5, #0]
 800409a:	6a21      	ldr	r1, [r4, #32]
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	d030      	beq.n	8004102 <__sflush_r+0x92>
 80040a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	0759      	lsls	r1, r3, #29
 80040a6:	d505      	bpl.n	80040b4 <__sflush_r+0x44>
 80040a8:	6863      	ldr	r3, [r4, #4]
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80040ae:	b10b      	cbz	r3, 80040b4 <__sflush_r+0x44>
 80040b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040b2:	1ad2      	subs	r2, r2, r3
 80040b4:	2300      	movs	r3, #0
 80040b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040b8:	6a21      	ldr	r1, [r4, #32]
 80040ba:	4628      	mov	r0, r5
 80040bc:	47b0      	blx	r6
 80040be:	1c43      	adds	r3, r0, #1
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	d106      	bne.n	80040d2 <__sflush_r+0x62>
 80040c4:	6829      	ldr	r1, [r5, #0]
 80040c6:	291d      	cmp	r1, #29
 80040c8:	d82b      	bhi.n	8004122 <__sflush_r+0xb2>
 80040ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004174 <__sflush_r+0x104>)
 80040cc:	410a      	asrs	r2, r1
 80040ce:	07d6      	lsls	r6, r2, #31
 80040d0:	d427      	bmi.n	8004122 <__sflush_r+0xb2>
 80040d2:	2200      	movs	r2, #0
 80040d4:	6062      	str	r2, [r4, #4]
 80040d6:	04d9      	lsls	r1, r3, #19
 80040d8:	6922      	ldr	r2, [r4, #16]
 80040da:	6022      	str	r2, [r4, #0]
 80040dc:	d504      	bpl.n	80040e8 <__sflush_r+0x78>
 80040de:	1c42      	adds	r2, r0, #1
 80040e0:	d101      	bne.n	80040e6 <__sflush_r+0x76>
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	b903      	cbnz	r3, 80040e8 <__sflush_r+0x78>
 80040e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80040e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040ea:	602f      	str	r7, [r5, #0]
 80040ec:	b1b9      	cbz	r1, 800411e <__sflush_r+0xae>
 80040ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040f2:	4299      	cmp	r1, r3
 80040f4:	d002      	beq.n	80040fc <__sflush_r+0x8c>
 80040f6:	4628      	mov	r0, r5
 80040f8:	f7ff fbf2 	bl	80038e0 <_free_r>
 80040fc:	2300      	movs	r3, #0
 80040fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004100:	e00d      	b.n	800411e <__sflush_r+0xae>
 8004102:	2301      	movs	r3, #1
 8004104:	4628      	mov	r0, r5
 8004106:	47b0      	blx	r6
 8004108:	4602      	mov	r2, r0
 800410a:	1c50      	adds	r0, r2, #1
 800410c:	d1c9      	bne.n	80040a2 <__sflush_r+0x32>
 800410e:	682b      	ldr	r3, [r5, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0c6      	beq.n	80040a2 <__sflush_r+0x32>
 8004114:	2b1d      	cmp	r3, #29
 8004116:	d001      	beq.n	800411c <__sflush_r+0xac>
 8004118:	2b16      	cmp	r3, #22
 800411a:	d11e      	bne.n	800415a <__sflush_r+0xea>
 800411c:	602f      	str	r7, [r5, #0]
 800411e:	2000      	movs	r0, #0
 8004120:	e022      	b.n	8004168 <__sflush_r+0xf8>
 8004122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004126:	b21b      	sxth	r3, r3
 8004128:	e01b      	b.n	8004162 <__sflush_r+0xf2>
 800412a:	690f      	ldr	r7, [r1, #16]
 800412c:	2f00      	cmp	r7, #0
 800412e:	d0f6      	beq.n	800411e <__sflush_r+0xae>
 8004130:	0793      	lsls	r3, r2, #30
 8004132:	680e      	ldr	r6, [r1, #0]
 8004134:	bf08      	it	eq
 8004136:	694b      	ldreq	r3, [r1, #20]
 8004138:	600f      	str	r7, [r1, #0]
 800413a:	bf18      	it	ne
 800413c:	2300      	movne	r3, #0
 800413e:	eba6 0807 	sub.w	r8, r6, r7
 8004142:	608b      	str	r3, [r1, #8]
 8004144:	f1b8 0f00 	cmp.w	r8, #0
 8004148:	dde9      	ble.n	800411e <__sflush_r+0xae>
 800414a:	6a21      	ldr	r1, [r4, #32]
 800414c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800414e:	4643      	mov	r3, r8
 8004150:	463a      	mov	r2, r7
 8004152:	4628      	mov	r0, r5
 8004154:	47b0      	blx	r6
 8004156:	2800      	cmp	r0, #0
 8004158:	dc08      	bgt.n	800416c <__sflush_r+0xfc>
 800415a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800415e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800416c:	4407      	add	r7, r0
 800416e:	eba8 0800 	sub.w	r8, r8, r0
 8004172:	e7e7      	b.n	8004144 <__sflush_r+0xd4>
 8004174:	dfbffffe 	.word	0xdfbffffe

08004178 <_fflush_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	690b      	ldr	r3, [r1, #16]
 800417c:	4605      	mov	r5, r0
 800417e:	460c      	mov	r4, r1
 8004180:	b913      	cbnz	r3, 8004188 <_fflush_r+0x10>
 8004182:	2500      	movs	r5, #0
 8004184:	4628      	mov	r0, r5
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	b118      	cbz	r0, 8004192 <_fflush_r+0x1a>
 800418a:	6a03      	ldr	r3, [r0, #32]
 800418c:	b90b      	cbnz	r3, 8004192 <_fflush_r+0x1a>
 800418e:	f7ff fa9f 	bl	80036d0 <__sinit>
 8004192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f3      	beq.n	8004182 <_fflush_r+0xa>
 800419a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800419c:	07d0      	lsls	r0, r2, #31
 800419e:	d404      	bmi.n	80041aa <_fflush_r+0x32>
 80041a0:	0599      	lsls	r1, r3, #22
 80041a2:	d402      	bmi.n	80041aa <_fflush_r+0x32>
 80041a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041a6:	f7ff fb98 	bl	80038da <__retarget_lock_acquire_recursive>
 80041aa:	4628      	mov	r0, r5
 80041ac:	4621      	mov	r1, r4
 80041ae:	f7ff ff5f 	bl	8004070 <__sflush_r>
 80041b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041b4:	07da      	lsls	r2, r3, #31
 80041b6:	4605      	mov	r5, r0
 80041b8:	d4e4      	bmi.n	8004184 <_fflush_r+0xc>
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	059b      	lsls	r3, r3, #22
 80041be:	d4e1      	bmi.n	8004184 <_fflush_r+0xc>
 80041c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041c2:	f7ff fb8b 	bl	80038dc <__retarget_lock_release_recursive>
 80041c6:	e7dd      	b.n	8004184 <_fflush_r+0xc>

080041c8 <__swbuf_r>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	460e      	mov	r6, r1
 80041cc:	4614      	mov	r4, r2
 80041ce:	4605      	mov	r5, r0
 80041d0:	b118      	cbz	r0, 80041da <__swbuf_r+0x12>
 80041d2:	6a03      	ldr	r3, [r0, #32]
 80041d4:	b90b      	cbnz	r3, 80041da <__swbuf_r+0x12>
 80041d6:	f7ff fa7b 	bl	80036d0 <__sinit>
 80041da:	69a3      	ldr	r3, [r4, #24]
 80041dc:	60a3      	str	r3, [r4, #8]
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	071a      	lsls	r2, r3, #28
 80041e2:	d501      	bpl.n	80041e8 <__swbuf_r+0x20>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	b943      	cbnz	r3, 80041fa <__swbuf_r+0x32>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 f82a 	bl	8004244 <__swsetup_r>
 80041f0:	b118      	cbz	r0, 80041fa <__swbuf_r+0x32>
 80041f2:	f04f 37ff 	mov.w	r7, #4294967295
 80041f6:	4638      	mov	r0, r7
 80041f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	6922      	ldr	r2, [r4, #16]
 80041fe:	1a98      	subs	r0, r3, r2
 8004200:	6963      	ldr	r3, [r4, #20]
 8004202:	b2f6      	uxtb	r6, r6
 8004204:	4283      	cmp	r3, r0
 8004206:	4637      	mov	r7, r6
 8004208:	dc05      	bgt.n	8004216 <__swbuf_r+0x4e>
 800420a:	4621      	mov	r1, r4
 800420c:	4628      	mov	r0, r5
 800420e:	f7ff ffb3 	bl	8004178 <_fflush_r>
 8004212:	2800      	cmp	r0, #0
 8004214:	d1ed      	bne.n	80041f2 <__swbuf_r+0x2a>
 8004216:	68a3      	ldr	r3, [r4, #8]
 8004218:	3b01      	subs	r3, #1
 800421a:	60a3      	str	r3, [r4, #8]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	701e      	strb	r6, [r3, #0]
 8004224:	6962      	ldr	r2, [r4, #20]
 8004226:	1c43      	adds	r3, r0, #1
 8004228:	429a      	cmp	r2, r3
 800422a:	d004      	beq.n	8004236 <__swbuf_r+0x6e>
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	07db      	lsls	r3, r3, #31
 8004230:	d5e1      	bpl.n	80041f6 <__swbuf_r+0x2e>
 8004232:	2e0a      	cmp	r6, #10
 8004234:	d1df      	bne.n	80041f6 <__swbuf_r+0x2e>
 8004236:	4621      	mov	r1, r4
 8004238:	4628      	mov	r0, r5
 800423a:	f7ff ff9d 	bl	8004178 <_fflush_r>
 800423e:	2800      	cmp	r0, #0
 8004240:	d0d9      	beq.n	80041f6 <__swbuf_r+0x2e>
 8004242:	e7d6      	b.n	80041f2 <__swbuf_r+0x2a>

08004244 <__swsetup_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <__swsetup_r+0xa8>)
 8004248:	4605      	mov	r5, r0
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	460c      	mov	r4, r1
 800424e:	b118      	cbz	r0, 8004258 <__swsetup_r+0x14>
 8004250:	6a03      	ldr	r3, [r0, #32]
 8004252:	b90b      	cbnz	r3, 8004258 <__swsetup_r+0x14>
 8004254:	f7ff fa3c 	bl	80036d0 <__sinit>
 8004258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800425c:	0719      	lsls	r1, r3, #28
 800425e:	d422      	bmi.n	80042a6 <__swsetup_r+0x62>
 8004260:	06da      	lsls	r2, r3, #27
 8004262:	d407      	bmi.n	8004274 <__swsetup_r+0x30>
 8004264:	2209      	movs	r2, #9
 8004266:	602a      	str	r2, [r5, #0]
 8004268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	f04f 30ff 	mov.w	r0, #4294967295
 8004272:	e033      	b.n	80042dc <__swsetup_r+0x98>
 8004274:	0758      	lsls	r0, r3, #29
 8004276:	d512      	bpl.n	800429e <__swsetup_r+0x5a>
 8004278:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800427a:	b141      	cbz	r1, 800428e <__swsetup_r+0x4a>
 800427c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004280:	4299      	cmp	r1, r3
 8004282:	d002      	beq.n	800428a <__swsetup_r+0x46>
 8004284:	4628      	mov	r0, r5
 8004286:	f7ff fb2b 	bl	80038e0 <_free_r>
 800428a:	2300      	movs	r3, #0
 800428c:	6363      	str	r3, [r4, #52]	@ 0x34
 800428e:	89a3      	ldrh	r3, [r4, #12]
 8004290:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	2300      	movs	r3, #0
 8004298:	6063      	str	r3, [r4, #4]
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f043 0308 	orr.w	r3, r3, #8
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	b94b      	cbnz	r3, 80042be <__swsetup_r+0x7a>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b4:	d003      	beq.n	80042be <__swsetup_r+0x7a>
 80042b6:	4621      	mov	r1, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 f84f 	bl	800435c <__smakebuf_r>
 80042be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042c2:	f013 0201 	ands.w	r2, r3, #1
 80042c6:	d00a      	beq.n	80042de <__swsetup_r+0x9a>
 80042c8:	2200      	movs	r2, #0
 80042ca:	60a2      	str	r2, [r4, #8]
 80042cc:	6962      	ldr	r2, [r4, #20]
 80042ce:	4252      	negs	r2, r2
 80042d0:	61a2      	str	r2, [r4, #24]
 80042d2:	6922      	ldr	r2, [r4, #16]
 80042d4:	b942      	cbnz	r2, 80042e8 <__swsetup_r+0xa4>
 80042d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042da:	d1c5      	bne.n	8004268 <__swsetup_r+0x24>
 80042dc:	bd38      	pop	{r3, r4, r5, pc}
 80042de:	0799      	lsls	r1, r3, #30
 80042e0:	bf58      	it	pl
 80042e2:	6962      	ldrpl	r2, [r4, #20]
 80042e4:	60a2      	str	r2, [r4, #8]
 80042e6:	e7f4      	b.n	80042d2 <__swsetup_r+0x8e>
 80042e8:	2000      	movs	r0, #0
 80042ea:	e7f7      	b.n	80042dc <__swsetup_r+0x98>
 80042ec:	20000034 	.word	0x20000034

080042f0 <_sbrk_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4d06      	ldr	r5, [pc, #24]	@ (800430c <_sbrk_r+0x1c>)
 80042f4:	2300      	movs	r3, #0
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fc fd2e 	bl	8000d5c <_sbrk>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_sbrk_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_sbrk_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	20000958 	.word	0x20000958

08004310 <__swhatbuf_r>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	460c      	mov	r4, r1
 8004314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004318:	2900      	cmp	r1, #0
 800431a:	b096      	sub	sp, #88	@ 0x58
 800431c:	4615      	mov	r5, r2
 800431e:	461e      	mov	r6, r3
 8004320:	da0d      	bge.n	800433e <__swhatbuf_r+0x2e>
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	bf14      	ite	ne
 800432e:	2340      	movne	r3, #64	@ 0x40
 8004330:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004334:	2000      	movs	r0, #0
 8004336:	6031      	str	r1, [r6, #0]
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	b016      	add	sp, #88	@ 0x58
 800433c:	bd70      	pop	{r4, r5, r6, pc}
 800433e:	466a      	mov	r2, sp
 8004340:	f000 f848 	bl	80043d4 <_fstat_r>
 8004344:	2800      	cmp	r0, #0
 8004346:	dbec      	blt.n	8004322 <__swhatbuf_r+0x12>
 8004348:	9901      	ldr	r1, [sp, #4]
 800434a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800434e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004352:	4259      	negs	r1, r3
 8004354:	4159      	adcs	r1, r3
 8004356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800435a:	e7eb      	b.n	8004334 <__swhatbuf_r+0x24>

0800435c <__smakebuf_r>:
 800435c:	898b      	ldrh	r3, [r1, #12]
 800435e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004360:	079d      	lsls	r5, r3, #30
 8004362:	4606      	mov	r6, r0
 8004364:	460c      	mov	r4, r1
 8004366:	d507      	bpl.n	8004378 <__smakebuf_r+0x1c>
 8004368:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	6123      	str	r3, [r4, #16]
 8004370:	2301      	movs	r3, #1
 8004372:	6163      	str	r3, [r4, #20]
 8004374:	b003      	add	sp, #12
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004378:	ab01      	add	r3, sp, #4
 800437a:	466a      	mov	r2, sp
 800437c:	f7ff ffc8 	bl	8004310 <__swhatbuf_r>
 8004380:	9f00      	ldr	r7, [sp, #0]
 8004382:	4605      	mov	r5, r0
 8004384:	4639      	mov	r1, r7
 8004386:	4630      	mov	r0, r6
 8004388:	f7ff fb16 	bl	80039b8 <_malloc_r>
 800438c:	b948      	cbnz	r0, 80043a2 <__smakebuf_r+0x46>
 800438e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004392:	059a      	lsls	r2, r3, #22
 8004394:	d4ee      	bmi.n	8004374 <__smakebuf_r+0x18>
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	f043 0302 	orr.w	r3, r3, #2
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	e7e2      	b.n	8004368 <__smakebuf_r+0xc>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	6020      	str	r0, [r4, #0]
 80043a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	9b01      	ldr	r3, [sp, #4]
 80043ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80043b2:	b15b      	cbz	r3, 80043cc <__smakebuf_r+0x70>
 80043b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043b8:	4630      	mov	r0, r6
 80043ba:	f000 f81d 	bl	80043f8 <_isatty_r>
 80043be:	b128      	cbz	r0, 80043cc <__smakebuf_r+0x70>
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	431d      	orrs	r5, r3
 80043d0:	81a5      	strh	r5, [r4, #12]
 80043d2:	e7cf      	b.n	8004374 <__smakebuf_r+0x18>

080043d4 <_fstat_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4d07      	ldr	r5, [pc, #28]	@ (80043f4 <_fstat_r+0x20>)
 80043d8:	2300      	movs	r3, #0
 80043da:	4604      	mov	r4, r0
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	602b      	str	r3, [r5, #0]
 80043e2:	f7fc fc93 	bl	8000d0c <_fstat>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	d102      	bne.n	80043f0 <_fstat_r+0x1c>
 80043ea:	682b      	ldr	r3, [r5, #0]
 80043ec:	b103      	cbz	r3, 80043f0 <_fstat_r+0x1c>
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	bd38      	pop	{r3, r4, r5, pc}
 80043f2:	bf00      	nop
 80043f4:	20000958 	.word	0x20000958

080043f8 <_isatty_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4d06      	ldr	r5, [pc, #24]	@ (8004414 <_isatty_r+0x1c>)
 80043fc:	2300      	movs	r3, #0
 80043fe:	4604      	mov	r4, r0
 8004400:	4608      	mov	r0, r1
 8004402:	602b      	str	r3, [r5, #0]
 8004404:	f7fc fc92 	bl	8000d2c <_isatty>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_isatty_r+0x1a>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b103      	cbz	r3, 8004412 <_isatty_r+0x1a>
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	20000958 	.word	0x20000958

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
