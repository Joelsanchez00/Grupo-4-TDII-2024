
PROYECTO_FINAL_TDI2_GRUPO_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800d8a8  0800d8a8  0000e8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df18  0800df18  0000f1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800df18  0800df18  0000ef18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df20  0800df20  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df20  0800df20  0000ef20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df24  0800df24  0000ef24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800df28  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1e0  2**0
                  CONTENTS
 10 .bss          000011b4  200001e0  200001e0  0000f1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001394  20001394  0000f1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af3f  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003713  00000000  00000000  0002a14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  0002d868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ec  00000000  00000000  0002f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ad6  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d707  00000000  00000000  00058e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5783  00000000  00000000  00076559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016bcdc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d34  00000000  00000000  0016bd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00173a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d890 	.word	0x0800d890

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800d890 	.word	0x0800d890

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b9a0 	b.w	8000ff4 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff21 	bl	8000b1c <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc97 	bl	8000638 <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc18 	bl	8000544 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc8e 	bl	8000638 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff fad0 	bl	80002c8 <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <LCD_initID>:

#define i2c_handler	&hi2c1			//Change this line based on your I2C
extern I2C_HandleTypeDef hi2c1;		//Also this line :)
uint8_t ADDR;

void LCD_initID(uint8_t _ADDR) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	ADDR = _ADDR;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <LCD_initID+0x1c>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	7013      	strb	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	200001fc 	.word	0x200001fc

08001018 <LCD_sendCMD>:

void LCD_sendCMD (char cmd) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	char _U, _L;
	uint8_t _T[4];
	_U = (cmd&0xf0);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f023 030f 	bic.w	r3, r3, #15
 8001028:	73fb      	strb	r3, [r7, #15]
	_L = ((cmd<<4)&0xf0);
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	73bb      	strb	r3, [r7, #14]
	_T[0] = _U|0x0C;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	f043 030c 	orr.w	r3, r3, #12
 8001036:	b2db      	uxtb	r3, r3
 8001038:	723b      	strb	r3, [r7, #8]
	_T[1] = _U|0x08;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	b2db      	uxtb	r3, r3
 8001042:	727b      	strb	r3, [r7, #9]
	_T[2] = _L|0x0C;
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	f043 030c 	orr.w	r3, r3, #12
 800104a:	b2db      	uxtb	r3, r3
 800104c:	72bb      	strb	r3, [r7, #10]
	_T[3] = _L|0x08;
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	b2db      	uxtb	r3, r3
 8001056:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, ADDR,(uint8_t *) _T, 4, 100);
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <LCD_sendCMD+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f107 0208 	add.w	r2, r7, #8
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2304      	movs	r3, #4
 8001068:	4804      	ldr	r0, [pc, #16]	@ (800107c <LCD_sendCMD+0x64>)
 800106a:	f003 ff13 	bl	8004e94 <HAL_I2C_Master_Transmit>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200001fc 	.word	0x200001fc
 800107c:	200004e4 	.word	0x200004e4

08001080 <LCD_sendData>:

void LCD_sendData (char data) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	char _U, _L;
	uint8_t _T[4];
	_U = (data&0xf0);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f023 030f 	bic.w	r3, r3, #15
 8001090:	73fb      	strb	r3, [r7, #15]
	_L = ((data<<4)&0xf0);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	73bb      	strb	r3, [r7, #14]
	_T[0] = _U|0x0D;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	f043 030d 	orr.w	r3, r3, #13
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	723b      	strb	r3, [r7, #8]
	_T[1] = _U|0x09;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f043 0309 	orr.w	r3, r3, #9
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	727b      	strb	r3, [r7, #9]
	_T[2] = _L|0x0D;
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	f043 030d 	orr.w	r3, r3, #13
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	72bb      	strb	r3, [r7, #10]
	_T[3] = _L|0x09;
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	f043 0309 	orr.w	r3, r3, #9
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, ADDR,(uint8_t *) _T, 4, 100);
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <LCD_sendData+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f107 0208 	add.w	r2, r7, #8
 80010ca:	2364      	movs	r3, #100	@ 0x64
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2304      	movs	r3, #4
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <LCD_sendData+0x64>)
 80010d2:	f003 fedf 	bl	8004e94 <HAL_I2C_Master_Transmit>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	200004e4 	.word	0x200004e4

080010e8 <LCD_Clear>:

void LCD_Clear (void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	LCD_sendData (0x00);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ffc6 	bl	8001080 <LCD_sendData>
	for (int i=0; i<100; i++) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	e005      	b.n	8001106 <LCD_Clear+0x1e>
		LCD_sendData (' ');
 80010fa:	2020      	movs	r0, #32
 80010fc:	f7ff ffc0 	bl	8001080 <LCD_sendData>
	for (int i=0; i<100; i++) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b63      	cmp	r3, #99	@ 0x63
 800110a:	ddf6      	ble.n	80010fa <LCD_Clear+0x12>
	}
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <LCD_Init>:

void LCD_Init () {
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 800111a:	2032      	movs	r0, #50	@ 0x32
 800111c:	f001 feac 	bl	8002e78 <HAL_Delay>
	LCD_sendCMD (0x30);
 8001120:	2030      	movs	r0, #48	@ 0x30
 8001122:	f7ff ff79 	bl	8001018 <LCD_sendCMD>
	HAL_Delay(5);
 8001126:	2005      	movs	r0, #5
 8001128:	f001 fea6 	bl	8002e78 <HAL_Delay>
	LCD_sendCMD (0x30);
 800112c:	2030      	movs	r0, #48	@ 0x30
 800112e:	f7ff ff73 	bl	8001018 <LCD_sendCMD>
	HAL_Delay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f001 fea0 	bl	8002e78 <HAL_Delay>
	LCD_sendCMD (0x30);
 8001138:	2030      	movs	r0, #48	@ 0x30
 800113a:	f7ff ff6d 	bl	8001018 <LCD_sendCMD>
	HAL_Delay(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f001 fe9a 	bl	8002e78 <HAL_Delay>
	LCD_sendCMD (0x20);
 8001144:	2020      	movs	r0, #32
 8001146:	f7ff ff67 	bl	8001018 <LCD_sendCMD>
	HAL_Delay(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f001 fe94 	bl	8002e78 <HAL_Delay>

	LCD_sendCMD (0x28);
 8001150:	2028      	movs	r0, #40	@ 0x28
 8001152:	f7ff ff61 	bl	8001018 <LCD_sendCMD>
	HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f001 fe8e 	bl	8002e78 <HAL_Delay>
	LCD_sendCMD (0x08);
 800115c:	2008      	movs	r0, #8
 800115e:	f7ff ff5b 	bl	8001018 <LCD_sendCMD>
	HAL_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f001 fe88 	bl	8002e78 <HAL_Delay>
	LCD_sendCMD (0x01);
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff ff55 	bl	8001018 <LCD_sendCMD>
	HAL_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f001 fe82 	bl	8002e78 <HAL_Delay>
	HAL_Delay(1);
 8001174:	2001      	movs	r0, #1
 8001176:	f001 fe7f 	bl	8002e78 <HAL_Delay>
	LCD_sendCMD (0x06);
 800117a:	2006      	movs	r0, #6
 800117c:	f7ff ff4c 	bl	8001018 <LCD_sendCMD>
	HAL_Delay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f001 fe79 	bl	8002e78 <HAL_Delay>
	LCD_sendCMD (0x0C);
 8001186:	200c      	movs	r0, #12
 8001188:	f7ff ff46 	bl	8001018 <LCD_sendCMD>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <LCD_sendSTR>:

void LCD_sendSTR(char *str) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	while (*str) LCD_sendData (*str++);
 8001198:	e006      	b.n	80011a8 <LCD_sendSTR+0x18>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff6c 	bl	8001080 <LCD_sendData>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f4      	bne.n	800119a <LCD_sendSTR+0xa>
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <LCD_setCursor>:

void LCD_setCursor(uint8_t x, uint8_t y) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71bb      	strb	r3, [r7, #6]
	uint8_t cursor;
	switch (x) {
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	f200 81c4 	bhi.w	800155c <LCD_setCursor+0x3a0>
 80011d4:	a201      	add	r2, pc, #4	@ (adr r2, 80011dc <LCD_setCursor+0x20>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	080011ed 	.word	0x080011ed
 80011e0:	080012c7 	.word	0x080012c7
 80011e4:	0800139f 	.word	0x0800139f
 80011e8:	08001477 	.word	0x08001477
	case 0 :
		switch (y) {
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	2b13      	cmp	r3, #19
 80011f0:	f200 81ad 	bhi.w	800154e <LCD_setCursor+0x392>
 80011f4:	a201      	add	r2, pc, #4	@ (adr r2, 80011fc <LCD_setCursor+0x40>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800124d 	.word	0x0800124d
 8001200:	08001253 	.word	0x08001253
 8001204:	08001259 	.word	0x08001259
 8001208:	0800125f 	.word	0x0800125f
 800120c:	08001265 	.word	0x08001265
 8001210:	0800126b 	.word	0x0800126b
 8001214:	08001271 	.word	0x08001271
 8001218:	08001277 	.word	0x08001277
 800121c:	0800127d 	.word	0x0800127d
 8001220:	08001283 	.word	0x08001283
 8001224:	08001289 	.word	0x08001289
 8001228:	0800128f 	.word	0x0800128f
 800122c:	08001295 	.word	0x08001295
 8001230:	0800129b 	.word	0x0800129b
 8001234:	080012a1 	.word	0x080012a1
 8001238:	080012a7 	.word	0x080012a7
 800123c:	080012ad 	.word	0x080012ad
 8001240:	080012b3 	.word	0x080012b3
 8001244:	080012b9 	.word	0x080012b9
 8001248:	080012bf 	.word	0x080012bf
		case 0 : cursor = 0x00; break;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e038      	b.n	80012c4 <LCD_setCursor+0x108>
		case 1 : cursor = 0x01; break;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e035      	b.n	80012c4 <LCD_setCursor+0x108>
		case 2 : cursor = 0x02; break;
 8001258:	2302      	movs	r3, #2
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e032      	b.n	80012c4 <LCD_setCursor+0x108>
		case 3 : cursor = 0x03; break;
 800125e:	2303      	movs	r3, #3
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e02f      	b.n	80012c4 <LCD_setCursor+0x108>
		case 4 : cursor = 0x04; break;
 8001264:	2304      	movs	r3, #4
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e02c      	b.n	80012c4 <LCD_setCursor+0x108>
		case 5 : cursor = 0x05; break;
 800126a:	2305      	movs	r3, #5
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e029      	b.n	80012c4 <LCD_setCursor+0x108>
		case 6 : cursor = 0x06; break;
 8001270:	2306      	movs	r3, #6
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e026      	b.n	80012c4 <LCD_setCursor+0x108>
		case 7 : cursor = 0x07; break;
 8001276:	2307      	movs	r3, #7
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e023      	b.n	80012c4 <LCD_setCursor+0x108>
		case 8 : cursor = 0x08; break;
 800127c:	2308      	movs	r3, #8
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e020      	b.n	80012c4 <LCD_setCursor+0x108>
		case 9 : cursor = 0x09; break;
 8001282:	2309      	movs	r3, #9
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e01d      	b.n	80012c4 <LCD_setCursor+0x108>
		case 10 : cursor = 0x0A; break;
 8001288:	230a      	movs	r3, #10
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e01a      	b.n	80012c4 <LCD_setCursor+0x108>
		case 11 : cursor = 0x0B; break;
 800128e:	230b      	movs	r3, #11
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e017      	b.n	80012c4 <LCD_setCursor+0x108>
		case 12 : cursor = 0x0C; break;
 8001294:	230c      	movs	r3, #12
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e014      	b.n	80012c4 <LCD_setCursor+0x108>
		case 13 : cursor = 0x0D; break;
 800129a:	230d      	movs	r3, #13
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e011      	b.n	80012c4 <LCD_setCursor+0x108>
		case 14 : cursor = 0x0E; break;
 80012a0:	230e      	movs	r3, #14
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e00e      	b.n	80012c4 <LCD_setCursor+0x108>
		case 15 : cursor = 0x0F; break;
 80012a6:	230f      	movs	r3, #15
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e00b      	b.n	80012c4 <LCD_setCursor+0x108>
		case 16 : cursor = 0x10; break;
 80012ac:	2310      	movs	r3, #16
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e008      	b.n	80012c4 <LCD_setCursor+0x108>
		case 17 : cursor = 0x11; break;
 80012b2:	2311      	movs	r3, #17
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e005      	b.n	80012c4 <LCD_setCursor+0x108>
		case 18 : cursor = 0x12; break;
 80012b8:	2312      	movs	r3, #18
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e002      	b.n	80012c4 <LCD_setCursor+0x108>
		case 19 : cursor = 0x13; break;
 80012be:	2313      	movs	r3, #19
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	bf00      	nop
		} break;
 80012c4:	e143      	b.n	800154e <LCD_setCursor+0x392>

	case 1 :
		switch (y) {
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	2b13      	cmp	r3, #19
 80012ca:	f200 8142 	bhi.w	8001552 <LCD_setCursor+0x396>
 80012ce:	a201      	add	r2, pc, #4	@ (adr r2, 80012d4 <LCD_setCursor+0x118>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	08001325 	.word	0x08001325
 80012d8:	0800132b 	.word	0x0800132b
 80012dc:	08001331 	.word	0x08001331
 80012e0:	08001337 	.word	0x08001337
 80012e4:	0800133d 	.word	0x0800133d
 80012e8:	08001343 	.word	0x08001343
 80012ec:	08001349 	.word	0x08001349
 80012f0:	0800134f 	.word	0x0800134f
 80012f4:	08001355 	.word	0x08001355
 80012f8:	0800135b 	.word	0x0800135b
 80012fc:	08001361 	.word	0x08001361
 8001300:	08001367 	.word	0x08001367
 8001304:	0800136d 	.word	0x0800136d
 8001308:	08001373 	.word	0x08001373
 800130c:	08001379 	.word	0x08001379
 8001310:	0800137f 	.word	0x0800137f
 8001314:	08001385 	.word	0x08001385
 8001318:	0800138b 	.word	0x0800138b
 800131c:	08001391 	.word	0x08001391
 8001320:	08001397 	.word	0x08001397
		case 0 : cursor = 0x40; break;
 8001324:	2340      	movs	r3, #64	@ 0x40
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e038      	b.n	800139c <LCD_setCursor+0x1e0>
		case 1 : cursor = 0x41; break;
 800132a:	2341      	movs	r3, #65	@ 0x41
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e035      	b.n	800139c <LCD_setCursor+0x1e0>
		case 2 : cursor = 0x42; break;
 8001330:	2342      	movs	r3, #66	@ 0x42
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e032      	b.n	800139c <LCD_setCursor+0x1e0>
		case 3 : cursor = 0x43; break;
 8001336:	2343      	movs	r3, #67	@ 0x43
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e02f      	b.n	800139c <LCD_setCursor+0x1e0>
		case 4 : cursor = 0x44; break;
 800133c:	2344      	movs	r3, #68	@ 0x44
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e02c      	b.n	800139c <LCD_setCursor+0x1e0>
		case 5 : cursor = 0x45; break;
 8001342:	2345      	movs	r3, #69	@ 0x45
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	e029      	b.n	800139c <LCD_setCursor+0x1e0>
		case 6 : cursor = 0x46; break;
 8001348:	2346      	movs	r3, #70	@ 0x46
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e026      	b.n	800139c <LCD_setCursor+0x1e0>
		case 7 : cursor = 0x47; break;
 800134e:	2347      	movs	r3, #71	@ 0x47
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e023      	b.n	800139c <LCD_setCursor+0x1e0>
		case 8 : cursor = 0x48; break;
 8001354:	2348      	movs	r3, #72	@ 0x48
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e020      	b.n	800139c <LCD_setCursor+0x1e0>
		case 9 : cursor = 0x49; break;
 800135a:	2349      	movs	r3, #73	@ 0x49
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e01d      	b.n	800139c <LCD_setCursor+0x1e0>
		case 10 : cursor = 0x4A; break;
 8001360:	234a      	movs	r3, #74	@ 0x4a
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e01a      	b.n	800139c <LCD_setCursor+0x1e0>
		case 11 : cursor = 0x4B; break;
 8001366:	234b      	movs	r3, #75	@ 0x4b
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e017      	b.n	800139c <LCD_setCursor+0x1e0>
		case 12 : cursor = 0x4C; break;
 800136c:	234c      	movs	r3, #76	@ 0x4c
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e014      	b.n	800139c <LCD_setCursor+0x1e0>
		case 13 : cursor = 0x4D; break;
 8001372:	234d      	movs	r3, #77	@ 0x4d
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	e011      	b.n	800139c <LCD_setCursor+0x1e0>
		case 14 : cursor = 0x4E; break;
 8001378:	234e      	movs	r3, #78	@ 0x4e
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e00e      	b.n	800139c <LCD_setCursor+0x1e0>
		case 15 : cursor = 0x4F; break;
 800137e:	234f      	movs	r3, #79	@ 0x4f
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e00b      	b.n	800139c <LCD_setCursor+0x1e0>
		case 16 : cursor = 0x50; break;
 8001384:	2350      	movs	r3, #80	@ 0x50
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e008      	b.n	800139c <LCD_setCursor+0x1e0>
		case 17 : cursor = 0x51; break;
 800138a:	2351      	movs	r3, #81	@ 0x51
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e005      	b.n	800139c <LCD_setCursor+0x1e0>
		case 18 : cursor = 0x52; break;
 8001390:	2352      	movs	r3, #82	@ 0x52
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e002      	b.n	800139c <LCD_setCursor+0x1e0>
		case 19 : cursor = 0x53; break;
 8001396:	2353      	movs	r3, #83	@ 0x53
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	bf00      	nop
		} break;
 800139c:	e0d9      	b.n	8001552 <LCD_setCursor+0x396>

	case 2 :
		switch (y) {
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	2b13      	cmp	r3, #19
 80013a2:	f200 80d8 	bhi.w	8001556 <LCD_setCursor+0x39a>
 80013a6:	a201      	add	r2, pc, #4	@ (adr r2, 80013ac <LCD_setCursor+0x1f0>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	080013fd 	.word	0x080013fd
 80013b0:	08001403 	.word	0x08001403
 80013b4:	08001409 	.word	0x08001409
 80013b8:	0800140f 	.word	0x0800140f
 80013bc:	08001415 	.word	0x08001415
 80013c0:	0800141b 	.word	0x0800141b
 80013c4:	08001421 	.word	0x08001421
 80013c8:	08001427 	.word	0x08001427
 80013cc:	0800142d 	.word	0x0800142d
 80013d0:	08001433 	.word	0x08001433
 80013d4:	08001439 	.word	0x08001439
 80013d8:	0800143f 	.word	0x0800143f
 80013dc:	08001445 	.word	0x08001445
 80013e0:	0800144b 	.word	0x0800144b
 80013e4:	08001451 	.word	0x08001451
 80013e8:	08001457 	.word	0x08001457
 80013ec:	0800145d 	.word	0x0800145d
 80013f0:	08001463 	.word	0x08001463
 80013f4:	08001469 	.word	0x08001469
 80013f8:	0800146f 	.word	0x0800146f
		case 0 : cursor = 0x14; break;
 80013fc:	2314      	movs	r3, #20
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e038      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 1 : cursor = 0x15; break;
 8001402:	2315      	movs	r3, #21
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e035      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 2 : cursor = 0x16; break;
 8001408:	2316      	movs	r3, #22
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e032      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 3 : cursor = 0x17; break;
 800140e:	2317      	movs	r3, #23
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e02f      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 4 : cursor = 0x18; break;
 8001414:	2318      	movs	r3, #24
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e02c      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 5 : cursor = 0x19; break;
 800141a:	2319      	movs	r3, #25
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e029      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 6 : cursor = 0x1A; break;
 8001420:	231a      	movs	r3, #26
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e026      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 7 : cursor = 0x1B; break;
 8001426:	231b      	movs	r3, #27
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e023      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 8 : cursor = 0x1C; break;
 800142c:	231c      	movs	r3, #28
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e020      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 9 : cursor = 0x1D; break;
 8001432:	231d      	movs	r3, #29
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e01d      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 10 : cursor = 0x1E; break;
 8001438:	231e      	movs	r3, #30
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e01a      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 11 : cursor = 0x1F; break;
 800143e:	231f      	movs	r3, #31
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e017      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 12 : cursor = 0x20; break;
 8001444:	2320      	movs	r3, #32
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e014      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 13 : cursor = 0x21; break;
 800144a:	2321      	movs	r3, #33	@ 0x21
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e011      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 14 : cursor = 0x22; break;
 8001450:	2322      	movs	r3, #34	@ 0x22
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e00e      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 15 : cursor = 0x23; break;
 8001456:	2323      	movs	r3, #35	@ 0x23
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	e00b      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 16 : cursor = 0x24; break;
 800145c:	2324      	movs	r3, #36	@ 0x24
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e008      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 17 : cursor = 0x25; break;
 8001462:	2325      	movs	r3, #37	@ 0x25
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e005      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 18 : cursor = 0x26; break;
 8001468:	2326      	movs	r3, #38	@ 0x26
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e002      	b.n	8001474 <LCD_setCursor+0x2b8>
		case 19 : cursor = 0x27; break;
 800146e:	2327      	movs	r3, #39	@ 0x27
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	bf00      	nop
		} break;
 8001474:	e06f      	b.n	8001556 <LCD_setCursor+0x39a>

	case 3 :
		switch (y) {
 8001476:	79bb      	ldrb	r3, [r7, #6]
 8001478:	2b13      	cmp	r3, #19
 800147a:	d86e      	bhi.n	800155a <LCD_setCursor+0x39e>
 800147c:	a201      	add	r2, pc, #4	@ (adr r2, 8001484 <LCD_setCursor+0x2c8>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	080014d5 	.word	0x080014d5
 8001488:	080014db 	.word	0x080014db
 800148c:	080014e1 	.word	0x080014e1
 8001490:	080014e7 	.word	0x080014e7
 8001494:	080014ed 	.word	0x080014ed
 8001498:	080014f3 	.word	0x080014f3
 800149c:	080014f9 	.word	0x080014f9
 80014a0:	080014ff 	.word	0x080014ff
 80014a4:	08001505 	.word	0x08001505
 80014a8:	0800150b 	.word	0x0800150b
 80014ac:	08001511 	.word	0x08001511
 80014b0:	08001517 	.word	0x08001517
 80014b4:	0800151d 	.word	0x0800151d
 80014b8:	08001523 	.word	0x08001523
 80014bc:	08001529 	.word	0x08001529
 80014c0:	0800152f 	.word	0x0800152f
 80014c4:	08001535 	.word	0x08001535
 80014c8:	0800153b 	.word	0x0800153b
 80014cc:	08001541 	.word	0x08001541
 80014d0:	08001547 	.word	0x08001547
		case 0 : cursor = 0x54; break;
 80014d4:	2354      	movs	r3, #84	@ 0x54
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e038      	b.n	800154c <LCD_setCursor+0x390>
		case 1 : cursor = 0x55; break;
 80014da:	2355      	movs	r3, #85	@ 0x55
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e035      	b.n	800154c <LCD_setCursor+0x390>
		case 2 : cursor = 0x56; break;
 80014e0:	2356      	movs	r3, #86	@ 0x56
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e032      	b.n	800154c <LCD_setCursor+0x390>
		case 3 : cursor = 0x57; break;
 80014e6:	2357      	movs	r3, #87	@ 0x57
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e02f      	b.n	800154c <LCD_setCursor+0x390>
		case 4 : cursor = 0x58; break;
 80014ec:	2358      	movs	r3, #88	@ 0x58
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e02c      	b.n	800154c <LCD_setCursor+0x390>
		case 5 : cursor = 0x59; break;
 80014f2:	2359      	movs	r3, #89	@ 0x59
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e029      	b.n	800154c <LCD_setCursor+0x390>
		case 6 : cursor = 0x5A; break;
 80014f8:	235a      	movs	r3, #90	@ 0x5a
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e026      	b.n	800154c <LCD_setCursor+0x390>
		case 7 : cursor = 0x5B; break;
 80014fe:	235b      	movs	r3, #91	@ 0x5b
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e023      	b.n	800154c <LCD_setCursor+0x390>
		case 8 : cursor = 0x5C; break;
 8001504:	235c      	movs	r3, #92	@ 0x5c
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e020      	b.n	800154c <LCD_setCursor+0x390>
		case 9 : cursor = 0x5D; break;
 800150a:	235d      	movs	r3, #93	@ 0x5d
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e01d      	b.n	800154c <LCD_setCursor+0x390>
		case 10 : cursor = 0x5E; break;
 8001510:	235e      	movs	r3, #94	@ 0x5e
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e01a      	b.n	800154c <LCD_setCursor+0x390>
		case 11 : cursor = 0x5F; break;
 8001516:	235f      	movs	r3, #95	@ 0x5f
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	e017      	b.n	800154c <LCD_setCursor+0x390>
		case 12 : cursor = 0x60; break;
 800151c:	2360      	movs	r3, #96	@ 0x60
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e014      	b.n	800154c <LCD_setCursor+0x390>
		case 13 : cursor = 0x61; break;
 8001522:	2361      	movs	r3, #97	@ 0x61
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e011      	b.n	800154c <LCD_setCursor+0x390>
		case 14 : cursor = 0x62; break;
 8001528:	2362      	movs	r3, #98	@ 0x62
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e00e      	b.n	800154c <LCD_setCursor+0x390>
		case 15 : cursor = 0x63; break;
 800152e:	2363      	movs	r3, #99	@ 0x63
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e00b      	b.n	800154c <LCD_setCursor+0x390>
		case 16 : cursor = 0x64; break;
 8001534:	2364      	movs	r3, #100	@ 0x64
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e008      	b.n	800154c <LCD_setCursor+0x390>
		case 17 : cursor = 0x65; break;
 800153a:	2365      	movs	r3, #101	@ 0x65
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e005      	b.n	800154c <LCD_setCursor+0x390>
		case 18 : cursor = 0x66; break;
 8001540:	2366      	movs	r3, #102	@ 0x66
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e002      	b.n	800154c <LCD_setCursor+0x390>
		case 19 : cursor = 0x67; break;
 8001546:	2367      	movs	r3, #103	@ 0x67
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	bf00      	nop
		} break;
 800154c:	e005      	b.n	800155a <LCD_setCursor+0x39e>
		} break;
 800154e:	bf00      	nop
 8001550:	e004      	b.n	800155c <LCD_setCursor+0x3a0>
		} break;
 8001552:	bf00      	nop
 8001554:	e002      	b.n	800155c <LCD_setCursor+0x3a0>
		} break;
 8001556:	bf00      	nop
 8001558:	e000      	b.n	800155c <LCD_setCursor+0x3a0>
		} break;
 800155a:	bf00      	nop
	}
	LCD_sendCMD(0x80|cursor);
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd57 	bl	8001018 <LCD_sendCMD>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0000      	movs	r0, r0
	...

08001578 <ondaseno>:
void actualizarFrecuencia(void);

void recalcularOndas(void);

void ondaseno()
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	for (int x = 0; x < 100; x++)
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	e04a      	b.n	800161a <ondaseno+0xa2>
	    {
	        onda_seno[x] = ((sin(x * 2 * PI / 100) + 1) * (amplitud * 4096 / 2));// formula calculo onda senoidal
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffeb 	bl	8000564 <__aeabi_i2d>
 800158e:	a32d      	add	r3, pc, #180	@ (adr r3, 8001644 <ondaseno+0xcc>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f850 	bl	8000638 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <ondaseno+0xb8>)
 80015a6:	f7ff f971 	bl	800088c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	ec43 2b17 	vmov	d7, r2, r3
 80015b2:	eeb0 0a47 	vmov.f32	s0, s14
 80015b6:	eef0 0a67 	vmov.f32	s1, s15
 80015ba:	f00b f939 	bl	800c830 <sin>
 80015be:	ec51 0b10 	vmov	r0, r1, d0
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <ondaseno+0xbc>)
 80015c8:	f7fe fe80 	bl	80002cc <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4614      	mov	r4, r2
 80015d2:	461d      	mov	r5, r3
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <ondaseno+0xc0>)
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800163c <ondaseno+0xc4>
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80015e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ea:	ee16 0a90 	vmov	r0, s13
 80015ee:	f7fe ffcb 	bl	8000588 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7ff f81d 	bl	8000638 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fad9 	bl	8000bbc <__aeabi_d2uiz>
 800160a:	4602      	mov	r2, r0
 800160c:	490c      	ldr	r1, [pc, #48]	@ (8001640 <ondaseno+0xc8>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int x = 0; x < 100; x++)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b63      	cmp	r3, #99	@ 0x63
 800161e:	ddb1      	ble.n	8001584 <ondaseno+0xc>
	    }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
 8001630:	40590000 	.word	0x40590000
 8001634:	3ff00000 	.word	0x3ff00000
 8001638:	20000000 	.word	0x20000000
 800163c:	45800000 	.word	0x45800000
 8001640:	20000bb4 	.word	0x20000bb4
 8001644:	4d12d84a 	.word	0x4d12d84a
 8001648:	400921fb 	.word	0x400921fb

0800164c <ondasierra>:

void ondasierra()
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
	for (int y = 0; y < 100; y++)
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	e01c      	b.n	8001692 <ondasierra+0x46>
	    {
	        onda_sierra[y] = (y * (amplitud*4096 / 100)); // calculo onda sierra
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <ondasierra+0x5c>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80016ac <ondasierra+0x60>
 800166c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001670:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 80016b0 <ondasierra+0x64>
 8001674:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001680:	ee17 1a90 	vmov	r1, s15
 8001684:	4a0b      	ldr	r2, [pc, #44]	@ (80016b4 <ondasierra+0x68>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int y = 0; y < 100; y++)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3301      	adds	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b63      	cmp	r3, #99	@ 0x63
 8001696:	dddf      	ble.n	8001658 <ondasierra+0xc>
	    }

}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000000 	.word	0x20000000
 80016ac:	45800000 	.word	0x45800000
 80016b0:	42c80000 	.word	0x42c80000
 80016b4:	20000d44 	.word	0x20000d44

080016b8 <ondacuadrada>:

void ondacuadrada()
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0

    for (int i = 0; i < 100; i++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	e01a      	b.n	80016fa <ondacuadrada+0x42>
        if (i < 50) { // Primeros 50 puntos: nivel alto
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b31      	cmp	r3, #49	@ 0x31
 80016c8:	dc0f      	bgt.n	80016ea <ondacuadrada+0x32>
            onda_cuadrada[i] = amplitud * 4096; // Nivel alto (ajusta la amplitud)
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <ondacuadrada+0x58>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001714 <ondacuadrada+0x5c>
 80016d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	ee17 1a90 	vmov	r1, s15
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <ondacuadrada+0x60>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80016e8:	e004      	b.n	80016f4 <ondacuadrada+0x3c>
        } else { // Últimos 50 puntos: nivel bajo
            onda_cuadrada[i] = 0; // Nivel bajo
 80016ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <ondacuadrada+0x60>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2100      	movs	r1, #0
 80016f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 100; i++) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b63      	cmp	r3, #99	@ 0x63
 80016fe:	dde1      	ble.n	80016c4 <ondacuadrada+0xc>
        }
    }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000000 	.word	0x20000000
 8001714:	45800000 	.word	0x45800000
 8001718:	20000ed4 	.word	0x20000ed4

0800171c <ondatriangular>:

void ondatriangular() {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
    for (int i = 0; i < 100; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	e03c      	b.n	80017a2 <ondatriangular+0x86>
        if (i < 50) { // Parte ascendente
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b31      	cmp	r3, #49	@ 0x31
 800172c:	dc1a      	bgt.n	8001764 <ondatriangular+0x48>
            onda_triangular[i] = (i * (amplitud * 4096 / 50));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <ondatriangular+0x9c>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80017bc <ondatriangular+0xa0>
 8001742:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001746:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 80017c0 <ondatriangular+0xa4>
 800174a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001756:	ee17 1a90 	vmov	r1, s15
 800175a:	4a1a      	ldr	r2, [pc, #104]	@ (80017c4 <ondatriangular+0xa8>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001762:	e01b      	b.n	800179c <ondatriangular+0x80>
        } else { // Parte descendente
            onda_triangular[i] = ((100 - i) * (amplitud * 4096 / 50));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <ondatriangular+0x9c>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80017bc <ondatriangular+0xa0>
 800177c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001780:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 80017c0 <ondatriangular+0xa4>
 8001784:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001790:	ee17 1a90 	vmov	r1, s15
 8001794:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <ondatriangular+0xa8>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 100; i++) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b63      	cmp	r3, #99	@ 0x63
 80017a6:	ddbf      	ble.n	8001728 <ondatriangular+0xc>
        }
    }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000000 	.word	0x20000000
 80017bc:	45800000 	.word	0x45800000
 80017c0:	42480000 	.word	0x42480000
 80017c4:	20001064 	.word	0x20001064

080017c8 <enviar>:

void enviar(uint32_t valor){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

	 char buffer[20];
	    sprintf(buffer, "%lu\r\n", valor);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	490b      	ldr	r1, [pc, #44]	@ (8001804 <enviar+0x3c>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f008 ff3b 	bl	800a654 <siprintf>

	    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fd0e 	bl	8000204 <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f107 010c 	add.w	r1, r7, #12
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <enviar+0x40>)
 80017f6:	f006 fd53 	bl	80082a0 <HAL_UART_Transmit>
}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	0800d8a8 	.word	0x0800d8a8
 8001808:	200005c8 	.word	0x200005c8

0800180c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <HAL_UART_RxCpltCallback+0x40>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d113      	bne.n	8001844 <HAL_UART_RxCpltCallback+0x38>
        if (rxIndex4 < sizeof(rxBuffer4) - 1) {
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <HAL_UART_RxCpltCallback+0x44>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b30      	cmp	r3, #48	@ 0x30
 8001822:	d80a      	bhi.n	800183a <HAL_UART_RxCpltCallback+0x2e>
            rxBuffer4[rxIndex4++] = rxData4;
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <HAL_UART_RxCpltCallback+0x44>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	b2d1      	uxtb	r1, r2
 800182c:	4a08      	ldr	r2, [pc, #32]	@ (8001850 <HAL_UART_RxCpltCallback+0x44>)
 800182e:	7011      	strb	r1, [r2, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_UART_RxCpltCallback+0x48>)
 8001834:	7819      	ldrb	r1, [r3, #0]
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_UART_RxCpltCallback+0x4c>)
 8001838:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(&huart4, &rxData4, 1); // Recibir el siguiente byte
 800183a:	2201      	movs	r2, #1
 800183c:	4905      	ldr	r1, [pc, #20]	@ (8001854 <HAL_UART_RxCpltCallback+0x48>)
 800183e:	4803      	ldr	r0, [pc, #12]	@ (800184c <HAL_UART_RxCpltCallback+0x40>)
 8001840:	f006 fdb9 	bl	80083b6 <HAL_UART_Receive_IT>
    }
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000580 	.word	0x20000580
 8001850:	20001226 	.word	0x20001226
 8001854:	20001227 	.word	0x20001227
 8001858:	200011f4 	.word	0x200011f4

0800185c <processBluetoothCommand>:

void processBluetoothCommand() {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    if (rxIndex4 > 0) {
 8001860:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <processBluetoothCommand+0xd8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d063      	beq.n	8001930 <processBluetoothCommand+0xd4>
        rxBuffer4[rxIndex4] = '\0';
 8001868:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <processBluetoothCommand+0xd8>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <processBluetoothCommand+0xdc>)
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]
        if (strcmp((char *)rxBuffer4, "SEN") == 0) {
 8001874:	4931      	ldr	r1, [pc, #196]	@ (800193c <processBluetoothCommand+0xe0>)
 8001876:	4830      	ldr	r0, [pc, #192]	@ (8001938 <processBluetoothCommand+0xdc>)
 8001878:	f7fe fcba 	bl	80001f0 <strcmp>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <processBluetoothCommand+0x2e>
            cuenta = 1;
 8001882:	4b2f      	ldr	r3, [pc, #188]	@ (8001940 <processBluetoothCommand+0xe4>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e04f      	b.n	800192a <processBluetoothCommand+0xce>
        } else if (strcmp((char *)rxBuffer4, "SIE") == 0) {
 800188a:	492e      	ldr	r1, [pc, #184]	@ (8001944 <processBluetoothCommand+0xe8>)
 800188c:	482a      	ldr	r0, [pc, #168]	@ (8001938 <processBluetoothCommand+0xdc>)
 800188e:	f7fe fcaf 	bl	80001f0 <strcmp>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <processBluetoothCommand+0x44>
            cuenta = 2;
 8001898:	4b29      	ldr	r3, [pc, #164]	@ (8001940 <processBluetoothCommand+0xe4>)
 800189a:	2202      	movs	r2, #2
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e044      	b.n	800192a <processBluetoothCommand+0xce>
        } else if (strcmp((char *)rxBuffer4, "CUA") == 0) {
 80018a0:	4929      	ldr	r1, [pc, #164]	@ (8001948 <processBluetoothCommand+0xec>)
 80018a2:	4825      	ldr	r0, [pc, #148]	@ (8001938 <processBluetoothCommand+0xdc>)
 80018a4:	f7fe fca4 	bl	80001f0 <strcmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <processBluetoothCommand+0x5a>
            cuenta = 3;
 80018ae:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <processBluetoothCommand+0xe4>)
 80018b0:	2203      	movs	r2, #3
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e039      	b.n	800192a <processBluetoothCommand+0xce>
        } else if (strcmp((char *)rxBuffer4, "TRI") == 0) {
 80018b6:	4925      	ldr	r1, [pc, #148]	@ (800194c <processBluetoothCommand+0xf0>)
 80018b8:	481f      	ldr	r0, [pc, #124]	@ (8001938 <processBluetoothCommand+0xdc>)
 80018ba:	f7fe fc99 	bl	80001f0 <strcmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d103      	bne.n	80018cc <processBluetoothCommand+0x70>
            cuenta = 4;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <processBluetoothCommand+0xe4>)
 80018c6:	2204      	movs	r2, #4
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e02e      	b.n	800192a <processBluetoothCommand+0xce>
        } else if (strncmp((char *)rxBuffer4, "FREQ=", 5) == 0) {
 80018cc:	2205      	movs	r2, #5
 80018ce:	4920      	ldr	r1, [pc, #128]	@ (8001950 <processBluetoothCommand+0xf4>)
 80018d0:	4819      	ldr	r0, [pc, #100]	@ (8001938 <processBluetoothCommand+0xdc>)
 80018d2:	f008 ff2a 	bl	800a72a <strncmp>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10f      	bne.n	80018fc <processBluetoothCommand+0xa0>
            frecuenciaDeseada = atof((char *)rxBuffer4 + 5);
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <processBluetoothCommand+0xf8>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f007 ffe3 	bl	80098aa <atof>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f986 	bl	8000bfc <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <processBluetoothCommand+0xfc>)
 80018f4:	6013      	str	r3, [r2, #0]
            actualizarFrecuencia(); // Actualizar la frecuencia en el LCD
 80018f6:	f000 f837 	bl	8001968 <actualizarFrecuencia>
 80018fa:	e016      	b.n	800192a <processBluetoothCommand+0xce>
        } else if (strncmp((char *)rxBuffer4, "AMP=", 4) == 0) {
 80018fc:	2204      	movs	r2, #4
 80018fe:	4917      	ldr	r1, [pc, #92]	@ (800195c <processBluetoothCommand+0x100>)
 8001900:	480d      	ldr	r0, [pc, #52]	@ (8001938 <processBluetoothCommand+0xdc>)
 8001902:	f008 ff12 	bl	800a72a <strncmp>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10e      	bne.n	800192a <processBluetoothCommand+0xce>
            amplitud = atof((char *)rxBuffer4 + 4);
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <processBluetoothCommand+0x104>)
 800190e:	4618      	mov	r0, r3
 8001910:	f007 ffcb 	bl	80098aa <atof>
 8001914:	ec53 2b10 	vmov	r2, r3, d0
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f96e 	bl	8000bfc <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <processBluetoothCommand+0x108>)
 8001924:	6013      	str	r3, [r2, #0]
            recalcularOndas();
 8001926:	f000 f88b 	bl	8001a40 <recalcularOndas>
        }
        rxIndex4 = 0;
 800192a:	4b02      	ldr	r3, [pc, #8]	@ (8001934 <processBluetoothCommand+0xd8>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    }
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20001226 	.word	0x20001226
 8001938:	200011f4 	.word	0x200011f4
 800193c:	0800d8b0 	.word	0x0800d8b0
 8001940:	20000008 	.word	0x20000008
 8001944:	0800d8b4 	.word	0x0800d8b4
 8001948:	0800d8b8 	.word	0x0800d8b8
 800194c:	0800d8bc 	.word	0x0800d8bc
 8001950:	0800d8c0 	.word	0x0800d8c0
 8001954:	200011f9 	.word	0x200011f9
 8001958:	20000004 	.word	0x20000004
 800195c:	0800d8c8 	.word	0x0800d8c8
 8001960:	200011f8 	.word	0x200011f8
 8001964:	20000000 	.word	0x20000000

08001968 <actualizarFrecuencia>:

void actualizarFrecuencia(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
   HAL_TIM_Base_Stop(&htim2);
 800196e:	482d      	ldr	r0, [pc, #180]	@ (8001a24 <actualizarFrecuencia+0xbc>)
 8001970:	f006 f996 	bl	8007ca0 <HAL_TIM_Base_Stop>

uint32_t periodo = 168000000 / frecuenciaDeseada / 100;
 8001974:	4b2c      	ldr	r3, [pc, #176]	@ (8001a28 <actualizarFrecuencia+0xc0>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001a2c <actualizarFrecuencia+0xc4>
 800197e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001982:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001a30 <actualizarFrecuencia+0xc8>
 8001986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198e:	ee17 3a90 	vmov	r3, s15
 8001992:	617b      	str	r3, [r7, #20]
htim2.Init.Period = periodo;
 8001994:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <actualizarFrecuencia+0xbc>)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	60d3      	str	r3, [r2, #12]
htim2.Init.Prescaler = 0;
 800199a:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <actualizarFrecuencia+0xbc>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80019a0:	4820      	ldr	r0, [pc, #128]	@ (8001a24 <actualizarFrecuencia+0xbc>)
 80019a2:	f006 f8c5 	bl	8007b30 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <actualizarFrecuencia+0x48>
        Error_Handler();
 80019ac:	f000 fcca 	bl	8002344 <Error_Handler>
    }
  HAL_TIM_Base_Start(&htim2);
 80019b0:	481c      	ldr	r0, [pc, #112]	@ (8001a24 <actualizarFrecuencia+0xbc>)
 80019b2:	f006 f90d 	bl	8007bd0 <HAL_TIM_Base_Start>


  LCD_setCursor(1, 0);
 80019b6:	2100      	movs	r1, #0
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fbff 	bl	80011bc <LCD_setCursor>
  LCD_sendSTR("                ");
 80019be:	481d      	ldr	r0, [pc, #116]	@ (8001a34 <actualizarFrecuencia+0xcc>)
 80019c0:	f7ff fbe6 	bl	8001190 <LCD_sendSTR>
  LCD_setCursor(1, 0);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff fbf8 	bl	80011bc <LCD_setCursor>
  LCD_sendSTR("Freq: ");
 80019cc:	481a      	ldr	r0, [pc, #104]	@ (8001a38 <actualizarFrecuencia+0xd0>)
 80019ce:	f7ff fbdf 	bl	8001190 <LCD_sendSTR>

  int frecuenciaEntera = (int)frecuenciaDeseada;
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <actualizarFrecuencia+0xc0>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019dc:	ee17 3a90 	vmov	r3, s15
 80019e0:	613b      	str	r3, [r7, #16]
  int decimal = (int)((frecuenciaDeseada - frecuenciaEntera) * 10);
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <actualizarFrecuencia+0xc0>)
 80019e4:	ed93 7a00 	vldr	s14, [r3]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a02:	ee17 3a90 	vmov	r3, s15
 8001a06:	60fb      	str	r3, [r7, #12]

  char buffer[10];
  sprintf(buffer, "%d.%d Hz", frecuenciaEntera, decimal);
 8001a08:	4638      	mov	r0, r7
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	490b      	ldr	r1, [pc, #44]	@ (8001a3c <actualizarFrecuencia+0xd4>)
 8001a10:	f008 fe20 	bl	800a654 <siprintf>

  LCD_sendSTR(buffer);
 8001a14:	463b      	mov	r3, r7
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fbba 	bl	8001190 <LCD_sendSTR>
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000538 	.word	0x20000538
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	4d2037a0 	.word	0x4d2037a0
 8001a30:	42c80000 	.word	0x42c80000
 8001a34:	0800d8d0 	.word	0x0800d8d0
 8001a38:	0800d8e4 	.word	0x0800d8e4
 8001a3c:	0800d8ec 	.word	0x0800d8ec

08001a40 <recalcularOndas>:

void recalcularOndas() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  ondaseno();
 8001a44:	f7ff fd98 	bl	8001578 <ondaseno>
  ondasierra();
 8001a48:	f7ff fe00 	bl	800164c <ondasierra>
  ondacuadrada();
 8001a4c:	f7ff fe34 	bl	80016b8 <ondacuadrada>
  ondatriangular();
 8001a50:	f7ff fe64 	bl	800171c <ondatriangular>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b098      	sub	sp, #96	@ 0x60
 8001a5c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  HAL_UART_Receive_IT(&huart4, &rxData4, 1); // Habilitar interrupciones de recepción UART4
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4996      	ldr	r1, [pc, #600]	@ (8001cbc <main+0x264>)
 8001a62:	4897      	ldr	r0, [pc, #604]	@ (8001cc0 <main+0x268>)
 8001a64:	f006 fca7 	bl	80083b6 <HAL_UART_Receive_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a68:	f001 f994 	bl	8002d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6c:	f000 f94a 	bl	8001d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a70:	f000 fbba 	bl	80021e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a74:	f000 fb88 	bl	8002188 <MX_DMA_Init>
  MX_ETH_Init();
 8001a78:	f000 fa2a 	bl	8001ed0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001a7c:	f000 fb2c 	bl	80020d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a80:	f000 fb54 	bl	800212c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001a84:	f000 f9a8 	bl	8001dd8 <MX_ADC1_Init>
  MX_DAC_Init();
 8001a88:	f000 f9f8 	bl	8001e7c <MX_DAC_Init>
  MX_TIM2_Init();
 8001a8c:	f000 faae 	bl	8001fec <MX_TIM2_Init>
  MX_I2C1_Init();
 8001a90:	f000 fa6c 	bl	8001f6c <MX_I2C1_Init>
  MX_UART4_Init();
 8001a94:	f000 faf6 	bl	8002084 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart4, &rxData4, 1); // Habilitar interrupciones de recepción UART4
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4988      	ldr	r1, [pc, #544]	@ (8001cbc <main+0x264>)
 8001a9c:	4888      	ldr	r0, [pc, #544]	@ (8001cc0 <main+0x268>)
 8001a9e:	f006 fc8a 	bl	80083b6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim2);
 8001aa2:	4888      	ldr	r0, [pc, #544]	@ (8001cc4 <main+0x26c>)
 8001aa4:	f006 f894 	bl	8007bd0 <HAL_TIM_Base_Start>
  LCD_initID(0x4E); //I2C Address
 8001aa8:	204e      	movs	r0, #78	@ 0x4e
 8001aaa:	f7ff faa5 	bl	8000ff8 <LCD_initID>
  LCD_Init();	//Initialization
 8001aae:	f7ff fb32 	bl	8001116 <LCD_Init>

  debounceInit(GPIOC, USER_Btn_Pin);
 8001ab2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ab6:	4884      	ldr	r0, [pc, #528]	@ (8001cc8 <main+0x270>)
 8001ab8:	f001 f920 	bl	8002cfc <debounceInit>
  ondaseno();
 8001abc:	f7ff fd5c 	bl	8001578 <ondaseno>
  ondasierra();
 8001ac0:	f7ff fdc4 	bl	800164c <ondasierra>
  ondacuadrada();
 8001ac4:	f7ff fdf8 	bl	80016b8 <ondacuadrada>
  ondatriangular();
 8001ac8:	f7ff fe28 	bl	800171c <ondatriangular>
  actualizarFrecuencia();
 8001acc:	f7ff ff4c 	bl	8001968 <actualizarFrecuencia>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,onda_seno, 100, DAC_ALIGN_12B_R);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2364      	movs	r3, #100	@ 0x64
 8001ad6:	4a7d      	ldr	r2, [pc, #500]	@ (8001ccc <main+0x274>)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	487d      	ldr	r0, [pc, #500]	@ (8001cd0 <main+0x278>)
 8001adc:	f001 fd96 	bl	800360c <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,onda_sierra, 100, DAC_ALIGN_12B_R);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2364      	movs	r3, #100	@ 0x64
 8001ae6:	4a7b      	ldr	r2, [pc, #492]	@ (8001cd4 <main+0x27c>)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4879      	ldr	r0, [pc, #484]	@ (8001cd0 <main+0x278>)
 8001aec:	f001 fd8e 	bl	800360c <HAL_DAC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  processBluetoothCommand(); // Actualiza el estado del botón
 8001af0:	f7ff feb4 	bl	800185c <processBluetoothCommand>

	 if (readKey()) { // Verifica si el botón fue presionado
 8001af4:	f001 f936 	bl	8002d64 <readKey>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d041      	beq.n	8001b82 <main+0x12a>
	 	         cuenta++;
 8001afe:	4b76      	ldr	r3, [pc, #472]	@ (8001cd8 <main+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	4a74      	ldr	r2, [pc, #464]	@ (8001cd8 <main+0x280>)
 8001b06:	6013      	str	r3, [r2, #0]
	 if (cuenta > 4) { // Cambiado a 2 porque solo tienes dos formas de onda (seno y sierra)
 8001b08:	4b73      	ldr	r3, [pc, #460]	@ (8001cd8 <main+0x280>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	dd02      	ble.n	8001b16 <main+0xbe>
	 	         cuenta = 1;
 8001b10:	4b71      	ldr	r3, [pc, #452]	@ (8001cd8 <main+0x280>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
	 	              }
	 	        char buffer[50];
	 	        sprintf(buffer, "Boton presionado, cuenta: %d\r\n", cuenta);
 8001b16:	4b70      	ldr	r3, [pc, #448]	@ (8001cd8 <main+0x280>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	496f      	ldr	r1, [pc, #444]	@ (8001cdc <main+0x284>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f008 fd98 	bl	800a654 <siprintf>
	 	        HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b24:	463b      	mov	r3, r7
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fb6c 	bl	8000204 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4639      	mov	r1, r7
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	486a      	ldr	r0, [pc, #424]	@ (8001ce0 <main+0x288>)
 8001b38:	f006 fbb2 	bl	80082a0 <HAL_UART_Transmit>
	 	        HAL_UART_Transmit(&huart4, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fb60 	bl	8000204 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	4639      	mov	r1, r7
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	485c      	ldr	r0, [pc, #368]	@ (8001cc0 <main+0x268>)
 8001b50:	f006 fba6 	bl	80082a0 <HAL_UART_Transmit>

	 	        LCD_setCursor(0, 1); // Establecer el cursor en la segunda línea
 8001b54:	2101      	movs	r1, #1
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff fb30 	bl	80011bc <LCD_setCursor>
	 	        LCD_Clear(); // Limpiar solo la segunda línea (si es posible con tu librería)
 8001b5c:	f7ff fac4 	bl	80010e8 <LCD_Clear>
	 	        char debugMsg[20];
	 	        sprintf(debugMsg, "Cuenta: %d", cuenta);
 8001b60:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd8 <main+0x280>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b68:	495e      	ldr	r1, [pc, #376]	@ (8001ce4 <main+0x28c>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f008 fd72 	bl	800a654 <siprintf>
	 	        LCD_setCursor(0, 1); // Segunda línea del LCD
 8001b70:	2101      	movs	r1, #1
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff fb22 	bl	80011bc <LCD_setCursor>
	 	        LCD_sendSTR(debugMsg);
 8001b78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fb07 	bl	8001190 <LCD_sendSTR>
	 	  }
	 	         LCD_Clear(); // Limpiar la pantalla antes de seleccionar la onda
 8001b82:	f7ff fab1 	bl	80010e8 <LCD_Clear>
	 switch (cuenta) {
 8001b86:	4b54      	ldr	r3, [pc, #336]	@ (8001cd8 <main+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	f200 808f 	bhi.w	8001cb0 <main+0x258>
 8001b92:	a201      	add	r2, pc, #4	@ (adr r2, 8001b98 <main+0x140>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001beb 	.word	0x08001beb
 8001ba0:	08001c2d 	.word	0x08001c2d
 8001ba4:	08001c6f 	.word	0x08001c6f

	 case 1: // Onda senoidal
	 	 	      for (int i = 0; i < 100; i++) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bac:	e019      	b.n	8001be2 <main+0x18a>
	 	 	      DAC->DHR12R1 = onda_seno[i];
 8001bae:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce8 <main+0x290>)
 8001bb0:	4946      	ldr	r1, [pc, #280]	@ (8001ccc <main+0x274>)
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bb8:	6093      	str	r3, [r2, #8]
	 	 	      HAL_Delay(8);
 8001bba:	2008      	movs	r0, #8
 8001bbc:	f001 f95c 	bl	8002e78 <HAL_Delay>
	 	 	      enviar(onda_seno[i]);
 8001bc0:	4a42      	ldr	r2, [pc, #264]	@ (8001ccc <main+0x274>)
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fdfd 	bl	80017c8 <enviar>

	 	 		  LCD_setCursor(0,3);
 8001bce:	2103      	movs	r1, #3
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff faf3 	bl	80011bc <LCD_setCursor>
	 	 		  LCD_sendSTR("Onda Seno ");
 8001bd6:	4845      	ldr	r0, [pc, #276]	@ (8001cec <main+0x294>)
 8001bd8:	f7ff fada 	bl	8001190 <LCD_sendSTR>
	 	 	      for (int i = 0; i < 100; i++) {
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	3301      	adds	r3, #1
 8001be0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be4:	2b63      	cmp	r3, #99	@ 0x63
 8001be6:	dde2      	ble.n	8001bae <main+0x156>
	 	  }
	 	 	   break;
 8001be8:	e066      	b.n	8001cb8 <main+0x260>

	 case 2: // Onda sierra
	 	 	      for (int i = 0; i < 100; i++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bee:	e019      	b.n	8001c24 <main+0x1cc>
	 	 	      DAC->DHR12R1 = onda_sierra[i];
 8001bf0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce8 <main+0x290>)
 8001bf2:	4938      	ldr	r1, [pc, #224]	@ (8001cd4 <main+0x27c>)
 8001bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bfa:	6093      	str	r3, [r2, #8]
	 	 	      HAL_Delay(8);
 8001bfc:	2008      	movs	r0, #8
 8001bfe:	f001 f93b 	bl	8002e78 <HAL_Delay>
	 	 	      enviar(onda_sierra[i]);
 8001c02:	4a34      	ldr	r2, [pc, #208]	@ (8001cd4 <main+0x27c>)
 8001c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fddc 	bl	80017c8 <enviar>

	 	 	      LCD_setCursor(0,2);
 8001c10:	2102      	movs	r1, #2
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fad2 	bl	80011bc <LCD_setCursor>
	 	 	      LCD_sendSTR("Onda sierra ");
 8001c18:	4835      	ldr	r0, [pc, #212]	@ (8001cf0 <main+0x298>)
 8001c1a:	f7ff fab9 	bl	8001190 <LCD_sendSTR>
	 	 	      for (int i = 0; i < 100; i++) {
 8001c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c20:	3301      	adds	r3, #1
 8001c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c26:	2b63      	cmp	r3, #99	@ 0x63
 8001c28:	dde2      	ble.n	8001bf0 <main+0x198>
	 	   }
	 	 	  break;
 8001c2a:	e045      	b.n	8001cb8 <main+0x260>

	 case 3: // Onda cuadrada
	 	 	 for (int i = 0; i < 100; i++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c30:	e019      	b.n	8001c66 <main+0x20e>
	 	 	     DAC->DHR12R1 = onda_cuadrada[i];
 8001c32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce8 <main+0x290>)
 8001c34:	492f      	ldr	r1, [pc, #188]	@ (8001cf4 <main+0x29c>)
 8001c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c3c:	6093      	str	r3, [r2, #8]
	 	 	     HAL_Delay(8);
 8001c3e:	2008      	movs	r0, #8
 8001c40:	f001 f91a 	bl	8002e78 <HAL_Delay>
	 	 	     enviar(onda_cuadrada[i]);
 8001c44:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf4 <main+0x29c>)
 8001c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fdbb 	bl	80017c8 <enviar>

	 	 	     LCD_setCursor(0,1);
 8001c52:	2101      	movs	r1, #1
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fab1 	bl	80011bc <LCD_setCursor>
	 	 	     LCD_sendSTR("Onda cuadrada ");
 8001c5a:	4827      	ldr	r0, [pc, #156]	@ (8001cf8 <main+0x2a0>)
 8001c5c:	f7ff fa98 	bl	8001190 <LCD_sendSTR>
	 	 	 for (int i = 0; i < 100; i++) {
 8001c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c62:	3301      	adds	r3, #1
 8001c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c68:	2b63      	cmp	r3, #99	@ 0x63
 8001c6a:	dde2      	ble.n	8001c32 <main+0x1da>
	 	   }
	 	 	 break;
 8001c6c:	e024      	b.n	8001cb8 <main+0x260>
	 case 4: // Onda triangular
	 	 	 for (int i = 0; i < 100; i++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c72:	e019      	b.n	8001ca8 <main+0x250>
	 	 	     DAC->DHR12R1 = onda_triangular[i];
 8001c74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce8 <main+0x290>)
 8001c76:	4921      	ldr	r1, [pc, #132]	@ (8001cfc <main+0x2a4>)
 8001c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c7e:	6093      	str	r3, [r2, #8]
	 	 	     HAL_Delay(8);
 8001c80:	2008      	movs	r0, #8
 8001c82:	f001 f8f9 	bl	8002e78 <HAL_Delay>
	 	 	     enviar(onda_triangular[i]);
 8001c86:	4a1d      	ldr	r2, [pc, #116]	@ (8001cfc <main+0x2a4>)
 8001c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fd9a 	bl	80017c8 <enviar>

	 	 	     LCD_setCursor(0,1);
 8001c94:	2101      	movs	r1, #1
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff fa90 	bl	80011bc <LCD_setCursor>
	 	 	     LCD_sendSTR("Onda triangular ");
 8001c9c:	4818      	ldr	r0, [pc, #96]	@ (8001d00 <main+0x2a8>)
 8001c9e:	f7ff fa77 	bl	8001190 <LCD_sendSTR>
	 	 	 for (int i = 0; i < 100; i++) {
 8001ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001caa:	2b63      	cmp	r3, #99	@ 0x63
 8001cac:	dde2      	ble.n	8001c74 <main+0x21c>
	 	    }
	 	 	break;
 8001cae:	e003      	b.n	8001cb8 <main+0x260>

	 	 	default:

	 	 	cuenta = 1;   // En caso de un valor inesperado, reinicia la cuenta
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <main+0x280>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
	 	    break;
 8001cb6:	bf00      	nop
  processBluetoothCommand(); // Actualiza el estado del botón
 8001cb8:	e71a      	b.n	8001af0 <main+0x98>
 8001cba:	bf00      	nop
 8001cbc:	20001227 	.word	0x20001227
 8001cc0:	20000580 	.word	0x20000580
 8001cc4:	20000538 	.word	0x20000538
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	20000bb4 	.word	0x20000bb4
 8001cd0:	200003c0 	.word	0x200003c0
 8001cd4:	20000d44 	.word	0x20000d44
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	0800d8f8 	.word	0x0800d8f8
 8001ce0:	200005c8 	.word	0x200005c8
 8001ce4:	0800d918 	.word	0x0800d918
 8001ce8:	40007400 	.word	0x40007400
 8001cec:	0800d924 	.word	0x0800d924
 8001cf0:	0800d930 	.word	0x0800d930
 8001cf4:	20000ed4 	.word	0x20000ed4
 8001cf8:	0800d940 	.word	0x0800d940
 8001cfc:	20001064 	.word	0x20001064
 8001d00:	0800d950 	.word	0x0800d950

08001d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b094      	sub	sp, #80	@ 0x50
 8001d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	f107 0320 	add.w	r3, r7, #32
 8001d0e:	2230      	movs	r2, #48	@ 0x30
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f008 fd01 	bl	800a71a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <SystemClock_Config+0xcc>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	4a27      	ldr	r2, [pc, #156]	@ (8001dd0 <SystemClock_Config+0xcc>)
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d38:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <SystemClock_Config+0xcc>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <SystemClock_Config+0xd0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	@ (8001dd4 <SystemClock_Config+0xd0>)
 8001d4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <SystemClock_Config+0xd0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d64:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d74:	2304      	movs	r3, #4
 8001d76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d78:	23a8      	movs	r3, #168	@ 0xa8
 8001d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d80:	2307      	movs	r3, #7
 8001d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 fa39 	bl	8007200 <HAL_RCC_OscConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d94:	f000 fad6 	bl	8002344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d98:	230f      	movs	r3, #15
 8001d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001da4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2105      	movs	r1, #5
 8001db6:	4618      	mov	r0, r3
 8001db8:	f005 fc9a 	bl	80076f0 <HAL_RCC_ClockConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dc2:	f000 fabf 	bl	8002344 <Error_Handler>
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3750      	adds	r7, #80	@ 0x50
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40007000 	.word	0x40007000

08001dd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001dec:	4a21      	ldr	r2, [pc, #132]	@ (8001e74 <MX_ADC1_Init+0x9c>)
 8001dee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001df2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001df6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e18:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <MX_ADC1_Init+0xa0>)
 8001e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e24:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e38:	480d      	ldr	r0, [pc, #52]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e3a:	f001 f841 	bl	8002ec0 <HAL_ADC_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e44:	f000 fa7e 	bl	8002344 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e54:	463b      	mov	r3, r7
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e5a:	f001 f875 	bl	8002f48 <HAL_ADC_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e64:	f000 fa6e 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000378 	.word	0x20000378
 8001e74:	40012000 	.word	0x40012000
 8001e78:	0f000001 	.word	0x0f000001

08001e7c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001e82:	463b      	mov	r3, r7
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <MX_DAC_Init+0x4c>)
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ecc <MX_DAC_Init+0x50>)
 8001e8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001e90:	480d      	ldr	r0, [pc, #52]	@ (8001ec8 <MX_DAC_Init+0x4c>)
 8001e92:	f001 fb98 	bl	80035c6 <HAL_DAC_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001e9c:	f000 fa52 	bl	8002344 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001ea0:	2324      	movs	r3, #36	@ 0x24
 8001ea2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	@ (8001ec8 <MX_DAC_Init+0x4c>)
 8001eb0:	f001 fc8c 	bl	80037cc <HAL_DAC_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001eba:	f000 fa43 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200003c0 	.word	0x200003c0
 8001ecc:	40007400 	.word	0x40007400

08001ed0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <MX_ETH_Init+0x84>)
 8001ed6:	4a20      	ldr	r2, [pc, #128]	@ (8001f58 <MX_ETH_Init+0x88>)
 8001ed8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <MX_ETH_Init+0x8c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <MX_ETH_Init+0x8c>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <MX_ETH_Init+0x8c>)
 8001ee8:	22e1      	movs	r2, #225	@ 0xe1
 8001eea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <MX_ETH_Init+0x8c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <MX_ETH_Init+0x8c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ef8:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <MX_ETH_Init+0x8c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <MX_ETH_Init+0x84>)
 8001f00:	4a16      	ldr	r2, [pc, #88]	@ (8001f5c <MX_ETH_Init+0x8c>)
 8001f02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001f04:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <MX_ETH_Init+0x84>)
 8001f06:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f0a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_ETH_Init+0x84>)
 8001f0e:	4a14      	ldr	r2, [pc, #80]	@ (8001f60 <MX_ETH_Init+0x90>)
 8001f10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <MX_ETH_Init+0x84>)
 8001f14:	4a13      	ldr	r2, [pc, #76]	@ (8001f64 <MX_ETH_Init+0x94>)
 8001f16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f18:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_ETH_Init+0x84>)
 8001f1a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001f1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <MX_ETH_Init+0x84>)
 8001f22:	f002 f947 	bl	80041b4 <HAL_ETH_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001f2c:	f000 fa0a 	bl	8002344 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001f30:	2238      	movs	r2, #56	@ 0x38
 8001f32:	2100      	movs	r1, #0
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <MX_ETH_Init+0x98>)
 8001f36:	f008 fbf0 	bl	800a71a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <MX_ETH_Init+0x98>)
 8001f3c:	2221      	movs	r2, #33	@ 0x21
 8001f3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_ETH_Init+0x98>)
 8001f42:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001f46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001f48:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <MX_ETH_Init+0x98>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000434 	.word	0x20000434
 8001f58:	40028000 	.word	0x40028000
 8001f5c:	20001228 	.word	0x20001228
 8001f60:	200002d8 	.word	0x200002d8
 8001f64:	20000238 	.word	0x20000238
 8001f68:	20000200 	.word	0x20000200

08001f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001f72:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe4 <MX_I2C1_Init+0x78>)
 8001f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <MX_I2C1_Init+0x7c>)
 8001f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f82:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f88:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001f8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa8:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001faa:	f002 fe19 	bl	8004be0 <HAL_I2C_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fb4:	f000 f9c6 	bl	8002344 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4809      	ldr	r0, [pc, #36]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001fbc:	f004 ff96 	bl	8006eec <HAL_I2CEx_ConfigAnalogFilter>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001fc6:	f000 f9bd 	bl	8002344 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_I2C1_Init+0x74>)
 8001fce:	f004 ffc9 	bl	8006f64 <HAL_I2CEx_ConfigDigitalFilter>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001fd8:	f000 f9b4 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200004e4 	.word	0x200004e4
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	000186a0 	.word	0x000186a0

08001fec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002008:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <MX_TIM2_Init+0x94>)
 800200a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800200e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <MX_TIM2_Init+0x94>)
 8002012:	2253      	movs	r2, #83	@ 0x53
 8002014:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <MX_TIM2_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800201c:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <MX_TIM2_Init+0x94>)
 800201e:	2264      	movs	r2, #100	@ 0x64
 8002020:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <MX_TIM2_Init+0x94>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <MX_TIM2_Init+0x94>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800202e:	4814      	ldr	r0, [pc, #80]	@ (8002080 <MX_TIM2_Init+0x94>)
 8002030:	f005 fd7e 	bl	8007b30 <HAL_TIM_Base_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800203a:	f000 f983 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	4619      	mov	r1, r3
 800204a:	480d      	ldr	r0, [pc, #52]	@ (8002080 <MX_TIM2_Init+0x94>)
 800204c:	f005 fe4f 	bl	8007cee <HAL_TIM_ConfigClockSource>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002056:	f000 f975 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800205a:	2320      	movs	r3, #32
 800205c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002062:	463b      	mov	r3, r7
 8002064:	4619      	mov	r1, r3
 8002066:	4806      	ldr	r0, [pc, #24]	@ (8002080 <MX_TIM2_Init+0x94>)
 8002068:	f006 f84e 	bl	8008108 <HAL_TIMEx_MasterConfigSynchronization>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002072:	f000 f967 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000538 	.word	0x20000538

08002084 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_UART4_Init+0x4c>)
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <MX_UART4_Init+0x50>)
 800208c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <MX_UART4_Init+0x4c>)
 8002090:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002094:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <MX_UART4_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <MX_UART4_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <MX_UART4_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <MX_UART4_Init+0x4c>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <MX_UART4_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <MX_UART4_Init+0x4c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <MX_UART4_Init+0x4c>)
 80020bc:	f006 f8a0 	bl	8008200 <HAL_UART_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80020c6:	f000 f93d 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000580 	.word	0x20000580
 80020d4:	40004c00 	.word	0x40004c00

080020d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 80020de:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <MX_USART3_UART_Init+0x50>)
 80020e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 80020e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 80020fe:	220c      	movs	r2, #12
 8002100:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800210e:	4805      	ldr	r0, [pc, #20]	@ (8002124 <MX_USART3_UART_Init+0x4c>)
 8002110:	f006 f876 	bl	8008200 <HAL_UART_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800211a:	f000 f913 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200005c8 	.word	0x200005c8
 8002128:	40004800 	.word	0x40004800

0800212c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002130:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002132:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002136:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800213a:	2204      	movs	r2, #4
 800213c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002140:	2202      	movs	r2, #2
 8002142:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002144:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800214c:	2202      	movs	r2, #2
 800214e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002152:	2201      	movs	r2, #1
 8002154:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002164:	2201      	movs	r2, #1
 8002166:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800216a:	2200      	movs	r2, #0
 800216c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002170:	f004 ff37 	bl	8006fe2 <HAL_PCD_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800217a:	f000 f8e3 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200006d0 	.word	0x200006d0

08002188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <MX_DMA_Init+0x5c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a13      	ldr	r2, [pc, #76]	@ (80021e4 <MX_DMA_Init+0x5c>)
 8002198:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <MX_DMA_Init+0x5c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	200d      	movs	r0, #13
 80021b0:	f001 f9d3 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021b4:	200d      	movs	r0, #13
 80021b6:	f001 f9ec 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	200f      	movs	r0, #15
 80021c0:	f001 f9cb 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021c4:	200f      	movs	r0, #15
 80021c6:	f001 f9e4 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2010      	movs	r0, #16
 80021d0:	f001 f9c3 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021d4:	2010      	movs	r0, #16
 80021d6:	f001 f9dc 	bl	8003592 <HAL_NVIC_EnableIRQ>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	@ 0x30
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	4b4c      	ldr	r3, [pc, #304]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a4b      	ldr	r2, [pc, #300]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b49      	ldr	r3, [pc, #292]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a44      	ldr	r2, [pc, #272]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b42      	ldr	r3, [pc, #264]	@ (8002334 <MX_GPIO_Init+0x14c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b3e      	ldr	r3, [pc, #248]	@ (8002334 <MX_GPIO_Init+0x14c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a3d      	ldr	r2, [pc, #244]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b37      	ldr	r3, [pc, #220]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a36      	ldr	r2, [pc, #216]	@ (8002334 <MX_GPIO_Init+0x14c>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a2f      	ldr	r2, [pc, #188]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a28      	ldr	r2, [pc, #160]	@ (8002334 <MX_GPIO_Init+0x14c>)
 8002294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <MX_GPIO_Init+0x14c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80022ac:	4822      	ldr	r0, [pc, #136]	@ (8002338 <MX_GPIO_Init+0x150>)
 80022ae:	f002 fc7d 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2140      	movs	r1, #64	@ 0x40
 80022b6:	4821      	ldr	r0, [pc, #132]	@ (800233c <MX_GPIO_Init+0x154>)
 80022b8:	f002 fc78 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	4619      	mov	r1, r3
 80022d2:	481b      	ldr	r0, [pc, #108]	@ (8002340 <MX_GPIO_Init+0x158>)
 80022d4:	f002 fabe 	bl	8004854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80022d8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80022dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	4811      	ldr	r0, [pc, #68]	@ (8002338 <MX_GPIO_Init+0x150>)
 80022f2:	f002 faaf 	bl	8004854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80022f6:	2340      	movs	r3, #64	@ 0x40
 80022f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fa:	2301      	movs	r3, #1
 80022fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	480b      	ldr	r0, [pc, #44]	@ (800233c <MX_GPIO_Init+0x154>)
 800230e:	f002 faa1 	bl	8004854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002312:	2380      	movs	r3, #128	@ 0x80
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	@ (800233c <MX_GPIO_Init+0x154>)
 8002326:	f002 fa95 	bl	8004854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800232a:	bf00      	nop
 800232c:	3730      	adds	r7, #48	@ 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	40020400 	.word	0x40020400
 800233c:	40021800 	.word	0x40021800
 8002340:	40020800 	.word	0x40020800

08002344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <Error_Handler+0x8>

08002350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <HAL_MspInit+0x4c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	4a0f      	ldr	r2, [pc, #60]	@ (800239c <HAL_MspInit+0x4c>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002364:	6453      	str	r3, [r2, #68]	@ 0x44
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <HAL_MspInit+0x4c>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	@ 0x40
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_MspInit+0x4c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <HAL_ADC_MspInit+0x7c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d127      	bne.n	8002412 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023fa:	2301      	movs	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023fe:	2303      	movs	r3, #3
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	@ (8002424 <HAL_ADC_MspInit+0x84>)
 800240e:	f002 fa21 	bl	8004854 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	@ 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40012000 	.word	0x40012000
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000

08002428 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2f      	ldr	r2, [pc, #188]	@ (8002504 <HAL_DAC_MspInit+0xdc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d158      	bne.n	80024fc <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b2e      	ldr	r3, [pc, #184]	@ (8002508 <HAL_DAC_MspInit+0xe0>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	4a2d      	ldr	r2, [pc, #180]	@ (8002508 <HAL_DAC_MspInit+0xe0>)
 8002454:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002458:	6413      	str	r3, [r2, #64]	@ 0x40
 800245a:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_DAC_MspInit+0xe0>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b27      	ldr	r3, [pc, #156]	@ (8002508 <HAL_DAC_MspInit+0xe0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a26      	ldr	r2, [pc, #152]	@ (8002508 <HAL_DAC_MspInit+0xe0>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_DAC_MspInit+0xe0>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002482:	2310      	movs	r3, #16
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002486:	2303      	movs	r3, #3
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	481d      	ldr	r0, [pc, #116]	@ (800250c <HAL_DAC_MspInit+0xe4>)
 8002496:	f002 f9dd 	bl	8004854 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800249a:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 800249c:	4a1d      	ldr	r2, [pc, #116]	@ (8002514 <HAL_DAC_MspInit+0xec>)
 800249e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024a2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80024a6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024aa:	2240      	movs	r2, #64	@ 0x40
 80024ac:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ae:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80024b4:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ba:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024bc:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024c2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ca:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80024cc:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024d2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80024e0:	480b      	ldr	r0, [pc, #44]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024e2:	f001 fa57 	bl	8003994 <HAL_DMA_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80024ec:	f7ff ff2a 	bl	8002344 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	4a06      	ldr	r2, [pc, #24]	@ (8002510 <HAL_DAC_MspInit+0xe8>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	@ 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40007400 	.word	0x40007400
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000
 8002510:	200003d4 	.word	0x200003d4
 8002514:	40026088 	.word	0x40026088

08002518 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08e      	sub	sp, #56	@ 0x38
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a55      	ldr	r2, [pc, #340]	@ (800268c <HAL_ETH_MspInit+0x174>)
 8002536:	4293      	cmp	r3, r2
 8002538:	f040 80a4 	bne.w	8002684 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	4a52      	ldr	r2, [pc, #328]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 8002546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800254a:	6313      	str	r3, [r2, #48]	@ 0x30
 800254c:	4b50      	ldr	r3, [pc, #320]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	4b4c      	ldr	r3, [pc, #304]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002560:	4a4b      	ldr	r2, [pc, #300]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 8002562:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002566:	6313      	str	r3, [r2, #48]	@ 0x30
 8002568:	4b49      	ldr	r3, [pc, #292]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	4a44      	ldr	r2, [pc, #272]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 800257e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002582:	6313      	str	r3, [r2, #48]	@ 0x30
 8002584:	4b42      	ldr	r3, [pc, #264]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	4a3d      	ldr	r2, [pc, #244]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	4b37      	ldr	r3, [pc, #220]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	4a36      	ldr	r2, [pc, #216]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80025bc:	4b34      	ldr	r3, [pc, #208]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	4b30      	ldr	r3, [pc, #192]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	4a28      	ldr	r2, [pc, #160]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_ETH_MspInit+0x178>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002600:	2332      	movs	r3, #50	@ 0x32
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002610:	230b      	movs	r3, #11
 8002612:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002618:	4619      	mov	r1, r3
 800261a:	481e      	ldr	r0, [pc, #120]	@ (8002694 <HAL_ETH_MspInit+0x17c>)
 800261c:	f002 f91a 	bl	8004854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002620:	2386      	movs	r3, #134	@ 0x86
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002630:	230b      	movs	r3, #11
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002638:	4619      	mov	r1, r3
 800263a:	4817      	ldr	r0, [pc, #92]	@ (8002698 <HAL_ETH_MspInit+0x180>)
 800263c:	f002 f90a 	bl	8004854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002652:	230b      	movs	r3, #11
 8002654:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265a:	4619      	mov	r1, r3
 800265c:	480f      	ldr	r0, [pc, #60]	@ (800269c <HAL_ETH_MspInit+0x184>)
 800265e:	f002 f8f9 	bl	8004854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002662:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002674:	230b      	movs	r3, #11
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267c:	4619      	mov	r1, r3
 800267e:	4808      	ldr	r0, [pc, #32]	@ (80026a0 <HAL_ETH_MspInit+0x188>)
 8002680:	f002 f8e8 	bl	8004854 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8002684:	bf00      	nop
 8002686:	3738      	adds	r7, #56	@ 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40028000 	.word	0x40028000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020800 	.word	0x40020800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40021800 	.word	0x40021800

080026a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	@ 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a21      	ldr	r2, [pc, #132]	@ (8002748 <HAL_I2C_MspInit+0xa4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d13c      	bne.n	8002740 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	4b20      	ldr	r3, [pc, #128]	@ (800274c <HAL_I2C_MspInit+0xa8>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a1f      	ldr	r2, [pc, #124]	@ (800274c <HAL_I2C_MspInit+0xa8>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_I2C_MspInit+0xa8>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e8:	2312      	movs	r3, #18
 80026ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f4:	2304      	movs	r3, #4
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4814      	ldr	r0, [pc, #80]	@ (8002750 <HAL_I2C_MspInit+0xac>)
 8002700:	f002 f8a8 	bl	8004854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_I2C_MspInit+0xa8>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	4a0f      	ldr	r2, [pc, #60]	@ (800274c <HAL_I2C_MspInit+0xa8>)
 800270e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002712:	6413      	str	r3, [r2, #64]	@ 0x40
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_I2C_MspInit+0xa8>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2100      	movs	r1, #0
 8002724:	201f      	movs	r0, #31
 8002726:	f000 ff18 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800272a:	201f      	movs	r0, #31
 800272c:	f000 ff31 	bl	8003592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2020      	movs	r0, #32
 8002736:	f000 ff10 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800273a:	2020      	movs	r0, #32
 800273c:	f000 ff29 	bl	8003592 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	@ 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40005400 	.word	0x40005400
 800274c:	40023800 	.word	0x40023800
 8002750:	40020400 	.word	0x40020400

08002754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002764:	d10d      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <HAL_TIM_Base_MspInit+0x3c>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a08      	ldr	r2, [pc, #32]	@ (8002790 <HAL_TIM_Base_MspInit+0x3c>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_TIM_Base_MspInit+0x3c>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	@ 0x30
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a65      	ldr	r2, [pc, #404]	@ (8002948 <HAL_UART_MspInit+0x1b4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f040 8092 	bne.w	80028dc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	4b63      	ldr	r3, [pc, #396]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	4a62      	ldr	r2, [pc, #392]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80027c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80027c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c8:	4b60      	ldr	r3, [pc, #384]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	4b5c      	ldr	r3, [pc, #368]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	4a5b      	ldr	r2, [pc, #364]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e4:	4b59      	ldr	r3, [pc, #356]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002802:	2308      	movs	r3, #8
 8002804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4850      	ldr	r0, [pc, #320]	@ (8002950 <HAL_UART_MspInit+0x1bc>)
 800280e:	f002 f821 	bl	8004854 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002812:	4b50      	ldr	r3, [pc, #320]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 8002814:	4a50      	ldr	r2, [pc, #320]	@ (8002958 <HAL_UART_MspInit+0x1c4>)
 8002816:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002818:	4b4e      	ldr	r3, [pc, #312]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 800281a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800281e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002820:	4b4c      	ldr	r3, [pc, #304]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002826:	4b4b      	ldr	r3, [pc, #300]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800282c:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 800282e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002832:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002834:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283a:	4b46      	ldr	r3, [pc, #280]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002840:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002846:	4b43      	ldr	r3, [pc, #268]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284c:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002852:	4840      	ldr	r0, [pc, #256]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 8002854:	f001 f89e 	bl	8003994 <HAL_DMA_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800285e:	f7ff fd71 	bl	8002344 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a3b      	ldr	r2, [pc, #236]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 8002866:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002868:	4a3a      	ldr	r2, [pc, #232]	@ (8002954 <HAL_UART_MspInit+0x1c0>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800286e:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 8002870:	4a3b      	ldr	r2, [pc, #236]	@ (8002960 <HAL_UART_MspInit+0x1cc>)
 8002872:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002874:	4b39      	ldr	r3, [pc, #228]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 8002876:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800287a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800287c:	4b37      	ldr	r3, [pc, #220]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002882:	4b36      	ldr	r3, [pc, #216]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002888:	4b34      	ldr	r3, [pc, #208]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 800288a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800288e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002890:	4b32      	ldr	r3, [pc, #200]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 8002892:	2200      	movs	r2, #0
 8002894:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002896:	4b31      	ldr	r3, [pc, #196]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800289c:	4b2f      	ldr	r3, [pc, #188]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028a2:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a8:	4b2c      	ldr	r3, [pc, #176]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80028ae:	482b      	ldr	r0, [pc, #172]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 80028b0:	f001 f870 	bl	8003994 <HAL_DMA_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80028ba:	f7ff fd43 	bl	8002344 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a26      	ldr	r2, [pc, #152]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 80028c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80028c4:	4a25      	ldr	r2, [pc, #148]	@ (800295c <HAL_UART_MspInit+0x1c8>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	2034      	movs	r0, #52	@ 0x34
 80028d0:	f000 fe43 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80028d4:	2034      	movs	r0, #52	@ 0x34
 80028d6:	f000 fe5c 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028da:	e031      	b.n	8002940 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a20      	ldr	r2, [pc, #128]	@ (8002964 <HAL_UART_MspInit+0x1d0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d12c      	bne.n	8002940 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	4a17      	ldr	r2, [pc, #92]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80028f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	4a10      	ldr	r2, [pc, #64]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6313      	str	r3, [r2, #48]	@ 0x30
 8002912:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <HAL_UART_MspInit+0x1b8>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800291e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002930:	2307      	movs	r3, #7
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4619      	mov	r1, r3
 800293a:	480b      	ldr	r0, [pc, #44]	@ (8002968 <HAL_UART_MspInit+0x1d4>)
 800293c:	f001 ff8a 	bl	8004854 <HAL_GPIO_Init>
}
 8002940:	bf00      	nop
 8002942:	3730      	adds	r7, #48	@ 0x30
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40004c00 	.word	0x40004c00
 800294c:	40023800 	.word	0x40023800
 8002950:	40020800 	.word	0x40020800
 8002954:	20000610 	.word	0x20000610
 8002958:	40026040 	.word	0x40026040
 800295c:	20000670 	.word	0x20000670
 8002960:	40026070 	.word	0x40026070
 8002964:	40004800 	.word	0x40004800
 8002968:	40020c00 	.word	0x40020c00

0800296c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	@ 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800298c:	d13f      	bne.n	8002a0e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <HAL_PCD_MspInit+0xac>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a20      	ldr	r2, [pc, #128]	@ (8002a18 <HAL_PCD_MspInit+0xac>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a18 <HAL_PCD_MspInit+0xac>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029aa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029bc:	230a      	movs	r3, #10
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	4815      	ldr	r0, [pc, #84]	@ (8002a1c <HAL_PCD_MspInit+0xb0>)
 80029c8:	f001 ff44 	bl	8004854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	480e      	ldr	r0, [pc, #56]	@ (8002a1c <HAL_PCD_MspInit+0xb0>)
 80029e2:	f001 ff37 	bl	8004854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <HAL_PCD_MspInit+0xac>)
 80029e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002a18 <HAL_PCD_MspInit+0xac>)
 80029ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_PCD_MspInit+0xac>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <HAL_PCD_MspInit+0xac>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_PCD_MspInit+0xac>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	@ 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020000 	.word	0x40020000

08002a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <NMI_Handler+0x4>

08002a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <HardFault_Handler+0x4>

08002a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <MemManage_Handler+0x4>

08002a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <BusFault_Handler+0x4>

08002a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <UsageFault_Handler+0x4>

08002a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a76:	f000 f9df 	bl	8002e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002a84:	4802      	ldr	r0, [pc, #8]	@ (8002a90 <DMA1_Stream2_IRQHandler+0x10>)
 8002a86:	f001 f91d 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000610 	.word	0x20000610

08002a94 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <DMA1_Stream4_IRQHandler+0x10>)
 8002a9a:	f001 f913 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000670 	.word	0x20000670

08002aa8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <DMA1_Stream5_IRQHandler+0x10>)
 8002aae:	f001 f909 	bl	8003cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200003d4 	.word	0x200003d4

08002abc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ac0:	4802      	ldr	r0, [pc, #8]	@ (8002acc <I2C1_EV_IRQHandler+0x10>)
 8002ac2:	f002 fae5 	bl	8005090 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200004e4 	.word	0x200004e4

08002ad0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ad4:	4802      	ldr	r0, [pc, #8]	@ (8002ae0 <I2C1_ER_IRQHandler+0x10>)
 8002ad6:	f002 fc2e 	bl	8005336 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200004e4 	.word	0x200004e4

08002ae4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ae8:	4802      	ldr	r0, [pc, #8]	@ (8002af4 <UART4_IRQHandler+0x10>)
 8002aea:	f005 fc89 	bl	8008400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000580 	.word	0x20000580

08002af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_kill>:

int _kill(int pid, int sig)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b12:	f007 fe63 	bl	800a7dc <__errno>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2216      	movs	r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_exit>:

void _exit (int status)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffe7 	bl	8002b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <_exit+0x12>

08002b3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e00a      	b.n	8002b66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b50:	f3af 8000 	nop.w
 8002b54:	4601      	mov	r1, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	60ba      	str	r2, [r7, #8]
 8002b5c:	b2ca      	uxtb	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dbf0      	blt.n	8002b50 <_read+0x12>
  }

  return len;
 8002b6e:	687b      	ldr	r3, [r7, #4]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e009      	b.n	8002b9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	60ba      	str	r2, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbf1      	blt.n	8002b8a <_write+0x12>
  }
  return len;
 8002ba6:	687b      	ldr	r3, [r7, #4]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_close>:

int _close(int file)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_isatty>:

int _isatty(int file)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c48:	f007 fdc8 	bl	800a7dc <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	@ (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20030000 	.word	0x20030000
 8002c78:	00000400 	.word	0x00000400
 8002c7c:	20001230 	.word	0x20001230
 8002c80:	20001398 	.word	0x20001398

08002c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cac:	f7ff ffea 	bl	8002c84 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb0:	480c      	ldr	r0, [pc, #48]	@ (8002ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cb2:	490d      	ldr	r1, [pc, #52]	@ (8002ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f007 fd87 	bl	800a7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cda:	f7fe febd 	bl	8001a58 <main>
  bx  lr    
 8002cde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ce0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cec:	0800df28 	.word	0x0800df28
  ldr r2, =_sbss
 8002cf0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002cf4:	20001394 	.word	0x20001394

08002cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC_IRQHandler>
	...

08002cfc <debounceInit>:
/**
  * @brief FUNCION ANTEREBOTE
  * @param debounceInit
  * @retval None
  */
void debounceInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
    // Inicializar el GPIO para leer el estado del botón
    debouncePinGPIOx = GPIOC;
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <debounceInit+0x58>)
 8002d0a:	4a13      	ldr	r2, [pc, #76]	@ (8002d58 <debounceInit+0x5c>)
 8002d0c:	601a      	str	r2, [r3, #0]
    debouncePinPin = USER_Btn_Pin;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <debounceInit+0x60>)
 8002d10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d14:	801a      	strh	r2, [r3, #0]

    // Configurar el GPIO como entrada
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = debouncePinPin;
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <debounceInit+0x60>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
    // ... Otras configuraciones según tu MCU

    HAL_GPIO_Init(debouncePinGPIOx, &GPIO_InitStruct);
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <debounceInit+0x58>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f107 020c 	add.w	r2, r7, #12
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 fd8a 	bl	8004854 <HAL_GPIO_Init>

    // Inicializar el temporizador (si es necesario)
    debounceTimer = HAL_GetTick();
 8002d40:	f000 f88e 	bl	8002e60 <HAL_GetTick>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a06      	ldr	r2, [pc, #24]	@ (8002d60 <debounceInit+0x64>)
 8002d48:	6013      	str	r3, [r2, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20001234 	.word	0x20001234
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	20001238 	.word	0x20001238
 8002d60:	2000123c 	.word	0x2000123c

08002d64 <readKey>:
    }

    previousButtonValue = currentButtonValue;
}

bool readKey() {
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
    bool keyPressed = false;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	71fb      	strb	r3, [r7, #7]
    if (buttonState == BUTTON_DOWN) {
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <readKey+0x2c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d104      	bne.n	8002d80 <readKey+0x1c>
        keyPressed = true;
 8002d76:	2301      	movs	r3, #1
 8002d78:	71fb      	strb	r3, [r7, #7]
        buttonState = BUTTON_UP; // Restablecer el estado del botón
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <readKey+0x2c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    }
    return keyPressed;
 8002d80:	79fb      	ldrb	r3, [r7, #7]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20001240 	.word	0x20001240

08002d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d98:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd4 <HAL_Init+0x40>)
 8002d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <HAL_Init+0x40>)
 8002daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	@ (8002dd4 <HAL_Init+0x40>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 fbc1 	bl	8003544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f000 f808 	bl	8002dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc8:	f7ff fac2 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <HAL_InitTick+0x54>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_InitTick+0x58>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fbd9 	bl	80035ae <HAL_SYSTICK_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00e      	b.n	8002e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d80a      	bhi.n	8002e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 fba1 	bl	800355a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e18:	4a06      	ldr	r2, [pc, #24]	@ (8002e34 <HAL_InitTick+0x5c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	2000000c 	.word	0x2000000c
 8002e30:	20000014 	.word	0x20000014
 8002e34:	20000010 	.word	0x20000010

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000014 	.word	0x20000014
 8002e5c:	20001244 	.word	0x20001244

08002e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20001244 	.word	0x20001244

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000014 	.word	0x20000014

08002ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e033      	b.n	8002f3e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fa5e 	bl	80023a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f06:	f023 0302 	bic.w	r3, r3, #2
 8002f0a:	f043 0202 	orr.w	r2, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f94a 	bl	80031ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f023 0303 	bic.w	r3, r3, #3
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f2e:	e001      	b.n	8002f34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x1c>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e113      	b.n	800318c <HAL_ADC_ConfigChannel+0x244>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	d925      	bls.n	8002fc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68d9      	ldr	r1, [r3, #12]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	3b1e      	subs	r3, #30
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43da      	mvns	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	400a      	ands	r2, r1
 8002f98:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68d9      	ldr	r1, [r3, #12]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4403      	add	r3, r0
 8002fb2:	3b1e      	subs	r3, #30
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	e022      	b.n	8003006 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6919      	ldr	r1, [r3, #16]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6919      	ldr	r1, [r3, #16]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4403      	add	r3, r0
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b06      	cmp	r3, #6
 800300c:	d824      	bhi.n	8003058 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b05      	subs	r3, #5
 8003020:	221f      	movs	r2, #31
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	400a      	ands	r2, r1
 800302e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b05      	subs	r3, #5
 800304a:	fa00 f203 	lsl.w	r2, r0, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	635a      	str	r2, [r3, #52]	@ 0x34
 8003056:	e04c      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d824      	bhi.n	80030aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3b23      	subs	r3, #35	@ 0x23
 8003072:	221f      	movs	r2, #31
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43da      	mvns	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	400a      	ands	r2, r1
 8003080:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	4618      	mov	r0, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3b23      	subs	r3, #35	@ 0x23
 800309c:	fa00 f203 	lsl.w	r2, r0, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80030a8:	e023      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3b41      	subs	r3, #65	@ 0x41
 80030bc:	221f      	movs	r2, #31
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	3b41      	subs	r3, #65	@ 0x41
 80030e6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f2:	4b29      	ldr	r3, [pc, #164]	@ (8003198 <HAL_ADC_ConfigChannel+0x250>)
 80030f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a28      	ldr	r2, [pc, #160]	@ (800319c <HAL_ADC_ConfigChannel+0x254>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10f      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1d8>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b12      	cmp	r3, #18
 8003106:	d10b      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1d      	ldr	r2, [pc, #116]	@ (800319c <HAL_ADC_ConfigChannel+0x254>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d12b      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x23a>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1c      	ldr	r2, [pc, #112]	@ (80031a0 <HAL_ADC_ConfigChannel+0x258>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <HAL_ADC_ConfigChannel+0x1f4>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b11      	cmp	r3, #17
 800313a:	d122      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a11      	ldr	r2, [pc, #68]	@ (80031a0 <HAL_ADC_ConfigChannel+0x258>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d111      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_ADC_ConfigChannel+0x25c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a11      	ldr	r2, [pc, #68]	@ (80031a8 <HAL_ADC_ConfigChannel+0x260>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0c9a      	lsrs	r2, r3, #18
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003174:	e002      	b.n	800317c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3b01      	subs	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f9      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40012300 	.word	0x40012300
 800319c:	40012000 	.word	0x40012000
 80031a0:	10000012 	.word	0x10000012
 80031a4:	2000000c 	.word	0x2000000c
 80031a8:	431bde83 	.word	0x431bde83

080031ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031b4:	4b79      	ldr	r3, [pc, #484]	@ (800339c <ADC_Init+0x1f0>)
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	021a      	lsls	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6899      	ldr	r1, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	4a58      	ldr	r2, [pc, #352]	@ (80033a0 <ADC_Init+0x1f4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d022      	beq.n	800328a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003252:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e00f      	b.n	80032aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0202 	bic.w	r2, r2, #2
 80032b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7e1b      	ldrb	r3, [r3, #24]
 80032c4:	005a      	lsls	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	3b01      	subs	r3, #1
 8003304:	035a      	lsls	r2, r3, #13
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	e007      	b.n	8003320 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800331e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800332e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	3b01      	subs	r3, #1
 800333c:	051a      	lsls	r2, r3, #20
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6899      	ldr	r1, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003362:	025a      	lsls	r2, r3, #9
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	029a      	lsls	r2, r3, #10
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40012300 	.word	0x40012300
 80033a0:	0f000001 	.word	0x0f000001

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	@ (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	@ (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db0b      	blt.n	8003432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4907      	ldr	r1, [pc, #28]	@ (8003440 <__NVIC_EnableIRQ+0x38>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2001      	movs	r0, #1
 800342a:	fa00 f202 	lsl.w	r2, r0, r2
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000e100 	.word	0xe000e100

08003444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	2b00      	cmp	r3, #0
 8003456:	db0a      	blt.n	800346e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	490c      	ldr	r1, [pc, #48]	@ (8003490 <__NVIC_SetPriority+0x4c>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	440b      	add	r3, r1
 8003468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800346c:	e00a      	b.n	8003484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4908      	ldr	r1, [pc, #32]	@ (8003494 <__NVIC_SetPriority+0x50>)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	3b04      	subs	r3, #4
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	440b      	add	r3, r1
 8003482:	761a      	strb	r2, [r3, #24]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000e100 	.word	0xe000e100
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	@ 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f1c3 0307 	rsb	r3, r3, #7
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	bf28      	it	cs
 80034b6:	2304      	movcs	r3, #4
 80034b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3304      	adds	r3, #4
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d902      	bls.n	80034c8 <NVIC_EncodePriority+0x30>
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3b03      	subs	r3, #3
 80034c6:	e000      	b.n	80034ca <NVIC_EncodePriority+0x32>
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	401a      	ands	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43d9      	mvns	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	4313      	orrs	r3, r2
         );
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3724      	adds	r7, #36	@ 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003510:	d301      	bcc.n	8003516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003512:	2301      	movs	r3, #1
 8003514:	e00f      	b.n	8003536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003516:	4a0a      	ldr	r2, [pc, #40]	@ (8003540 <SysTick_Config+0x40>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351e:	210f      	movs	r1, #15
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	f7ff ff8e 	bl	8003444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <SysTick_Config+0x40>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352e:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <SysTick_Config+0x40>)
 8003530:	2207      	movs	r2, #7
 8003532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	e000e010 	.word	0xe000e010

08003544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff29 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff ff3e 	bl	80033ec <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff8e 	bl	8003498 <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5d 	bl	8003444 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff31 	bl	8003408 <__NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffa2 	bl	8003500 <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e014      	b.n	8003602 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	791b      	ldrb	r3, [r3, #4]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fe ff1d 	bl	8002428 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0a2      	b.n	800376e <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	795b      	ldrb	r3, [r3, #5]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_DAC_Start_DMA+0x28>
 8003630:	2302      	movs	r3, #2
 8003632:	e09c      	b.n	800376e <HAL_DAC_Start_DMA+0x162>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2202      	movs	r2, #2
 800363e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d129      	bne.n	800369a <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4a4b      	ldr	r2, [pc, #300]	@ (8003778 <HAL_DAC_Start_DMA+0x16c>)
 800364c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4a4a      	ldr	r2, [pc, #296]	@ (800377c <HAL_DAC_Start_DMA+0x170>)
 8003654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4a49      	ldr	r2, [pc, #292]	@ (8003780 <HAL_DAC_Start_DMA+0x174>)
 800365c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800366c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_DAC_Start_DMA+0x70>
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	2b04      	cmp	r3, #4
 8003678:	d005      	beq.n	8003686 <HAL_DAC_Start_DMA+0x7a>
 800367a:	e009      	b.n	8003690 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	613b      	str	r3, [r7, #16]
        break;
 8003684:	e033      	b.n	80036ee <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	613b      	str	r3, [r7, #16]
        break;
 800368e:	e02e      	b.n	80036ee <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3310      	adds	r3, #16
 8003696:	613b      	str	r3, [r7, #16]
        break;
 8003698:	e029      	b.n	80036ee <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4a39      	ldr	r2, [pc, #228]	@ (8003784 <HAL_DAC_Start_DMA+0x178>)
 80036a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4a38      	ldr	r2, [pc, #224]	@ (8003788 <HAL_DAC_Start_DMA+0x17c>)
 80036a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	4a37      	ldr	r2, [pc, #220]	@ (800378c <HAL_DAC_Start_DMA+0x180>)
 80036b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_DAC_Start_DMA+0xc4>
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d005      	beq.n	80036da <HAL_DAC_Start_DMA+0xce>
 80036ce:	e009      	b.n	80036e4 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3314      	adds	r3, #20
 80036d6:	613b      	str	r3, [r7, #16]
        break;
 80036d8:	e009      	b.n	80036ee <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3318      	adds	r3, #24
 80036e0:	613b      	str	r3, [r7, #16]
        break;
 80036e2:	e004      	b.n	80036ee <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	331c      	adds	r3, #28
 80036ea:	613b      	str	r3, [r7, #16]
        break;
 80036ec:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d111      	bne.n	8003718 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003702:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6898      	ldr	r0, [r3, #8]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	f000 f9ef 	bl	8003af0 <HAL_DMA_Start_IT>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]
 8003716:	e010      	b.n	800373a <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003726:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68d8      	ldr	r0, [r3, #12]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	f000 f9dd 	bl	8003af0 <HAL_DMA_Start_IT>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10c      	bne.n	8003760 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6819      	ldr	r1, [r3, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2201      	movs	r2, #1
 8003754:	409a      	lsls	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e005      	b.n	800376c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f043 0204 	orr.w	r2, r3, #4
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800376c:	7dfb      	ldrb	r3, [r7, #23]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	0800387f 	.word	0x0800387f
 800377c:	080038a1 	.word	0x080038a1
 8003780:	080038bd 	.word	0x080038bd
 8003784:	08003927 	.word	0x08003927
 8003788:	08003949 	.word	0x08003949
 800378c:	08003965 	.word	0x08003965

08003790 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	@ 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_DAC_ConfigChannel+0x1c>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e042      	b.n	8003872 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	795b      	ldrb	r3, [r3, #5]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_DAC_ConfigChannel+0x2c>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e03c      	b.n	8003872 <HAL_DAC_ConfigChannel+0xa6>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2202      	movs	r2, #2
 8003802:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	22c0      	movs	r2, #192	@ 0xc0
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	400a      	ands	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003870:	7ffb      	ldrb	r3, [r7, #31]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	@ 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff ff7f 	bl	8003790 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	711a      	strb	r2, [r3, #4]
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff ff78 	bl	80037a4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f043 0204 	orr.w	r2, r3, #4
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff ff6e 	bl	80037b8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	711a      	strb	r2, [r3, #4]
}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff ffd8 	bl	80038ea <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	711a      	strb	r2, [r3, #4]
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003954:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff ffd1 	bl	80038fe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003970:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7ff ffc7 	bl	8003912 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	711a      	strb	r2, [r3, #4]
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039a0:	f7ff fa5e 	bl	8002e60 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e099      	b.n	8003ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d0:	e00f      	b.n	80039f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039d2:	f7ff fa45 	bl	8002e60 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d908      	bls.n	80039f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2203      	movs	r2, #3
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e078      	b.n	8003ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e8      	bne.n	80039d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4b38      	ldr	r3, [pc, #224]	@ (8003aec <HAL_DMA_Init+0x158>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d107      	bne.n	8003a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	4313      	orrs	r3, r2
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0307 	bic.w	r3, r3, #7
 8003a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d117      	bne.n	8003ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fb0f 	bl	80040bc <DMA_CheckFifoParam>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2240      	movs	r2, #64	@ 0x40
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e016      	b.n	8003ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fac6 	bl	8004050 <DMA_CalcBaseAndBitshift>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003acc:	223f      	movs	r2, #63	@ 0x3f
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	f010803f 	.word	0xf010803f

08003af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_DMA_Start_IT+0x26>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e040      	b.n	8003b98 <HAL_DMA_Start_IT+0xa8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d12f      	bne.n	8003b8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fa58 	bl	8003ff4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	223f      	movs	r2, #63	@ 0x3f
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0216 	orr.w	r2, r2, #22
 8003b5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0208 	orr.w	r2, r2, #8
 8003b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e005      	b.n	8003b96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
 8003b94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bae:	f7ff f957 	bl	8002e60 <HAL_GetTick>
 8003bb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d008      	beq.n	8003bd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	@ 0x80
 8003bc4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e052      	b.n	8003c78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0216 	bic.w	r2, r2, #22
 8003be0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <HAL_DMA_Abort+0x62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0208 	bic.w	r2, r2, #8
 8003c10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c22:	e013      	b.n	8003c4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c24:	f7ff f91c 	bl	8002e60 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d90c      	bls.n	8003c4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e015      	b.n	8003c78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e4      	bne.n	8003c24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5e:	223f      	movs	r2, #63	@ 0x3f
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d004      	beq.n	8003c9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2280      	movs	r2, #128	@ 0x80
 8003c98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e00c      	b.n	8003cb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2205      	movs	r2, #5
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cd0:	4b8e      	ldr	r3, [pc, #568]	@ (8003f0c <HAL_DMA_IRQHandler+0x248>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a8e      	ldr	r2, [pc, #568]	@ (8003f10 <HAL_DMA_IRQHandler+0x24c>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0a9b      	lsrs	r3, r3, #10
 8003cdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cee:	2208      	movs	r2, #8
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01a      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	2201      	movs	r2, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d012      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	2201      	movs	r2, #1
 8003d54:	409a      	lsls	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d012      	beq.n	8003d9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	2204      	movs	r2, #4
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da0:	2210      	movs	r2, #16
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d043      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03c      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d024      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
 8003df2:	e01f      	b.n	8003e34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
 8003e04:	e016      	b.n	8003e34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0208 	bic.w	r2, r2, #8
 8003e22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e38:	2220      	movs	r2, #32
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 808f 	beq.w	8003f64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8087 	beq.w	8003f64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d136      	bne.n	8003edc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0216 	bic.w	r2, r2, #22
 8003e7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <HAL_DMA_IRQHandler+0x1da>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0208 	bic.w	r2, r2, #8
 8003eac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	223f      	movs	r2, #63	@ 0x3f
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d07e      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
        }
        return;
 8003eda:	e079      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01d      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d031      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
 8003f08:	e02c      	b.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
 8003f0a:	bf00      	nop
 8003f0c:	2000000c 	.word	0x2000000c
 8003f10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d023      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4798      	blx	r3
 8003f24:	e01e      	b.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0210 	bic.w	r2, r2, #16
 8003f42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d032      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d022      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d307      	bcc.n	8003fac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f2      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x2cc>
 8003faa:	e000      	b.n	8003fae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
 8003fce:	e000      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fd0:	bf00      	nop
    }
  }
}
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fe6:	b2db      	uxtb	r3, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004010:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b40      	cmp	r3, #64	@ 0x40
 8004020:	d108      	bne.n	8004034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004032:	e007      	b.n	8004044 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	3b10      	subs	r3, #16
 8004060:	4a14      	ldr	r2, [pc, #80]	@ (80040b4 <DMA_CalcBaseAndBitshift+0x64>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800406a:	4a13      	ldr	r2, [pc, #76]	@ (80040b8 <DMA_CalcBaseAndBitshift+0x68>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d909      	bls.n	8004092 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	1d1a      	adds	r2, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004090:	e007      	b.n	80040a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	aaaaaaab 	.word	0xaaaaaaab
 80040b8:	0800d97c 	.word	0x0800d97c

080040bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d11f      	bne.n	8004116 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d856      	bhi.n	800418a <DMA_CheckFifoParam+0xce>
 80040dc:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <DMA_CheckFifoParam+0x28>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	08004107 	.word	0x08004107
 80040ec:	080040f5 	.word	0x080040f5
 80040f0:	0800418b 	.word	0x0800418b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d046      	beq.n	800418e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004104:	e043      	b.n	800418e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800410e:	d140      	bne.n	8004192 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004114:	e03d      	b.n	8004192 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800411e:	d121      	bne.n	8004164 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d837      	bhi.n	8004196 <DMA_CheckFifoParam+0xda>
 8004126:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <DMA_CheckFifoParam+0x70>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	0800413d 	.word	0x0800413d
 8004130:	08004143 	.word	0x08004143
 8004134:	0800413d 	.word	0x0800413d
 8004138:	08004155 	.word	0x08004155
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      break;
 8004140:	e030      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d025      	beq.n	800419a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004152:	e022      	b.n	800419a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800415c:	d11f      	bne.n	800419e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004162:	e01c      	b.n	800419e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d903      	bls.n	8004172 <DMA_CheckFifoParam+0xb6>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d003      	beq.n	8004178 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004170:	e018      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
      break;
 8004176:	e015      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      break;
 8004188:	e00b      	b.n	80041a2 <DMA_CheckFifoParam+0xe6>
      break;
 800418a:	bf00      	nop
 800418c:	e00a      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 800418e:	bf00      	nop
 8004190:	e008      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004192:	bf00      	nop
 8004194:	e006      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
    }
  } 
  
  return status; 
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop

080041b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e08a      	b.n	80042dc <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2223      	movs	r2, #35	@ 0x23
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7fe f99d 	bl	8002518 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	4b40      	ldr	r3, [pc, #256]	@ (80042e4 <HAL_ETH_Init+0x130>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	4a3f      	ldr	r2, [pc, #252]	@ (80042e4 <HAL_ETH_Init+0x130>)
 80041e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ee:	4b3d      	ldr	r3, [pc, #244]	@ (80042e4 <HAL_ETH_Init+0x130>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80041fa:	4b3b      	ldr	r3, [pc, #236]	@ (80042e8 <HAL_ETH_Init+0x134>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4a3a      	ldr	r2, [pc, #232]	@ (80042e8 <HAL_ETH_Init+0x134>)
 8004200:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004204:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004206:	4b38      	ldr	r3, [pc, #224]	@ (80042e8 <HAL_ETH_Init+0x134>)
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4936      	ldr	r1, [pc, #216]	@ (80042e8 <HAL_ETH_Init+0x134>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004214:	4b34      	ldr	r3, [pc, #208]	@ (80042e8 <HAL_ETH_Init+0x134>)
 8004216:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800422e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004230:	f7fe fe16 	bl	8002e60 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004236:	e011      	b.n	800425c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004238:	f7fe fe12 	bl	8002e60 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004246:	d909      	bls.n	800425c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2204      	movs	r2, #4
 800424c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	22e0      	movs	r2, #224	@ 0xe0
 8004254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e03f      	b.n	80042dc <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e4      	bne.n	8004238 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f97a 	bl	8004568 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fa25 	bl	80046c4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa7b 	bl	8004776 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	461a      	mov	r2, r3
 8004286:	2100      	movs	r1, #0
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f9e3 	bl	8004654 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800429c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80042b2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80042c6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2210      	movs	r2, #16
 80042d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40013800 	.word	0x40013800

080042ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4b53      	ldr	r3, [pc, #332]	@ (8004450 <ETH_SetMACConfig+0x164>)
 8004302:	4013      	ands	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	7b9b      	ldrb	r3, [r3, #14]
 800430a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	7c12      	ldrb	r2, [r2, #16]
 8004310:	2a00      	cmp	r2, #0
 8004312:	d102      	bne.n	800431a <ETH_SetMACConfig+0x2e>
 8004314:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004318:	e000      	b.n	800431c <ETH_SetMACConfig+0x30>
 800431a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800431c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	7c52      	ldrb	r2, [r2, #17]
 8004322:	2a00      	cmp	r2, #0
 8004324:	d102      	bne.n	800432c <ETH_SetMACConfig+0x40>
 8004326:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800432a:	e000      	b.n	800432e <ETH_SetMACConfig+0x42>
 800432c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800432e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004334:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	7fdb      	ldrb	r3, [r3, #31]
 800433a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800433c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004342:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	7f92      	ldrb	r2, [r2, #30]
 8004348:	2a00      	cmp	r2, #0
 800434a:	d102      	bne.n	8004352 <ETH_SetMACConfig+0x66>
 800434c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004350:	e000      	b.n	8004354 <ETH_SetMACConfig+0x68>
 8004352:	2200      	movs	r2, #0
                        macconf->Speed |
 8004354:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	7f1b      	ldrb	r3, [r3, #28]
 800435a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800435c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004362:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	791b      	ldrb	r3, [r3, #4]
 8004368:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800436a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004372:	2a00      	cmp	r2, #0
 8004374:	d102      	bne.n	800437c <ETH_SetMACConfig+0x90>
 8004376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800437a:	e000      	b.n	800437e <ETH_SetMACConfig+0x92>
 800437c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800437e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	7bdb      	ldrb	r3, [r3, #15]
 8004384:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004386:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800438c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004394:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004396:	4313      	orrs	r3, r2
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043ae:	2001      	movs	r0, #1
 80043b0:	f7fe fd62 	bl	8002e78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80043ca:	4013      	ands	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d101      	bne.n	80043e2 <ETH_SetMACConfig+0xf6>
 80043de:	2280      	movs	r2, #128	@ 0x80
 80043e0:	e000      	b.n	80043e4 <ETH_SetMACConfig+0xf8>
 80043e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80043e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80043ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80043f2:	2a01      	cmp	r2, #1
 80043f4:	d101      	bne.n	80043fa <ETH_SetMACConfig+0x10e>
 80043f6:	2208      	movs	r2, #8
 80043f8:	e000      	b.n	80043fc <ETH_SetMACConfig+0x110>
 80043fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80043fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004404:	2a01      	cmp	r2, #1
 8004406:	d101      	bne.n	800440c <ETH_SetMACConfig+0x120>
 8004408:	2204      	movs	r2, #4
 800440a:	e000      	b.n	800440e <ETH_SetMACConfig+0x122>
 800440c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800440e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004416:	2a01      	cmp	r2, #1
 8004418:	d101      	bne.n	800441e <ETH_SetMACConfig+0x132>
 800441a:	2202      	movs	r2, #2
 800441c:	e000      	b.n	8004420 <ETH_SetMACConfig+0x134>
 800441e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004420:	4313      	orrs	r3, r2
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004438:	2001      	movs	r0, #1
 800443a:	f7fe fd1d 	bl	8002e78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	619a      	str	r2, [r3, #24]
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	fd20810f 	.word	0xfd20810f

08004454 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4b3d      	ldr	r3, [pc, #244]	@ (8004564 <ETH_SetDMAConfig+0x110>)
 800446e:	4013      	ands	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	7b1b      	ldrb	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <ETH_SetDMAConfig+0x2c>
 800447a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800447e:	e000      	b.n	8004482 <ETH_SetDMAConfig+0x2e>
 8004480:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	7b5b      	ldrb	r3, [r3, #13]
 8004486:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004488:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	7f52      	ldrb	r2, [r2, #29]
 800448e:	2a00      	cmp	r2, #0
 8004490:	d102      	bne.n	8004498 <ETH_SetDMAConfig+0x44>
 8004492:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004496:	e000      	b.n	800449a <ETH_SetDMAConfig+0x46>
 8004498:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800449a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	7b9b      	ldrb	r3, [r3, #14]
 80044a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80044a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80044a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	7f1b      	ldrb	r3, [r3, #28]
 80044ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80044b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	7f9b      	ldrb	r3, [r3, #30]
 80044b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80044b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80044be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80044c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80044c8:	4313      	orrs	r3, r2
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d8:	461a      	mov	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f7fe fcc4 	bl	8002e78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f8:	461a      	mov	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004508:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800450e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004514:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800451c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800451e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004526:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800452c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004536:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800453a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004548:	2001      	movs	r0, #1
 800454a:	f7fe fc95 	bl	8002e78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	f8de3f23 	.word	0xf8de3f23

08004568 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b0a6      	sub	sp, #152	@ 0x98
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800457c:	2300      	movs	r3, #0
 800457e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004580:	2300      	movs	r3, #0
 8004582:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800459e:	2300      	movs	r3, #0
 80045a0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80045aa:	2300      	movs	r3, #0
 80045ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80045be:	2300      	movs	r3, #0
 80045c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80045d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80045e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fe7f 	bl	80042ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80045ee:	2301      	movs	r3, #1
 80045f0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004610:	2300      	movs	r3, #0
 8004612:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800461a:	2301      	movs	r3, #1
 800461c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800461e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004622:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004624:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004628:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800462a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800462e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004636:	2300      	movs	r3, #0
 8004638:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	4619      	mov	r1, r3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff05 	bl	8004454 <ETH_SetDMAConfig>
}
 800464a:	bf00      	nop
 800464c:	3798      	adds	r7, #152	@ 0x98
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3305      	adds	r3, #5
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	3204      	adds	r2, #4
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4b11      	ldr	r3, [pc, #68]	@ (80046bc <ETH_MACAddressConfig+0x68>)
 8004676:	4413      	add	r3, r2
 8004678:	461a      	mov	r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3303      	adds	r3, #3
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	061a      	lsls	r2, r3, #24
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3302      	adds	r3, #2
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3301      	adds	r3, #1
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	4313      	orrs	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <ETH_MACAddressConfig+0x6c>)
 80046a6:	4413      	add	r3, r2
 80046a8:	461a      	mov	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	6013      	str	r3, [r2, #0]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40028040 	.word	0x40028040
 80046c0:	40028044 	.word	0x40028044

080046c4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e03e      	b.n	8004750 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68d9      	ldr	r1, [r3, #12]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	440b      	add	r3, r1
 80046e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2200      	movs	r2, #0
 80046f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2200      	movs	r2, #0
 80046fa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	3206      	adds	r2, #6
 8004704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d80c      	bhi.n	8004734 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68d9      	ldr	r1, [r3, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	440b      	add	r3, r1
 800472c:	461a      	mov	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	e004      	b.n	800473e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3301      	adds	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d9bd      	bls.n	80046d2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004768:	611a      	str	r2, [r3, #16]
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e048      	b.n	8004816 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6919      	ldr	r1, [r3, #16]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	440b      	add	r3, r1
 8004794:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2200      	movs	r2, #0
 80047a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2200      	movs	r2, #0
 80047a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2200      	movs	r2, #0
 80047b2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80047c0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	3212      	adds	r2, #18
 80047e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d80c      	bhi.n	8004806 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6919      	ldr	r1, [r3, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	440b      	add	r3, r1
 80047fe:	461a      	mov	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	e004      	b.n	8004810 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	461a      	mov	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d9b3      	bls.n	8004784 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004846:	60da      	str	r2, [r3, #12]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	@ 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	e177      	b.n	8004b60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004870:	2201      	movs	r2, #1
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4013      	ands	r3, r2
 8004882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	429a      	cmp	r2, r3
 800488a:	f040 8166 	bne.w	8004b5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d005      	beq.n	80048a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d130      	bne.n	8004908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	2203      	movs	r2, #3
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048dc:	2201      	movs	r2, #1
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 0201 	and.w	r2, r3, #1
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	2b03      	cmp	r3, #3
 8004912:	d017      	beq.n	8004944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	2203      	movs	r2, #3
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d123      	bne.n	8004998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	08da      	lsrs	r2, r3, #3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3208      	adds	r2, #8
 8004958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	220f      	movs	r2, #15
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	08da      	lsrs	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3208      	adds	r2, #8
 8004992:	69b9      	ldr	r1, [r7, #24]
 8004994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	2203      	movs	r2, #3
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 0203 	and.w	r2, r3, #3
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80c0 	beq.w	8004b5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	4b66      	ldr	r3, [pc, #408]	@ (8004b78 <HAL_GPIO_Init+0x324>)
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	4a65      	ldr	r2, [pc, #404]	@ (8004b78 <HAL_GPIO_Init+0x324>)
 80049e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ea:	4b63      	ldr	r3, [pc, #396]	@ (8004b78 <HAL_GPIO_Init+0x324>)
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049f6:	4a61      	ldr	r2, [pc, #388]	@ (8004b7c <HAL_GPIO_Init+0x328>)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	3302      	adds	r3, #2
 80049fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	@ (8004b80 <HAL_GPIO_Init+0x32c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d037      	beq.n	8004a92 <HAL_GPIO_Init+0x23e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a57      	ldr	r2, [pc, #348]	@ (8004b84 <HAL_GPIO_Init+0x330>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d031      	beq.n	8004a8e <HAL_GPIO_Init+0x23a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a56      	ldr	r2, [pc, #344]	@ (8004b88 <HAL_GPIO_Init+0x334>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d02b      	beq.n	8004a8a <HAL_GPIO_Init+0x236>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a55      	ldr	r2, [pc, #340]	@ (8004b8c <HAL_GPIO_Init+0x338>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d025      	beq.n	8004a86 <HAL_GPIO_Init+0x232>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a54      	ldr	r2, [pc, #336]	@ (8004b90 <HAL_GPIO_Init+0x33c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01f      	beq.n	8004a82 <HAL_GPIO_Init+0x22e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a53      	ldr	r2, [pc, #332]	@ (8004b94 <HAL_GPIO_Init+0x340>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d019      	beq.n	8004a7e <HAL_GPIO_Init+0x22a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a52      	ldr	r2, [pc, #328]	@ (8004b98 <HAL_GPIO_Init+0x344>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_GPIO_Init+0x226>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a51      	ldr	r2, [pc, #324]	@ (8004b9c <HAL_GPIO_Init+0x348>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00d      	beq.n	8004a76 <HAL_GPIO_Init+0x222>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a50      	ldr	r2, [pc, #320]	@ (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <HAL_GPIO_Init+0x21e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a4f      	ldr	r2, [pc, #316]	@ (8004ba4 <HAL_GPIO_Init+0x350>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_GPIO_Init+0x21a>
 8004a6a:	2309      	movs	r3, #9
 8004a6c:	e012      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a6e:	230a      	movs	r3, #10
 8004a70:	e010      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a72:	2308      	movs	r3, #8
 8004a74:	e00e      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a76:	2307      	movs	r3, #7
 8004a78:	e00c      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a7a:	2306      	movs	r3, #6
 8004a7c:	e00a      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a7e:	2305      	movs	r3, #5
 8004a80:	e008      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a82:	2304      	movs	r3, #4
 8004a84:	e006      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a86:	2303      	movs	r3, #3
 8004a88:	e004      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e002      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <HAL_GPIO_Init+0x240>
 8004a92:	2300      	movs	r3, #0
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	f002 0203 	and.w	r2, r2, #3
 8004a9a:	0092      	lsls	r2, r2, #2
 8004a9c:	4093      	lsls	r3, r2
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aa4:	4935      	ldr	r1, [pc, #212]	@ (8004b7c <HAL_GPIO_Init+0x328>)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	3302      	adds	r3, #2
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba8 <HAL_GPIO_Init+0x354>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ad6:	4a34      	ldr	r2, [pc, #208]	@ (8004ba8 <HAL_GPIO_Init+0x354>)
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004adc:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <HAL_GPIO_Init+0x354>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b00:	4a29      	ldr	r2, [pc, #164]	@ (8004ba8 <HAL_GPIO_Init+0x354>)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b06:	4b28      	ldr	r3, [pc, #160]	@ (8004ba8 <HAL_GPIO_Init+0x354>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba8 <HAL_GPIO_Init+0x354>)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <HAL_GPIO_Init+0x354>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b54:	4a14      	ldr	r2, [pc, #80]	@ (8004ba8 <HAL_GPIO_Init+0x354>)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b0f      	cmp	r3, #15
 8004b64:	f67f ae84 	bls.w	8004870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3724      	adds	r7, #36	@ 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40013800 	.word	0x40013800
 8004b80:	40020000 	.word	0x40020000
 8004b84:	40020400 	.word	0x40020400
 8004b88:	40020800 	.word	0x40020800
 8004b8c:	40020c00 	.word	0x40020c00
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40021400 	.word	0x40021400
 8004b98:	40021800 	.word	0x40021800
 8004b9c:	40021c00 	.word	0x40021c00
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40022400 	.word	0x40022400
 8004ba8:	40013c00 	.word	0x40013c00

08004bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bbc:	787b      	ldrb	r3, [r7, #1]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bc2:	887a      	ldrh	r2, [r7, #2]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bc8:	e003      	b.n	8004bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	041a      	lsls	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	619a      	str	r2, [r3, #24]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e12b      	b.n	8004e4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fd fd4c 	bl	80026a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2224      	movs	r2, #36	@ 0x24
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c44:	f002 ff4c 	bl	8007ae0 <HAL_RCC_GetPCLK1Freq>
 8004c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4a81      	ldr	r2, [pc, #516]	@ (8004e54 <HAL_I2C_Init+0x274>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d807      	bhi.n	8004c64 <HAL_I2C_Init+0x84>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a80      	ldr	r2, [pc, #512]	@ (8004e58 <HAL_I2C_Init+0x278>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	bf94      	ite	ls
 8004c5c:	2301      	movls	r3, #1
 8004c5e:	2300      	movhi	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e006      	b.n	8004c72 <HAL_I2C_Init+0x92>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a7d      	ldr	r2, [pc, #500]	@ (8004e5c <HAL_I2C_Init+0x27c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	bf94      	ite	ls
 8004c6c:	2301      	movls	r3, #1
 8004c6e:	2300      	movhi	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e0e7      	b.n	8004e4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a78      	ldr	r2, [pc, #480]	@ (8004e60 <HAL_I2C_Init+0x280>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0c9b      	lsrs	r3, r3, #18
 8004c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8004e54 <HAL_I2C_Init+0x274>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d802      	bhi.n	8004cb4 <HAL_I2C_Init+0xd4>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	e009      	b.n	8004cc8 <HAL_I2C_Init+0xe8>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	4a69      	ldr	r2, [pc, #420]	@ (8004e64 <HAL_I2C_Init+0x284>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	099b      	lsrs	r3, r3, #6
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004cda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	495c      	ldr	r1, [pc, #368]	@ (8004e54 <HAL_I2C_Init+0x274>)
 8004ce4:	428b      	cmp	r3, r1
 8004ce6:	d819      	bhi.n	8004d1c <HAL_I2C_Init+0x13c>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1e59      	subs	r1, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf6:	1c59      	adds	r1, r3, #1
 8004cf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004cfc:	400b      	ands	r3, r1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_I2C_Init+0x138>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1e59      	subs	r1, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d10:	3301      	adds	r3, #1
 8004d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d16:	e051      	b.n	8004dbc <HAL_I2C_Init+0x1dc>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	e04f      	b.n	8004dbc <HAL_I2C_Init+0x1dc>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d111      	bne.n	8004d48 <HAL_I2C_Init+0x168>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	1e58      	subs	r0, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6859      	ldr	r1, [r3, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	440b      	add	r3, r1
 8004d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d36:	3301      	adds	r3, #1
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e012      	b.n	8004d6e <HAL_I2C_Init+0x18e>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1e58      	subs	r0, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6859      	ldr	r1, [r3, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	0099      	lsls	r1, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Init+0x196>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e022      	b.n	8004dbc <HAL_I2C_Init+0x1dc>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10e      	bne.n	8004d9c <HAL_I2C_Init+0x1bc>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1e58      	subs	r0, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6859      	ldr	r1, [r3, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	440b      	add	r3, r1
 8004d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d9a:	e00f      	b.n	8004dbc <HAL_I2C_Init+0x1dc>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e58      	subs	r0, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	0099      	lsls	r1, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db2:	3301      	adds	r3, #1
 8004db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	6809      	ldr	r1, [r1, #0]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69da      	ldr	r2, [r3, #28]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004dea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6911      	ldr	r1, [r2, #16]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	4311      	orrs	r1, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	000186a0 	.word	0x000186a0
 8004e58:	001e847f 	.word	0x001e847f
 8004e5c:	003d08ff 	.word	0x003d08ff
 8004e60:	431bde83 	.word	0x431bde83
 8004e64:	10624dd3 	.word	0x10624dd3

08004e68 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b80      	cmp	r3, #128	@ 0x80
 8004e7c:	d103      	bne.n	8004e86 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]
  }
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	817b      	strh	r3, [r7, #10]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ea8:	f7fd ffda 	bl	8002e60 <HAL_GetTick>
 8004eac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	f040 80e0 	bne.w	800507c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	2319      	movs	r3, #25
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	4970      	ldr	r1, [pc, #448]	@ (8005088 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f001 fdea 	bl	8006aa0 <I2C_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e0d3      	b.n	800507e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_I2C_Master_Transmit+0x50>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e0cc      	b.n	800507e <HAL_I2C_Master_Transmit+0x1ea>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d007      	beq.n	8004f0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2221      	movs	r2, #33	@ 0x21
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2210      	movs	r2, #16
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	893a      	ldrh	r2, [r7, #8]
 8004f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a50      	ldr	r2, [pc, #320]	@ (800508c <HAL_I2C_Master_Transmit+0x1f8>)
 8004f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f4c:	8979      	ldrh	r1, [r7, #10]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f001 fc7a 	bl	800684c <I2C_MasterRequestWrite>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e08d      	b.n	800507e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f78:	e066      	b.n	8005048 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6a39      	ldr	r1, [r7, #32]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f001 fea8 	bl	8006cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00d      	beq.n	8004fa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d107      	bne.n	8004fa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06b      	b.n	800507e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	781a      	ldrb	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d11b      	bne.n	800501c <HAL_I2C_Master_Transmit+0x188>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d017      	beq.n	800501c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	781a      	ldrb	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	6a39      	ldr	r1, [r7, #32]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f001 fe9f 	bl	8006d64 <I2C_WaitOnBTFFlagUntilTimeout>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00d      	beq.n	8005048 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	2b04      	cmp	r3, #4
 8005032:	d107      	bne.n	8005044 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005042:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e01a      	b.n	800507e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	d194      	bne.n	8004f7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	00100002 	.word	0x00100002
 800508c:	ffff0000 	.word	0xffff0000

08005090 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d003      	beq.n	80050c8 <HAL_I2C_EV_IRQHandler+0x38>
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b40      	cmp	r3, #64	@ 0x40
 80050c4:	f040 80b1 	bne.w	800522a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <HAL_I2C_EV_IRQHandler+0x6e>
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80050e8:	d003      	beq.n	80050f2 <HAL_I2C_EV_IRQHandler+0x62>
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80050f0:	d101      	bne.n	80050f6 <HAL_I2C_EV_IRQHandler+0x66>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <HAL_I2C_EV_IRQHandler+0x68>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	f000 8114 	beq.w	8005326 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <HAL_I2C_EV_IRQHandler+0x90>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800510e:	2b00      	cmp	r3, #0
 8005110:	d006      	beq.n	8005120 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 fecf 	bl	8006eb6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fd7a 	bl	8005c12 <I2C_Master_SB>
 800511e:	e083      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_I2C_EV_IRQHandler+0xac>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fdf2 	bl	8005d1e <I2C_Master_ADD10>
 800513a:	e075      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <HAL_I2C_EV_IRQHandler+0xc8>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fe0e 	bl	8005d72 <I2C_Master_ADDR>
 8005156:	e067      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d036      	beq.n	80051d0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800516c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005170:	f000 80db 	beq.w	800532a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <HAL_I2C_EV_IRQHandler+0x10a>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_I2C_EV_IRQHandler+0x10a>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9d6 	bl	8005544 <I2C_MasterTransmit_TXE>
 8005198:	e046      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80c2 	beq.w	800532a <HAL_I2C_EV_IRQHandler+0x29a>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80bc 	beq.w	800532a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b21      	cmp	r3, #33	@ 0x21
 80051b6:	d103      	bne.n	80051c0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fa5f 	bl	800567c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051be:	e0b4      	b.n	800532a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	f040 80b1 	bne.w	800532a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 facd 	bl	8005768 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ce:	e0ac      	b.n	800532a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051de:	f000 80a4 	beq.w	800532a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <HAL_I2C_EV_IRQHandler+0x178>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d008      	beq.n	8005208 <HAL_I2C_EV_IRQHandler+0x178>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb49 	bl	8005898 <I2C_MasterReceive_RXNE>
 8005206:	e00f      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 808b 	beq.w	800532a <HAL_I2C_EV_IRQHandler+0x29a>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8085 	beq.w	800532a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fc01 	bl	8005a28 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005226:	e080      	b.n	800532a <HAL_I2C_EV_IRQHandler+0x29a>
 8005228:	e07f      	b.n	800532a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e007      	b.n	800524c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d011      	beq.n	800527a <HAL_I2C_EV_IRQHandler+0x1ea>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00c      	beq.n	800527a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005270:	69b9      	ldr	r1, [r7, #24]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 ffcc 	bl	8006210 <I2C_Slave_ADDR>
 8005278:	e05a      	b.n	8005330 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_I2C_EV_IRQHandler+0x206>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f001 f806 	bl	80062a0 <I2C_Slave_STOPF>
 8005294:	e04c      	b.n	8005330 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005296:	7bbb      	ldrb	r3, [r7, #14]
 8005298:	2b21      	cmp	r3, #33	@ 0x21
 800529a:	d002      	beq.n	80052a2 <HAL_I2C_EV_IRQHandler+0x212>
 800529c:	7bbb      	ldrb	r3, [r7, #14]
 800529e:	2b29      	cmp	r3, #41	@ 0x29
 80052a0:	d120      	bne.n	80052e4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <HAL_I2C_EV_IRQHandler+0x238>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_I2C_EV_IRQHandler+0x238>
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fee7 	bl	8006094 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052c6:	e032      	b.n	800532e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02d      	beq.n	800532e <HAL_I2C_EV_IRQHandler+0x29e>
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d028      	beq.n	800532e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 ff16 	bl	800610e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052e2:	e024      	b.n	800532e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <HAL_I2C_EV_IRQHandler+0x27a>
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_I2C_EV_IRQHandler+0x27a>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 ff24 	bl	8006150 <I2C_SlaveReceive_RXNE>
 8005308:	e012      	b.n	8005330 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00d      	beq.n	8005330 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 ff54 	bl	80061cc <I2C_SlaveReceive_BTF>
 8005324:	e004      	b.n	8005330 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800532e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b08a      	sub	sp, #40	@ 0x28
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800534e:	2300      	movs	r3, #0
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005358:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00d      	beq.n	8005380 <HAL_I2C_ER_IRQHandler+0x4a>
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800537e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00d      	beq.n	80053a6 <HAL_I2C_ER_IRQHandler+0x70>
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	f043 0302 	orr.w	r3, r3, #2
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80053a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d03e      	beq.n	800542e <HAL_I2C_ER_IRQHandler+0xf8>
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d039      	beq.n	800542e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80053ba:	7efb      	ldrb	r3, [r7, #27]
 80053bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80053d4:	7ebb      	ldrb	r3, [r7, #26]
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d112      	bne.n	8005400 <HAL_I2C_ER_IRQHandler+0xca>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10f      	bne.n	8005400 <HAL_I2C_ER_IRQHandler+0xca>
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	2b21      	cmp	r3, #33	@ 0x21
 80053e4:	d008      	beq.n	80053f8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b29      	cmp	r3, #41	@ 0x29
 80053ea:	d005      	beq.n	80053f8 <HAL_I2C_ER_IRQHandler+0xc2>
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	2b28      	cmp	r3, #40	@ 0x28
 80053f0:	d106      	bne.n	8005400 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b21      	cmp	r3, #33	@ 0x21
 80053f6:	d103      	bne.n	8005400 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 f881 	bl	8006500 <I2C_Slave_AF>
 80053fe:	e016      	b.n	800542e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005408:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005412:	7efb      	ldrb	r3, [r7, #27]
 8005414:	2b10      	cmp	r3, #16
 8005416:	d002      	beq.n	800541e <HAL_I2C_ER_IRQHandler+0xe8>
 8005418:	7efb      	ldrb	r3, [r7, #27]
 800541a:	2b40      	cmp	r3, #64	@ 0x40
 800541c:	d107      	bne.n	800542e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00d      	beq.n	8005454 <HAL_I2C_ER_IRQHandler+0x11e>
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	f043 0308 	orr.w	r3, r3, #8
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005452:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f001 f8be 	bl	80065e8 <I2C_ITError>
  }
}
 800546c:	bf00      	nop
 800546e:	3728      	adds	r7, #40	@ 0x28
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	70fb      	strb	r3, [r7, #3]
 80054d0:	4613      	mov	r3, r2
 80054d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005552:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800555a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d150      	bne.n	800560c <I2C_MasterTransmit_TXE+0xc8>
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b21      	cmp	r3, #33	@ 0x21
 800556e:	d14d      	bne.n	800560c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b08      	cmp	r3, #8
 8005574:	d01d      	beq.n	80055b2 <I2C_MasterTransmit_TXE+0x6e>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b20      	cmp	r3, #32
 800557a:	d01a      	beq.n	80055b2 <I2C_MasterTransmit_TXE+0x6e>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005582:	d016      	beq.n	80055b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005592:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2211      	movs	r2, #17
 8005598:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ff62 	bl	8005474 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055b0:	e060      	b.n	8005674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d107      	bne.n	80055fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff7d 	bl	80054f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055fa:	e03b      	b.n	8005674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff35 	bl	8005474 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800560a:	e033      	b.n	8005674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b21      	cmp	r3, #33	@ 0x21
 8005610:	d005      	beq.n	800561e <I2C_MasterTransmit_TXE+0xda>
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	2b40      	cmp	r3, #64	@ 0x40
 8005616:	d12d      	bne.n	8005674 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b22      	cmp	r3, #34	@ 0x22
 800561c:	d12a      	bne.n	8005674 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d108      	bne.n	800563a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005636:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005638:	e01c      	b.n	8005674 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b40      	cmp	r3, #64	@ 0x40
 8005644:	d103      	bne.n	800564e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f88e 	bl	8005768 <I2C_MemoryTransmit_TXE_BTF>
}
 800564c:	e012      	b.n	8005674 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	781a      	ldrb	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005672:	e7ff      	b.n	8005674 <I2C_MasterTransmit_TXE+0x130>
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b21      	cmp	r3, #33	@ 0x21
 8005694:	d164      	bne.n	8005760 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d012      	beq.n	80056c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80056c4:	e04c      	b.n	8005760 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d01d      	beq.n	8005708 <I2C_MasterTransmit_BTF+0x8c>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d01a      	beq.n	8005708 <I2C_MasterTransmit_BTF+0x8c>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056d8:	d016      	beq.n	8005708 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2211      	movs	r2, #17
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff feb7 	bl	8005474 <HAL_I2C_MasterTxCpltCallback>
}
 8005706:	e02b      	b.n	8005760 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005716:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005726:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b40      	cmp	r3, #64	@ 0x40
 8005740:	d107      	bne.n	8005752 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff fed2 	bl	80054f4 <HAL_I2C_MemTxCpltCallback>
}
 8005750:	e006      	b.n	8005760 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fe8a 	bl	8005474 <HAL_I2C_MasterTxCpltCallback>
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005776:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11d      	bne.n	80057bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10b      	bne.n	80057a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800578c:	b2da      	uxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800579e:	e077      	b.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	121b      	asrs	r3, r3, #8
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057ba:	e069      	b.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10b      	bne.n	80057dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057da:	e059      	b.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d152      	bne.n	800588a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b22      	cmp	r3, #34	@ 0x22
 80057e8:	d10d      	bne.n	8005806 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005804:	e044      	b.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d015      	beq.n	800583c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b21      	cmp	r3, #33	@ 0x21
 8005814:	d112      	bne.n	800583c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800583a:	e029      	b.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d124      	bne.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	2b21      	cmp	r3, #33	@ 0x21
 800584a:	d121      	bne.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800585a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800586a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fe36 	bl	80054f4 <HAL_I2C_MemTxCpltCallback>
}
 8005888:	e002      	b.n	8005890 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff faec 	bl	8004e68 <I2C_Flush_DR>
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b22      	cmp	r3, #34	@ 0x22
 80058aa:	f040 80b9 	bne.w	8005a20 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d921      	bls.n	8005906 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	f040 8096 	bne.w	8005a20 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005902:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005904:	e08c      	b.n	8005a20 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590a:	2b02      	cmp	r3, #2
 800590c:	d07f      	beq.n	8005a0e <I2C_MasterReceive_RXNE+0x176>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d002      	beq.n	800591a <I2C_MasterReceive_RXNE+0x82>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d179      	bne.n	8005a0e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 fa6a 	bl	8006df4 <I2C_WaitOnSTOPRequestThroughIT>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d14c      	bne.n	80059c0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005934:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005944:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b40      	cmp	r3, #64	@ 0x40
 800597e:	d10a      	bne.n	8005996 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fdba 	bl	8005508 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005994:	e044      	b.n	8005a20 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d002      	beq.n	80059aa <I2C_MasterReceive_RXNE+0x112>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d103      	bne.n	80059b2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80059b0:	e002      	b.n	80059b8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2212      	movs	r2, #18
 80059b6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff fd65 	bl	8005488 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059be:	e02f      	b.n	8005a20 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fd88 	bl	800551c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a0c:	e008      	b.n	8005a20 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a1c:	605a      	str	r2, [r3, #4]
}
 8005a1e:	e7ff      	b.n	8005a20 <I2C_MasterReceive_RXNE+0x188>
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d11b      	bne.n	8005a78 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a4e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005a76:	e0c8      	b.n	8005c0a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d129      	bne.n	8005ad6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a90:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d00a      	beq.n	8005aae <I2C_MasterReceive_BTF+0x86>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d007      	beq.n	8005aae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005ad4:	e099      	b.n	8005c0a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	f040 8081 	bne.w	8005be4 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d002      	beq.n	8005aee <I2C_MasterReceive_BTF+0xc6>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b10      	cmp	r3, #16
 8005aec:	d108      	bne.n	8005b00 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e019      	b.n	8005b34 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d002      	beq.n	8005b0c <I2C_MasterReceive_BTF+0xe4>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d108      	bne.n	8005b1e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e00a      	b.n	8005b34 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d007      	beq.n	8005b34 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005b8e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b40      	cmp	r3, #64	@ 0x40
 8005ba2:	d10a      	bne.n	8005bba <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fca8 	bl	8005508 <HAL_I2C_MemRxCpltCallback>
}
 8005bb8:	e027      	b.n	8005c0a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d002      	beq.n	8005bce <I2C_MasterReceive_BTF+0x1a6>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d103      	bne.n	8005bd6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bd4:	e002      	b.n	8005bdc <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2212      	movs	r2, #18
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fc53 	bl	8005488 <HAL_I2C_MasterRxCpltCallback>
}
 8005be2:	e012      	b.n	8005c0a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b40      	cmp	r3, #64	@ 0x40
 8005c24:	d117      	bne.n	8005c56 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c3e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005c40:	e067      	b.n	8005d12 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]
}
 8005c54:	e05d      	b.n	8005d12 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c5e:	d133      	bne.n	8005cc8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b21      	cmp	r3, #33	@ 0x21
 8005c6a:	d109      	bne.n	8005c80 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c7c:	611a      	str	r2, [r3, #16]
 8005c7e:	e008      	b.n	8005c92 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <I2C_Master_SB+0x92>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d108      	bne.n	8005cb6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d032      	beq.n	8005d12 <I2C_Master_SB+0x100>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d02d      	beq.n	8005d12 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cc4:	605a      	str	r2, [r3, #4]
}
 8005cc6:	e024      	b.n	8005d12 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10e      	bne.n	8005cee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	11db      	asrs	r3, r3, #7
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 0306 	and.w	r3, r3, #6
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f063 030f 	orn	r3, r3, #15
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	611a      	str	r2, [r3, #16]
}
 8005cec:	e011      	b.n	8005d12 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d10d      	bne.n	8005d12 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	11db      	asrs	r3, r3, #7
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f003 0306 	and.w	r3, r3, #6
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f063 030e 	orn	r3, r3, #14
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	611a      	str	r2, [r3, #16]
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <I2C_Master_ADD10+0x26>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d108      	bne.n	8005d56 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00c      	beq.n	8005d66 <I2C_Master_ADD10+0x48>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d64:	605a      	str	r2, [r3, #4]
  }
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b091      	sub	sp, #68	@ 0x44
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b22      	cmp	r3, #34	@ 0x22
 8005d9a:	f040 8169 	bne.w	8006070 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <I2C_Master_ADDR+0x54>
 8005da6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005daa:	2b40      	cmp	r3, #64	@ 0x40
 8005dac:	d10b      	bne.n	8005dc6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dae:	2300      	movs	r3, #0
 8005db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	e160      	b.n	8006088 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d11d      	bne.n	8005e0a <I2C_Master_ADDR+0x98>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005dd6:	d118      	bne.n	8005e0a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dfc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e08:	e13e      	b.n	8006088 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d113      	bne.n	8005e3c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e14:	2300      	movs	r3, #0
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e115      	b.n	8006068 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	f040 808a 	bne.w	8005f5c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e4e:	d137      	bne.n	8005ec0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e6e:	d113      	bne.n	8005e98 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e7e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	e0e7      	b.n	8006068 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	623b      	str	r3, [r7, #32]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e0d3      	b.n	8006068 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d02e      	beq.n	8005f24 <I2C_Master_ADDR+0x1b2>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d02b      	beq.n	8005f24 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ece:	2b12      	cmp	r3, #18
 8005ed0:	d102      	bne.n	8005ed8 <I2C_Master_ADDR+0x166>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d125      	bne.n	8005f24 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d00e      	beq.n	8005efc <I2C_Master_ADDR+0x18a>
 8005ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d00b      	beq.n	8005efc <I2C_Master_ADDR+0x18a>
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d008      	beq.n	8005efc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e007      	b.n	8005f0c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f0a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	e0a1      	b.n	8006068 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f32:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e085      	b.n	8006068 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d14d      	bne.n	8006002 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d016      	beq.n	8005f9a <I2C_Master_ADDR+0x228>
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d013      	beq.n	8005f9a <I2C_Master_ADDR+0x228>
 8005f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d010      	beq.n	8005f9a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f86:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e007      	b.n	8005faa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fa8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fb8:	d117      	bne.n	8005fea <I2C_Master_ADDR+0x278>
 8005fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fc0:	d00b      	beq.n	8005fda <I2C_Master_ADDR+0x268>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d008      	beq.n	8005fda <I2C_Master_ADDR+0x268>
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d005      	beq.n	8005fda <I2C_Master_ADDR+0x268>
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d002      	beq.n	8005fda <I2C_Master_ADDR+0x268>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d107      	bne.n	8005fea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fe8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	e032      	b.n	8006068 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006010:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800601c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006020:	d117      	bne.n	8006052 <I2C_Master_ADDR+0x2e0>
 8006022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006024:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006028:	d00b      	beq.n	8006042 <I2C_Master_ADDR+0x2d0>
 800602a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602c:	2b01      	cmp	r3, #1
 800602e:	d008      	beq.n	8006042 <I2C_Master_ADDR+0x2d0>
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	2b08      	cmp	r3, #8
 8006034:	d005      	beq.n	8006042 <I2C_Master_ADDR+0x2d0>
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	2b10      	cmp	r3, #16
 800603a:	d002      	beq.n	8006042 <I2C_Master_ADDR+0x2d0>
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	2b20      	cmp	r3, #32
 8006040:	d107      	bne.n	8006052 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006050:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006052:	2300      	movs	r3, #0
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800606e:	e00b      	b.n	8006088 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	e7ff      	b.n	8006088 <I2C_Master_ADDR+0x316>
 8006088:	bf00      	nop
 800608a:	3744      	adds	r7, #68	@ 0x44
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02b      	beq.n	8006106 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d114      	bne.n	8006106 <I2C_SlaveTransmit_TXE+0x72>
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b29      	cmp	r3, #41	@ 0x29
 80060e0:	d111      	bne.n	8006106 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2221      	movs	r2, #33	@ 0x21
 80060f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2228      	movs	r2, #40	@ 0x28
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff f9cb 	bl	800549c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d011      	beq.n	8006144 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800615e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d02c      	beq.n	80061c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d114      	bne.n	80061c4 <I2C_SlaveReceive_RXNE+0x74>
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b2a      	cmp	r3, #42	@ 0x2a
 800619e:	d111      	bne.n	80061c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2222      	movs	r2, #34	@ 0x22
 80061b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2228      	movs	r2, #40	@ 0x28
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff f976 	bl	80054b0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d012      	beq.n	8006204 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800622a:	2b28      	cmp	r3, #40	@ 0x28
 800622c:	d125      	bne.n	800627a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800623c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	81bb      	strh	r3, [r7, #12]
 800625c:	e002      	b.n	8006264 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800626c:	89ba      	ldrh	r2, [r7, #12]
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff f926 	bl	80054c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006278:	e00e      	b.n	8006298 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006298:	bf00      	nop
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80062c0:	2300      	movs	r3, #0
 80062c2:	60bb      	str	r3, [r7, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	60bb      	str	r3, [r7, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062fc:	d172      	bne.n	80063e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b22      	cmp	r3, #34	@ 0x22
 8006302:	d002      	beq.n	800630a <I2C_Slave_STOPF+0x6a>
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b2a      	cmp	r3, #42	@ 0x2a
 8006308:	d135      	bne.n	8006376 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	b29a      	uxth	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	f043 0204 	orr.w	r2, r3, #4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800633c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006342:	4618      	mov	r0, r3
 8006344:	f7fd fe48 	bl	8003fd8 <HAL_DMA_GetState>
 8006348:	4603      	mov	r3, r0
 800634a:	2b01      	cmp	r3, #1
 800634c:	d049      	beq.n	80063e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006352:	4a69      	ldr	r2, [pc, #420]	@ (80064f8 <I2C_Slave_STOPF+0x258>)
 8006354:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635a:	4618      	mov	r0, r3
 800635c:	f7fd fc90 	bl	8003c80 <HAL_DMA_Abort_IT>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d03d      	beq.n	80063e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006370:	4610      	mov	r0, r2
 8006372:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006374:	e035      	b.n	80063e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	b29a      	uxth	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	f043 0204 	orr.w	r2, r3, #4
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fd fe12 	bl	8003fd8 <HAL_DMA_GetState>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d014      	beq.n	80063e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063be:	4a4e      	ldr	r2, [pc, #312]	@ (80064f8 <I2C_Slave_STOPF+0x258>)
 80063c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fd fc5a 	bl	8003c80 <HAL_DMA_Abort_IT>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063dc:	4610      	mov	r0, r2
 80063de:	4798      	blx	r3
 80063e0:	e000      	b.n	80063e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d03e      	beq.n	800646c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d112      	bne.n	8006422 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642c:	2b40      	cmp	r3, #64	@ 0x40
 800642e:	d112      	bne.n	8006456 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691a      	ldr	r2, [r3, #16]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006464:	f043 0204 	orr.w	r2, r3, #4
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8b7 	bl	80065e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800647a:	e039      	b.n	80064f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006480:	d109      	bne.n	8006496 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2228      	movs	r2, #40	@ 0x28
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff f80d 	bl	80054b0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b28      	cmp	r3, #40	@ 0x28
 80064a0:	d111      	bne.n	80064c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a15      	ldr	r2, [pc, #84]	@ (80064fc <I2C_Slave_STOPF+0x25c>)
 80064a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff f80e 	bl	80054e0 <HAL_I2C_ListenCpltCallback>
}
 80064c4:	e014      	b.n	80064f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ca:	2b22      	cmp	r3, #34	@ 0x22
 80064cc:	d002      	beq.n	80064d4 <I2C_Slave_STOPF+0x234>
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2b22      	cmp	r3, #34	@ 0x22
 80064d2:	d10d      	bne.n	80064f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fe ffe0 	bl	80054b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	08006951 	.word	0x08006951
 80064fc:	ffff0000 	.word	0xffff0000

08006500 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800650e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d002      	beq.n	8006522 <I2C_Slave_AF+0x22>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b20      	cmp	r3, #32
 8006520:	d129      	bne.n	8006576 <I2C_Slave_AF+0x76>
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b28      	cmp	r3, #40	@ 0x28
 8006526:	d126      	bne.n	8006576 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a2e      	ldr	r2, [pc, #184]	@ (80065e4 <I2C_Slave_AF+0xe4>)
 800652c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800653c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006546:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006556:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fe ffb6 	bl	80054e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006574:	e031      	b.n	80065da <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b21      	cmp	r3, #33	@ 0x21
 800657a:	d129      	bne.n	80065d0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a19      	ldr	r2, [pc, #100]	@ (80065e4 <I2C_Slave_AF+0xe4>)
 8006580:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2221      	movs	r2, #33	@ 0x21
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fe fc50 	bl	8004e68 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fe ff67 	bl	800549c <HAL_I2C_SlaveTxCpltCallback>
}
 80065ce:	e004      	b.n	80065da <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065d8:	615a      	str	r2, [r3, #20]
}
 80065da:	bf00      	nop
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	ffff0000 	.word	0xffff0000

080065e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	2b10      	cmp	r3, #16
 8006604:	d002      	beq.n	800660c <I2C_ITError+0x24>
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	2b40      	cmp	r3, #64	@ 0x40
 800660a:	d10a      	bne.n	8006622 <I2C_ITError+0x3a>
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b22      	cmp	r3, #34	@ 0x22
 8006610:	d107      	bne.n	8006622 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006620:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006628:	2b28      	cmp	r3, #40	@ 0x28
 800662a:	d107      	bne.n	800663c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2228      	movs	r2, #40	@ 0x28
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800663a:	e015      	b.n	8006668 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006646:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800664a:	d00a      	beq.n	8006662 <I2C_ITError+0x7a>
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	2b60      	cmp	r3, #96	@ 0x60
 8006650:	d007      	beq.n	8006662 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006672:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006676:	d162      	bne.n	800673e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006686:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b01      	cmp	r3, #1
 8006694:	d020      	beq.n	80066d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669a:	4a6a      	ldr	r2, [pc, #424]	@ (8006844 <I2C_ITError+0x25c>)
 800669c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fd faec 	bl	8003c80 <HAL_DMA_Abort_IT>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8089 	beq.w	80067c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066d2:	4610      	mov	r0, r2
 80066d4:	4798      	blx	r3
 80066d6:	e074      	b.n	80067c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066dc:	4a59      	ldr	r2, [pc, #356]	@ (8006844 <I2C_ITError+0x25c>)
 80066de:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fd facb 	bl	8003c80 <HAL_DMA_Abort_IT>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d068      	beq.n	80067c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fa:	2b40      	cmp	r3, #64	@ 0x40
 80066fc:	d10b      	bne.n	8006716 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
 800673c:	e041      	b.n	80067c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b60      	cmp	r3, #96	@ 0x60
 8006748:	d125      	bne.n	8006796 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006762:	2b40      	cmp	r3, #64	@ 0x40
 8006764:	d10b      	bne.n	800677e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fe fece 	bl	8005530 <HAL_I2C_AbortCpltCallback>
 8006794:	e015      	b.n	80067c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a0:	2b40      	cmp	r3, #64	@ 0x40
 80067a2:	d10b      	bne.n	80067bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fe fead 	bl	800551c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10e      	bne.n	80067f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80067fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006806:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b04      	cmp	r3, #4
 8006812:	d113      	bne.n	800683c <I2C_ITError+0x254>
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b28      	cmp	r3, #40	@ 0x28
 8006818:	d110      	bne.n	800683c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a0a      	ldr	r2, [pc, #40]	@ (8006848 <I2C_ITError+0x260>)
 800681e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fe fe52 	bl	80054e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	08006951 	.word	0x08006951
 8006848:	ffff0000 	.word	0xffff0000

0800684c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	607a      	str	r2, [r7, #4]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	460b      	mov	r3, r1
 800685a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006860:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d006      	beq.n	8006876 <I2C_MasterRequestWrite+0x2a>
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d003      	beq.n	8006876 <I2C_MasterRequestWrite+0x2a>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006874:	d108      	bne.n	8006888 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e00b      	b.n	80068a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688c:	2b12      	cmp	r3, #18
 800688e:	d107      	bne.n	80068a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800689e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f8f7 	bl	8006aa0 <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00d      	beq.n	80068d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c6:	d103      	bne.n	80068d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e035      	b.n	8006940 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068dc:	d108      	bne.n	80068f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068de:	897b      	ldrh	r3, [r7, #10]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80068ec:	611a      	str	r2, [r3, #16]
 80068ee:	e01b      	b.n	8006928 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068f0:	897b      	ldrh	r3, [r7, #10]
 80068f2:	11db      	asrs	r3, r3, #7
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0306 	and.w	r3, r3, #6
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	f063 030f 	orn	r3, r3, #15
 8006900:	b2da      	uxtb	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	490e      	ldr	r1, [pc, #56]	@ (8006948 <I2C_MasterRequestWrite+0xfc>)
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f940 	bl	8006b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e010      	b.n	8006940 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800691e:	897b      	ldrh	r3, [r7, #10]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4907      	ldr	r1, [pc, #28]	@ (800694c <I2C_MasterRequestWrite+0x100>)
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f930 	bl	8006b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	00010008 	.word	0x00010008
 800694c:	00010002 	.word	0x00010002

08006950 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006968:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800696a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a98 <I2C_DMAAbort+0x148>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	4a4a      	ldr	r2, [pc, #296]	@ (8006a9c <I2C_DMAAbort+0x14c>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	0a1a      	lsrs	r2, r3, #8
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	00da      	lsls	r2, r3, #3
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698e:	f043 0220 	orr.w	r2, r3, #32
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006996:	e00a      	b.n	80069ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b01      	subs	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ac:	d0ea      	beq.n	8006984 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ba:	2200      	movs	r2, #0
 80069bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ca:	2200      	movs	r2, #0
 80069cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f0:	2200      	movs	r2, #0
 80069f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	2200      	movs	r2, #0
 8006a02:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b60      	cmp	r3, #96	@ 0x60
 8006a1e:	d10e      	bne.n	8006a3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2200      	movs	r2, #0
 8006a34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a36:	6978      	ldr	r0, [r7, #20]
 8006a38:	f7fe fd7a 	bl	8005530 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a3c:	e027      	b.n	8006a8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a44:	2b28      	cmp	r3, #40	@ 0x28
 8006a46:	d117      	bne.n	8006a78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2228      	movs	r2, #40	@ 0x28
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006a76:	e007      	b.n	8006a88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006a88:	6978      	ldr	r0, [r7, #20]
 8006a8a:	f7fe fd47 	bl	800551c <HAL_I2C_ErrorCallback>
}
 8006a8e:	bf00      	nop
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	2000000c 	.word	0x2000000c
 8006a9c:	14f8b589 	.word	0x14f8b589

08006aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ab0:	e048      	b.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d044      	beq.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aba:	f7fc f9d1 	bl	8002e60 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d139      	bne.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d10d      	bne.n	8006af6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	43da      	mvns	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	e00c      	b.n	8006b10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	43da      	mvns	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4013      	ands	r3, r2
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d116      	bne.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e023      	b.n	8006b8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	0c1b      	lsrs	r3, r3, #16
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d10d      	bne.n	8006b6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	43da      	mvns	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bf0c      	ite	eq
 8006b60:	2301      	moveq	r3, #1
 8006b62:	2300      	movne	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	e00c      	b.n	8006b84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	43da      	mvns	r2, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	4013      	ands	r3, r2
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf0c      	ite	eq
 8006b7c:	2301      	moveq	r3, #1
 8006b7e:	2300      	movne	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d093      	beq.n	8006ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ba2:	e071      	b.n	8006c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bb2:	d123      	bne.n	8006bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be8:	f043 0204 	orr.w	r2, r3, #4
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e067      	b.n	8006ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d041      	beq.n	8006c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c04:	f7fc f92c 	bl	8002e60 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d302      	bcc.n	8006c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d136      	bne.n	8006c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	0c1b      	lsrs	r3, r3, #16
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d10c      	bne.n	8006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	43da      	mvns	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf14      	ite	ne
 8006c36:	2301      	movne	r3, #1
 8006c38:	2300      	moveq	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	e00b      	b.n	8006c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	43da      	mvns	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bf14      	ite	ne
 8006c50:	2301      	movne	r3, #1
 8006c52:	2300      	moveq	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d016      	beq.n	8006c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	f043 0220 	orr.w	r2, r3, #32
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e021      	b.n	8006ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	0c1b      	lsrs	r3, r3, #16
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d10c      	bne.n	8006cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	43da      	mvns	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	e00b      	b.n	8006cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	43da      	mvns	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	bf14      	ite	ne
 8006cbe:	2301      	movne	r3, #1
 8006cc0:	2300      	moveq	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f47f af6d 	bne.w	8006ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ce0:	e034      	b.n	8006d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 f8b8 	bl	8006e58 <I2C_IsAcknowledgeFailed>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e034      	b.n	8006d5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf8:	d028      	beq.n	8006d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfa:	f7fc f8b1 	bl	8002e60 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d302      	bcc.n	8006d10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d11d      	bne.n	8006d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d1a:	2b80      	cmp	r3, #128	@ 0x80
 8006d1c:	d016      	beq.n	8006d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d38:	f043 0220 	orr.w	r2, r3, #32
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e007      	b.n	8006d5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b80      	cmp	r3, #128	@ 0x80
 8006d58:	d1c3      	bne.n	8006ce2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d70:	e034      	b.n	8006ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f870 	bl	8006e58 <I2C_IsAcknowledgeFailed>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e034      	b.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d028      	beq.n	8006ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8a:	f7fc f869 	bl	8002e60 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d302      	bcc.n	8006da0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d11d      	bne.n	8006ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d016      	beq.n	8006ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e007      	b.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d1c3      	bne.n	8006d72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e00:	4b13      	ldr	r3, [pc, #76]	@ (8006e50 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	08db      	lsrs	r3, r3, #3
 8006e06:	4a13      	ldr	r2, [pc, #76]	@ (8006e54 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006e08:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0c:	0a1a      	lsrs	r2, r3, #8
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d107      	bne.n	8006e32 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	f043 0220 	orr.w	r2, r3, #32
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e008      	b.n	8006e44 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e40:	d0e9      	beq.n	8006e16 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	2000000c 	.word	0x2000000c
 8006e54:	14f8b589 	.word	0x14f8b589

08006e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6e:	d11b      	bne.n	8006ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e94:	f043 0204 	orr.w	r2, r3, #4
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006ec6:	d103      	bne.n	8006ed0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ece:	e007      	b.n	8006ee0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006ed8:	d102      	bne.n	8006ee0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2208      	movs	r2, #8
 8006ede:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d129      	bne.n	8006f56 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2224      	movs	r2, #36	@ 0x24
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0201 	bic.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0210 	bic.w	r2, r2, #16
 8006f28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0201 	orr.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e000      	b.n	8006f58 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006f56:	2302      	movs	r3, #2
  }
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d12a      	bne.n	8006fd4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2224      	movs	r2, #36	@ 0x24
 8006f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006f9e:	89fb      	ldrh	r3, [r7, #14]
 8006fa0:	f023 030f 	bic.w	r3, r3, #15
 8006fa4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	89fb      	ldrh	r3, [r7, #14]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	89fa      	ldrh	r2, [r7, #14]
 8006fb6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e000      	b.n	8006fd6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006fd4:	2302      	movs	r3, #2
  }
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af02      	add	r7, sp, #8
 8006fe8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e101      	b.n	80071f8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fb fcac 	bl	800296c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2203      	movs	r2, #3
 8007018:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007022:	d102      	bne.n	800702a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f002 f9a0 	bl	8009374 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	7c1a      	ldrb	r2, [r3, #16]
 800703c:	f88d 2000 	strb.w	r2, [sp]
 8007040:	3304      	adds	r3, #4
 8007042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007044:	f002 f932 	bl	80092ac <USB_CoreInit>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e0ce      	b.n	80071f8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f002 f998 	bl	8009396 <USB_SetCurrentMode>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0bf      	b.n	80071f8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
 800707c:	e04a      	b.n	8007114 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800707e:	7bfa      	ldrb	r2, [r7, #15]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3315      	adds	r3, #21
 800708e:	2201      	movs	r2, #1
 8007090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007092:	7bfa      	ldrb	r2, [r7, #15]
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	3314      	adds	r3, #20
 80070a2:	7bfa      	ldrb	r2, [r7, #15]
 80070a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80070a6:	7bfa      	ldrb	r2, [r7, #15]
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	b298      	uxth	r0, r3
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	332e      	adds	r3, #46	@ 0x2e
 80070ba:	4602      	mov	r2, r0
 80070bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070be:	7bfa      	ldrb	r2, [r7, #15]
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	4613      	mov	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	3318      	adds	r3, #24
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070d2:	7bfa      	ldrb	r2, [r7, #15]
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	331c      	adds	r3, #28
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070e6:	7bfa      	ldrb	r2, [r7, #15]
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	3320      	adds	r3, #32
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070fa:	7bfa      	ldrb	r2, [r7, #15]
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	3324      	adds	r3, #36	@ 0x24
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	3301      	adds	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	7bfa      	ldrb	r2, [r7, #15]
 800711a:	429a      	cmp	r2, r3
 800711c:	d3af      	bcc.n	800707e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
 8007122:	e044      	b.n	80071ae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007124:	7bfa      	ldrb	r2, [r7, #15]
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800713a:	7bfa      	ldrb	r2, [r7, #15]
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800714c:	7bfa      	ldrb	r2, [r7, #15]
 800714e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007150:	7bfa      	ldrb	r2, [r7, #15]
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007166:	7bfa      	ldrb	r2, [r7, #15]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800717c:	7bfa      	ldrb	r2, [r7, #15]
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	4613      	mov	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007192:	7bfa      	ldrb	r2, [r7, #15]
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	3301      	adds	r3, #1
 80071ac:	73fb      	strb	r3, [r7, #15]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	791b      	ldrb	r3, [r3, #4]
 80071b2:	7bfa      	ldrb	r2, [r7, #15]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3b5      	bcc.n	8007124 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	7c1a      	ldrb	r2, [r3, #16]
 80071c0:	f88d 2000 	strb.w	r2, [sp]
 80071c4:	3304      	adds	r3, #4
 80071c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071c8:	f002 f932 	bl	8009430 <USB_DevInit>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e00c      	b.n	80071f8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f002 fafa 	bl	80097ea <USB_DevDisconnect>

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e267      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d075      	beq.n	800730a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800721e:	4b88      	ldr	r3, [pc, #544]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
 8007226:	2b04      	cmp	r3, #4
 8007228:	d00c      	beq.n	8007244 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800722a:	4b85      	ldr	r3, [pc, #532]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007232:	2b08      	cmp	r3, #8
 8007234:	d112      	bne.n	800725c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007236:	4b82      	ldr	r3, [pc, #520]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800723e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007242:	d10b      	bne.n	800725c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007244:	4b7e      	ldr	r3, [pc, #504]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d05b      	beq.n	8007308 <HAL_RCC_OscConfig+0x108>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d157      	bne.n	8007308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e242      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007264:	d106      	bne.n	8007274 <HAL_RCC_OscConfig+0x74>
 8007266:	4b76      	ldr	r3, [pc, #472]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a75      	ldr	r2, [pc, #468]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 800726c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	e01d      	b.n	80072b0 <HAL_RCC_OscConfig+0xb0>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800727c:	d10c      	bne.n	8007298 <HAL_RCC_OscConfig+0x98>
 800727e:	4b70      	ldr	r3, [pc, #448]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a6f      	ldr	r2, [pc, #444]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	4b6d      	ldr	r3, [pc, #436]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a6c      	ldr	r2, [pc, #432]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	e00b      	b.n	80072b0 <HAL_RCC_OscConfig+0xb0>
 8007298:	4b69      	ldr	r3, [pc, #420]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a68      	ldr	r2, [pc, #416]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 800729e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	4b66      	ldr	r3, [pc, #408]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a65      	ldr	r2, [pc, #404]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 80072aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d013      	beq.n	80072e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b8:	f7fb fdd2 	bl	8002e60 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072c0:	f7fb fdce 	bl	8002e60 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b64      	cmp	r3, #100	@ 0x64
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e207      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d2:	4b5b      	ldr	r3, [pc, #364]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0f0      	beq.n	80072c0 <HAL_RCC_OscConfig+0xc0>
 80072de:	e014      	b.n	800730a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e0:	f7fb fdbe 	bl	8002e60 <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072e8:	f7fb fdba 	bl	8002e60 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b64      	cmp	r3, #100	@ 0x64
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e1f3      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072fa:	4b51      	ldr	r3, [pc, #324]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0xe8>
 8007306:	e000      	b.n	800730a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d063      	beq.n	80073de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007316:	4b4a      	ldr	r3, [pc, #296]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00b      	beq.n	800733a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007322:	4b47      	ldr	r3, [pc, #284]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800732a:	2b08      	cmp	r3, #8
 800732c:	d11c      	bne.n	8007368 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800732e:	4b44      	ldr	r3, [pc, #272]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d116      	bne.n	8007368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800733a:	4b41      	ldr	r3, [pc, #260]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <HAL_RCC_OscConfig+0x152>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d001      	beq.n	8007352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e1c7      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007352:	4b3b      	ldr	r3, [pc, #236]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4937      	ldr	r1, [pc, #220]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007362:	4313      	orrs	r3, r2
 8007364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007366:	e03a      	b.n	80073de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d020      	beq.n	80073b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007370:	4b34      	ldr	r3, [pc, #208]	@ (8007444 <HAL_RCC_OscConfig+0x244>)
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007376:	f7fb fd73 	bl	8002e60 <HAL_GetTick>
 800737a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800737c:	e008      	b.n	8007390 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800737e:	f7fb fd6f 	bl	8002e60 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e1a8      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007390:	4b2b      	ldr	r3, [pc, #172]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0f0      	beq.n	800737e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800739c:	4b28      	ldr	r3, [pc, #160]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	4925      	ldr	r1, [pc, #148]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	600b      	str	r3, [r1, #0]
 80073b0:	e015      	b.n	80073de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073b2:	4b24      	ldr	r3, [pc, #144]	@ (8007444 <HAL_RCC_OscConfig+0x244>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b8:	f7fb fd52 	bl	8002e60 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073c0:	f7fb fd4e 	bl	8002e60 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e187      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f0      	bne.n	80073c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d036      	beq.n	8007458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073f2:	4b15      	ldr	r3, [pc, #84]	@ (8007448 <HAL_RCC_OscConfig+0x248>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f8:	f7fb fd32 	bl	8002e60 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007400:	f7fb fd2e 	bl	8002e60 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e167      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007412:	4b0b      	ldr	r3, [pc, #44]	@ (8007440 <HAL_RCC_OscConfig+0x240>)
 8007414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0f0      	beq.n	8007400 <HAL_RCC_OscConfig+0x200>
 800741e:	e01b      	b.n	8007458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007420:	4b09      	ldr	r3, [pc, #36]	@ (8007448 <HAL_RCC_OscConfig+0x248>)
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007426:	f7fb fd1b 	bl	8002e60 <HAL_GetTick>
 800742a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800742c:	e00e      	b.n	800744c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800742e:	f7fb fd17 	bl	8002e60 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d907      	bls.n	800744c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e150      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
 8007440:	40023800 	.word	0x40023800
 8007444:	42470000 	.word	0x42470000
 8007448:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800744c:	4b88      	ldr	r3, [pc, #544]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800744e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ea      	bne.n	800742e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8097 	beq.w	8007594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800746a:	4b81      	ldr	r3, [pc, #516]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10f      	bne.n	8007496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	4b7d      	ldr	r3, [pc, #500]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800747c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747e:	4a7c      	ldr	r2, [pc, #496]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 8007480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007484:	6413      	str	r3, [r2, #64]	@ 0x40
 8007486:	4b7a      	ldr	r3, [pc, #488]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007492:	2301      	movs	r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007496:	4b77      	ldr	r3, [pc, #476]	@ (8007674 <HAL_RCC_OscConfig+0x474>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d118      	bne.n	80074d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074a2:	4b74      	ldr	r3, [pc, #464]	@ (8007674 <HAL_RCC_OscConfig+0x474>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a73      	ldr	r2, [pc, #460]	@ (8007674 <HAL_RCC_OscConfig+0x474>)
 80074a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074ae:	f7fb fcd7 	bl	8002e60 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074b6:	f7fb fcd3 	bl	8002e60 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e10c      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c8:	4b6a      	ldr	r3, [pc, #424]	@ (8007674 <HAL_RCC_OscConfig+0x474>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d106      	bne.n	80074ea <HAL_RCC_OscConfig+0x2ea>
 80074dc:	4b64      	ldr	r3, [pc, #400]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 80074de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e0:	4a63      	ldr	r2, [pc, #396]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80074e8:	e01c      	b.n	8007524 <HAL_RCC_OscConfig+0x324>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d10c      	bne.n	800750c <HAL_RCC_OscConfig+0x30c>
 80074f2:	4b5f      	ldr	r3, [pc, #380]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f6:	4a5e      	ldr	r2, [pc, #376]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 80074f8:	f043 0304 	orr.w	r3, r3, #4
 80074fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80074fe:	4b5c      	ldr	r3, [pc, #368]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 8007500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007502:	4a5b      	ldr	r2, [pc, #364]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 8007504:	f043 0301 	orr.w	r3, r3, #1
 8007508:	6713      	str	r3, [r2, #112]	@ 0x70
 800750a:	e00b      	b.n	8007524 <HAL_RCC_OscConfig+0x324>
 800750c:	4b58      	ldr	r3, [pc, #352]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800750e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007510:	4a57      	ldr	r2, [pc, #348]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	6713      	str	r3, [r2, #112]	@ 0x70
 8007518:	4b55      	ldr	r3, [pc, #340]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800751a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751c:	4a54      	ldr	r2, [pc, #336]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800751e:	f023 0304 	bic.w	r3, r3, #4
 8007522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d015      	beq.n	8007558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752c:	f7fb fc98 	bl	8002e60 <HAL_GetTick>
 8007530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007532:	e00a      	b.n	800754a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007534:	f7fb fc94 	bl	8002e60 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007542:	4293      	cmp	r3, r2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e0cb      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800754a:	4b49      	ldr	r3, [pc, #292]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0ee      	beq.n	8007534 <HAL_RCC_OscConfig+0x334>
 8007556:	e014      	b.n	8007582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007558:	f7fb fc82 	bl	8002e60 <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800755e:	e00a      	b.n	8007576 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007560:	f7fb fc7e 	bl	8002e60 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800756e:	4293      	cmp	r3, r2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e0b5      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007576:	4b3e      	ldr	r3, [pc, #248]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 8007578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1ee      	bne.n	8007560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d105      	bne.n	8007594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007588:	4b39      	ldr	r3, [pc, #228]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800758a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758c:	4a38      	ldr	r2, [pc, #224]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800758e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80a1 	beq.w	80076e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800759e:	4b34      	ldr	r3, [pc, #208]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 030c 	and.w	r3, r3, #12
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d05c      	beq.n	8007664 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d141      	bne.n	8007636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b2:	4b31      	ldr	r3, [pc, #196]	@ (8007678 <HAL_RCC_OscConfig+0x478>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b8:	f7fb fc52 	bl	8002e60 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c0:	f7fb fc4e 	bl	8002e60 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e087      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075d2:	4b27      	ldr	r3, [pc, #156]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69da      	ldr	r2, [r3, #28]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ec:	019b      	lsls	r3, r3, #6
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	085b      	lsrs	r3, r3, #1
 80075f6:	3b01      	subs	r3, #1
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	061b      	lsls	r3, r3, #24
 8007602:	491b      	ldr	r1, [pc, #108]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 8007604:	4313      	orrs	r3, r2
 8007606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007608:	4b1b      	ldr	r3, [pc, #108]	@ (8007678 <HAL_RCC_OscConfig+0x478>)
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800760e:	f7fb fc27 	bl	8002e60 <HAL_GetTick>
 8007612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007614:	e008      	b.n	8007628 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007616:	f7fb fc23 	bl	8002e60 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e05c      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007628:	4b11      	ldr	r3, [pc, #68]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0f0      	beq.n	8007616 <HAL_RCC_OscConfig+0x416>
 8007634:	e054      	b.n	80076e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007636:	4b10      	ldr	r3, [pc, #64]	@ (8007678 <HAL_RCC_OscConfig+0x478>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800763c:	f7fb fc10 	bl	8002e60 <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007644:	f7fb fc0c 	bl	8002e60 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e045      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007656:	4b06      	ldr	r3, [pc, #24]	@ (8007670 <HAL_RCC_OscConfig+0x470>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <HAL_RCC_OscConfig+0x444>
 8007662:	e03d      	b.n	80076e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d107      	bne.n	800767c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e038      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
 8007670:	40023800 	.word	0x40023800
 8007674:	40007000 	.word	0x40007000
 8007678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800767c:	4b1b      	ldr	r3, [pc, #108]	@ (80076ec <HAL_RCC_OscConfig+0x4ec>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d028      	beq.n	80076dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007694:	429a      	cmp	r2, r3
 8007696:	d121      	bne.n	80076dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d11a      	bne.n	80076dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80076ac:	4013      	ands	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d111      	bne.n	80076dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	3b01      	subs	r3, #1
 80076c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d107      	bne.n	80076dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076d8:	429a      	cmp	r2, r3
 80076da:	d001      	beq.n	80076e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40023800 	.word	0x40023800

080076f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e0cc      	b.n	800789e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007704:	4b68      	ldr	r3, [pc, #416]	@ (80078a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d90c      	bls.n	800772c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007712:	4b65      	ldr	r3, [pc, #404]	@ (80078a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800771a:	4b63      	ldr	r3, [pc, #396]	@ (80078a8 <HAL_RCC_ClockConfig+0x1b8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d001      	beq.n	800772c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0b8      	b.n	800789e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d020      	beq.n	800777a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007744:	4b59      	ldr	r3, [pc, #356]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	4a58      	ldr	r2, [pc, #352]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 800774a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800774e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800775c:	4b53      	ldr	r3, [pc, #332]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	4a52      	ldr	r2, [pc, #328]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007768:	4b50      	ldr	r3, [pc, #320]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	494d      	ldr	r1, [pc, #308]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007776:	4313      	orrs	r3, r2
 8007778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d044      	beq.n	8007810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d107      	bne.n	800779e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800778e:	4b47      	ldr	r3, [pc, #284]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d119      	bne.n	80077ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e07f      	b.n	800789e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d003      	beq.n	80077ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d107      	bne.n	80077be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ae:	4b3f      	ldr	r3, [pc, #252]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e06f      	b.n	800789e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077be:	4b3b      	ldr	r3, [pc, #236]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e067      	b.n	800789e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077ce:	4b37      	ldr	r3, [pc, #220]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f023 0203 	bic.w	r2, r3, #3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	4934      	ldr	r1, [pc, #208]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077e0:	f7fb fb3e 	bl	8002e60 <HAL_GetTick>
 80077e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077e6:	e00a      	b.n	80077fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077e8:	f7fb fb3a 	bl	8002e60 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e04f      	b.n	800789e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077fe:	4b2b      	ldr	r3, [pc, #172]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 020c 	and.w	r2, r3, #12
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	429a      	cmp	r2, r3
 800780e:	d1eb      	bne.n	80077e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007810:	4b25      	ldr	r3, [pc, #148]	@ (80078a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d20c      	bcs.n	8007838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800781e:	4b22      	ldr	r3, [pc, #136]	@ (80078a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	b2d2      	uxtb	r2, r2
 8007824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007826:	4b20      	ldr	r3, [pc, #128]	@ (80078a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d001      	beq.n	8007838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e032      	b.n	800789e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007844:	4b19      	ldr	r3, [pc, #100]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	4916      	ldr	r1, [pc, #88]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007852:	4313      	orrs	r3, r2
 8007854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d009      	beq.n	8007876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007862:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	490e      	ldr	r1, [pc, #56]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 8007872:	4313      	orrs	r3, r2
 8007874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007876:	f000 f821 	bl	80078bc <HAL_RCC_GetSysClockFreq>
 800787a:	4602      	mov	r2, r0
 800787c:	4b0b      	ldr	r3, [pc, #44]	@ (80078ac <HAL_RCC_ClockConfig+0x1bc>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	091b      	lsrs	r3, r3, #4
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	490a      	ldr	r1, [pc, #40]	@ (80078b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007888:	5ccb      	ldrb	r3, [r1, r3]
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	4a09      	ldr	r2, [pc, #36]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007892:	4b09      	ldr	r3, [pc, #36]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f7fb fa9e 	bl	8002dd8 <HAL_InitTick>

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	40023c00 	.word	0x40023c00
 80078ac:	40023800 	.word	0x40023800
 80078b0:	0800d964 	.word	0x0800d964
 80078b4:	2000000c 	.word	0x2000000c
 80078b8:	20000010 	.word	0x20000010

080078bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078c0:	b094      	sub	sp, #80	@ 0x50
 80078c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078d4:	4b79      	ldr	r3, [pc, #484]	@ (8007abc <HAL_RCC_GetSysClockFreq+0x200>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 030c 	and.w	r3, r3, #12
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d00d      	beq.n	80078fc <HAL_RCC_GetSysClockFreq+0x40>
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	f200 80e1 	bhi.w	8007aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_RCC_GetSysClockFreq+0x34>
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d003      	beq.n	80078f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80078ee:	e0db      	b.n	8007aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078f0:	4b73      	ldr	r3, [pc, #460]	@ (8007ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80078f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078f4:	e0db      	b.n	8007aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078f6:	4b73      	ldr	r3, [pc, #460]	@ (8007ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80078f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078fa:	e0d8      	b.n	8007aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078fc:	4b6f      	ldr	r3, [pc, #444]	@ (8007abc <HAL_RCC_GetSysClockFreq+0x200>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007904:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007906:	4b6d      	ldr	r3, [pc, #436]	@ (8007abc <HAL_RCC_GetSysClockFreq+0x200>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d063      	beq.n	80079da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007912:	4b6a      	ldr	r3, [pc, #424]	@ (8007abc <HAL_RCC_GetSysClockFreq+0x200>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	099b      	lsrs	r3, r3, #6
 8007918:	2200      	movs	r2, #0
 800791a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800791c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007924:	633b      	str	r3, [r7, #48]	@ 0x30
 8007926:	2300      	movs	r3, #0
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
 800792a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800792e:	4622      	mov	r2, r4
 8007930:	462b      	mov	r3, r5
 8007932:	f04f 0000 	mov.w	r0, #0
 8007936:	f04f 0100 	mov.w	r1, #0
 800793a:	0159      	lsls	r1, r3, #5
 800793c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007940:	0150      	lsls	r0, r2, #5
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	4621      	mov	r1, r4
 8007948:	1a51      	subs	r1, r2, r1
 800794a:	6139      	str	r1, [r7, #16]
 800794c:	4629      	mov	r1, r5
 800794e:	eb63 0301 	sbc.w	r3, r3, r1
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007960:	4659      	mov	r1, fp
 8007962:	018b      	lsls	r3, r1, #6
 8007964:	4651      	mov	r1, sl
 8007966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800796a:	4651      	mov	r1, sl
 800796c:	018a      	lsls	r2, r1, #6
 800796e:	4651      	mov	r1, sl
 8007970:	ebb2 0801 	subs.w	r8, r2, r1
 8007974:	4659      	mov	r1, fp
 8007976:	eb63 0901 	sbc.w	r9, r3, r1
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800798a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800798e:	4690      	mov	r8, r2
 8007990:	4699      	mov	r9, r3
 8007992:	4623      	mov	r3, r4
 8007994:	eb18 0303 	adds.w	r3, r8, r3
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	462b      	mov	r3, r5
 800799c:	eb49 0303 	adc.w	r3, r9, r3
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	f04f 0300 	mov.w	r3, #0
 80079aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80079ae:	4629      	mov	r1, r5
 80079b0:	024b      	lsls	r3, r1, #9
 80079b2:	4621      	mov	r1, r4
 80079b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80079b8:	4621      	mov	r1, r4
 80079ba:	024a      	lsls	r2, r1, #9
 80079bc:	4610      	mov	r0, r2
 80079be:	4619      	mov	r1, r3
 80079c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079c2:	2200      	movs	r2, #0
 80079c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079cc:	f7f9 f966 	bl	8000c9c <__aeabi_uldivmod>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4613      	mov	r3, r2
 80079d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079d8:	e058      	b.n	8007a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079da:	4b38      	ldr	r3, [pc, #224]	@ (8007abc <HAL_RCC_GetSysClockFreq+0x200>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	099b      	lsrs	r3, r3, #6
 80079e0:	2200      	movs	r2, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	4611      	mov	r1, r2
 80079e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80079ea:	623b      	str	r3, [r7, #32]
 80079ec:	2300      	movs	r3, #0
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079f4:	4642      	mov	r2, r8
 80079f6:	464b      	mov	r3, r9
 80079f8:	f04f 0000 	mov.w	r0, #0
 80079fc:	f04f 0100 	mov.w	r1, #0
 8007a00:	0159      	lsls	r1, r3, #5
 8007a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a06:	0150      	lsls	r0, r2, #5
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a12:	4649      	mov	r1, r9
 8007a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8007a30:	eb63 050b 	sbc.w	r5, r3, fp
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	00eb      	lsls	r3, r5, #3
 8007a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a42:	00e2      	lsls	r2, r4, #3
 8007a44:	4614      	mov	r4, r2
 8007a46:	461d      	mov	r5, r3
 8007a48:	4643      	mov	r3, r8
 8007a4a:	18e3      	adds	r3, r4, r3
 8007a4c:	603b      	str	r3, [r7, #0]
 8007a4e:	464b      	mov	r3, r9
 8007a50:	eb45 0303 	adc.w	r3, r5, r3
 8007a54:	607b      	str	r3, [r7, #4]
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a62:	4629      	mov	r1, r5
 8007a64:	028b      	lsls	r3, r1, #10
 8007a66:	4621      	mov	r1, r4
 8007a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	028a      	lsls	r2, r1, #10
 8007a70:	4610      	mov	r0, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a76:	2200      	movs	r2, #0
 8007a78:	61bb      	str	r3, [r7, #24]
 8007a7a:	61fa      	str	r2, [r7, #28]
 8007a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a80:	f7f9 f90c 	bl	8000c9c <__aeabi_uldivmod>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4613      	mov	r3, r2
 8007a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007abc <HAL_RCC_GetSysClockFreq+0x200>)
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	3301      	adds	r3, #1
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007aa6:	e002      	b.n	8007aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007aa8:	4b05      	ldr	r3, [pc, #20]	@ (8007ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3750      	adds	r7, #80	@ 0x50
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aba:	bf00      	nop
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	00f42400 	.word	0x00f42400
 8007ac4:	007a1200 	.word	0x007a1200

08007ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007acc:	4b03      	ldr	r3, [pc, #12]	@ (8007adc <HAL_RCC_GetHCLKFreq+0x14>)
 8007ace:	681b      	ldr	r3, [r3, #0]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000000c 	.word	0x2000000c

08007ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ae4:	f7ff fff0 	bl	8007ac8 <HAL_RCC_GetHCLKFreq>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	4b05      	ldr	r3, [pc, #20]	@ (8007b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	0a9b      	lsrs	r3, r3, #10
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	4903      	ldr	r1, [pc, #12]	@ (8007b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007af6:	5ccb      	ldrb	r3, [r1, r3]
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	40023800 	.word	0x40023800
 8007b04:	0800d974 	.word	0x0800d974

08007b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b0c:	f7ff ffdc 	bl	8007ac8 <HAL_RCC_GetHCLKFreq>
 8007b10:	4602      	mov	r2, r0
 8007b12:	4b05      	ldr	r3, [pc, #20]	@ (8007b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	0b5b      	lsrs	r3, r3, #13
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	4903      	ldr	r1, [pc, #12]	@ (8007b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b1e:	5ccb      	ldrb	r3, [r1, r3]
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	0800d974 	.word	0x0800d974

08007b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e041      	b.n	8007bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fa fdfc 	bl	8002754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f000 f984 	bl	8007e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d001      	beq.n	8007be8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e046      	b.n	8007c76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a23      	ldr	r2, [pc, #140]	@ (8007c84 <HAL_TIM_Base_Start+0xb4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d022      	beq.n	8007c40 <HAL_TIM_Base_Start+0x70>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c02:	d01d      	beq.n	8007c40 <HAL_TIM_Base_Start+0x70>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1f      	ldr	r2, [pc, #124]	@ (8007c88 <HAL_TIM_Base_Start+0xb8>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d018      	beq.n	8007c40 <HAL_TIM_Base_Start+0x70>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a1e      	ldr	r2, [pc, #120]	@ (8007c8c <HAL_TIM_Base_Start+0xbc>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d013      	beq.n	8007c40 <HAL_TIM_Base_Start+0x70>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007c90 <HAL_TIM_Base_Start+0xc0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00e      	beq.n	8007c40 <HAL_TIM_Base_Start+0x70>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1b      	ldr	r2, [pc, #108]	@ (8007c94 <HAL_TIM_Base_Start+0xc4>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d009      	beq.n	8007c40 <HAL_TIM_Base_Start+0x70>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a19      	ldr	r2, [pc, #100]	@ (8007c98 <HAL_TIM_Base_Start+0xc8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <HAL_TIM_Base_Start+0x70>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a18      	ldr	r2, [pc, #96]	@ (8007c9c <HAL_TIM_Base_Start+0xcc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d111      	bne.n	8007c64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b06      	cmp	r3, #6
 8007c50:	d010      	beq.n	8007c74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0201 	orr.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c62:	e007      	b.n	8007c74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0201 	orr.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40000400 	.word	0x40000400
 8007c8c:	40000800 	.word	0x40000800
 8007c90:	40000c00 	.word	0x40000c00
 8007c94:	40010400 	.word	0x40010400
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40001800 	.word	0x40001800

08007ca0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6a1a      	ldr	r2, [r3, #32]
 8007cae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10f      	bne.n	8007cd8 <HAL_TIM_Base_Stop+0x38>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6a1a      	ldr	r2, [r3, #32]
 8007cbe:	f240 4344 	movw	r3, #1092	@ 0x444
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d107      	bne.n	8007cd8 <HAL_TIM_Base_Stop+0x38>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0201 	bic.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_TIM_ConfigClockSource+0x1c>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e0b4      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x186>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2202      	movs	r2, #2
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d30:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d42:	d03e      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0xd4>
 8007d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d48:	f200 8087 	bhi.w	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
 8007d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d50:	f000 8086 	beq.w	8007e60 <HAL_TIM_ConfigClockSource+0x172>
 8007d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d58:	d87f      	bhi.n	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
 8007d5a:	2b70      	cmp	r3, #112	@ 0x70
 8007d5c:	d01a      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0xa6>
 8007d5e:	2b70      	cmp	r3, #112	@ 0x70
 8007d60:	d87b      	bhi.n	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
 8007d62:	2b60      	cmp	r3, #96	@ 0x60
 8007d64:	d050      	beq.n	8007e08 <HAL_TIM_ConfigClockSource+0x11a>
 8007d66:	2b60      	cmp	r3, #96	@ 0x60
 8007d68:	d877      	bhi.n	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
 8007d6a:	2b50      	cmp	r3, #80	@ 0x50
 8007d6c:	d03c      	beq.n	8007de8 <HAL_TIM_ConfigClockSource+0xfa>
 8007d6e:	2b50      	cmp	r3, #80	@ 0x50
 8007d70:	d873      	bhi.n	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
 8007d72:	2b40      	cmp	r3, #64	@ 0x40
 8007d74:	d058      	beq.n	8007e28 <HAL_TIM_ConfigClockSource+0x13a>
 8007d76:	2b40      	cmp	r3, #64	@ 0x40
 8007d78:	d86f      	bhi.n	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
 8007d7a:	2b30      	cmp	r3, #48	@ 0x30
 8007d7c:	d064      	beq.n	8007e48 <HAL_TIM_ConfigClockSource+0x15a>
 8007d7e:	2b30      	cmp	r3, #48	@ 0x30
 8007d80:	d86b      	bhi.n	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	d060      	beq.n	8007e48 <HAL_TIM_ConfigClockSource+0x15a>
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d867      	bhi.n	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d05c      	beq.n	8007e48 <HAL_TIM_ConfigClockSource+0x15a>
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d05a      	beq.n	8007e48 <HAL_TIM_ConfigClockSource+0x15a>
 8007d92:	e062      	b.n	8007e5a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007da4:	f000 f990 	bl	80080c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007db6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	609a      	str	r2, [r3, #8]
      break;
 8007dc0:	e04f      	b.n	8007e62 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dd2:	f000 f979 	bl	80080c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007de4:	609a      	str	r2, [r3, #8]
      break;
 8007de6:	e03c      	b.n	8007e62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df4:	461a      	mov	r2, r3
 8007df6:	f000 f8ed 	bl	8007fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2150      	movs	r1, #80	@ 0x50
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 f946 	bl	8008092 <TIM_ITRx_SetConfig>
      break;
 8007e06:	e02c      	b.n	8007e62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e14:	461a      	mov	r2, r3
 8007e16:	f000 f90c 	bl	8008032 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2160      	movs	r1, #96	@ 0x60
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f936 	bl	8008092 <TIM_ITRx_SetConfig>
      break;
 8007e26:	e01c      	b.n	8007e62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e34:	461a      	mov	r2, r3
 8007e36:	f000 f8cd 	bl	8007fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2140      	movs	r1, #64	@ 0x40
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 f926 	bl	8008092 <TIM_ITRx_SetConfig>
      break;
 8007e46:	e00c      	b.n	8007e62 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f000 f91d 	bl	8008092 <TIM_ITRx_SetConfig>
      break;
 8007e58:	e003      	b.n	8007e62 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5e:	e000      	b.n	8007e62 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a46      	ldr	r2, [pc, #280]	@ (8007fa8 <TIM_Base_SetConfig+0x12c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d013      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e9a:	d00f      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a43      	ldr	r2, [pc, #268]	@ (8007fac <TIM_Base_SetConfig+0x130>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00b      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a42      	ldr	r2, [pc, #264]	@ (8007fb0 <TIM_Base_SetConfig+0x134>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d007      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a41      	ldr	r2, [pc, #260]	@ (8007fb4 <TIM_Base_SetConfig+0x138>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a40      	ldr	r2, [pc, #256]	@ (8007fb8 <TIM_Base_SetConfig+0x13c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d108      	bne.n	8007ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a35      	ldr	r2, [pc, #212]	@ (8007fa8 <TIM_Base_SetConfig+0x12c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d02b      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007edc:	d027      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a32      	ldr	r2, [pc, #200]	@ (8007fac <TIM_Base_SetConfig+0x130>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d023      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a31      	ldr	r2, [pc, #196]	@ (8007fb0 <TIM_Base_SetConfig+0x134>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01f      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a30      	ldr	r2, [pc, #192]	@ (8007fb4 <TIM_Base_SetConfig+0x138>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d01b      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8007fb8 <TIM_Base_SetConfig+0x13c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d017      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a2e      	ldr	r2, [pc, #184]	@ (8007fbc <TIM_Base_SetConfig+0x140>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d013      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a2d      	ldr	r2, [pc, #180]	@ (8007fc0 <TIM_Base_SetConfig+0x144>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00f      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a2c      	ldr	r2, [pc, #176]	@ (8007fc4 <TIM_Base_SetConfig+0x148>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00b      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2b      	ldr	r2, [pc, #172]	@ (8007fc8 <TIM_Base_SetConfig+0x14c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d007      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a2a      	ldr	r2, [pc, #168]	@ (8007fcc <TIM_Base_SetConfig+0x150>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d003      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a29      	ldr	r2, [pc, #164]	@ (8007fd0 <TIM_Base_SetConfig+0x154>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d108      	bne.n	8007f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a10      	ldr	r2, [pc, #64]	@ (8007fa8 <TIM_Base_SetConfig+0x12c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <TIM_Base_SetConfig+0xf8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a12      	ldr	r2, [pc, #72]	@ (8007fb8 <TIM_Base_SetConfig+0x13c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d103      	bne.n	8007f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d105      	bne.n	8007f9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	611a      	str	r2, [r3, #16]
  }
}
 8007f9a:	bf00      	nop
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40000400 	.word	0x40000400
 8007fb0:	40000800 	.word	0x40000800
 8007fb4:	40000c00 	.word	0x40000c00
 8007fb8:	40010400 	.word	0x40010400
 8007fbc:	40014000 	.word	0x40014000
 8007fc0:	40014400 	.word	0x40014400
 8007fc4:	40014800 	.word	0x40014800
 8007fc8:	40001800 	.word	0x40001800
 8007fcc:	40001c00 	.word	0x40001c00
 8007fd0:	40002000 	.word	0x40002000

08007fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	f023 0201 	bic.w	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f023 030a 	bic.w	r3, r3, #10
 8008010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	621a      	str	r2, [r3, #32]
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008032:	b480      	push	{r7}
 8008034:	b087      	sub	sp, #28
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	f023 0210 	bic.w	r2, r3, #16
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800805c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	031b      	lsls	r3, r3, #12
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800806e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4313      	orrs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	621a      	str	r2, [r3, #32]
}
 8008086:	bf00      	nop
 8008088:	371c      	adds	r7, #28
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	f043 0307 	orr.w	r3, r3, #7
 80080b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	609a      	str	r2, [r3, #8]
}
 80080bc:	bf00      	nop
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	021a      	lsls	r2, r3, #8
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	609a      	str	r2, [r3, #8]
}
 80080fc:	bf00      	nop
 80080fe:	371c      	adds	r7, #28
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008118:	2b01      	cmp	r3, #1
 800811a:	d101      	bne.n	8008120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800811c:	2302      	movs	r3, #2
 800811e:	e05a      	b.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a21      	ldr	r2, [pc, #132]	@ (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d022      	beq.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816c:	d01d      	beq.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1d      	ldr	r2, [pc, #116]	@ (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d018      	beq.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1b      	ldr	r2, [pc, #108]	@ (80081ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d013      	beq.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1a      	ldr	r2, [pc, #104]	@ (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00e      	beq.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a18      	ldr	r2, [pc, #96]	@ (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d009      	beq.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a17      	ldr	r2, [pc, #92]	@ (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d004      	beq.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a15      	ldr	r2, [pc, #84]	@ (80081fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d10c      	bne.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40000400 	.word	0x40000400
 80081ec:	40000800 	.word	0x40000800
 80081f0:	40000c00 	.word	0x40000c00
 80081f4:	40010400 	.word	0x40010400
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40001800 	.word	0x40001800

08008200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e042      	b.n	8008298 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7fa fab4 	bl	8002794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2224      	movs	r2, #36	@ 0x24
 8008230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fdbd 	bl	8008dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	691a      	ldr	r2, [r3, #16]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	@ 0x28
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	603b      	str	r3, [r7, #0]
 80082ac:	4613      	mov	r3, r2
 80082ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b20      	cmp	r3, #32
 80082be:	d175      	bne.n	80083ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <HAL_UART_Transmit+0x2c>
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e06e      	b.n	80083ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2221      	movs	r2, #33	@ 0x21
 80082da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082de:	f7fa fdbf 	bl	8002e60 <HAL_GetTick>
 80082e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	88fa      	ldrh	r2, [r7, #6]
 80082ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f8:	d108      	bne.n	800830c <HAL_UART_Transmit+0x6c>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d104      	bne.n	800830c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	e003      	b.n	8008314 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008314:	e02e      	b.n	8008374 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2200      	movs	r2, #0
 800831e:	2180      	movs	r1, #128	@ 0x80
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 fb1f 	bl	8008964 <UART_WaitOnFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2220      	movs	r2, #32
 8008330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e03a      	b.n	80083ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10b      	bne.n	8008356 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800834c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	3302      	adds	r3, #2
 8008352:	61bb      	str	r3, [r7, #24]
 8008354:	e007      	b.n	8008366 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	3301      	adds	r3, #1
 8008364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1cb      	bne.n	8008316 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	2140      	movs	r1, #64	@ 0x40
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 faeb 	bl	8008964 <UART_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2220      	movs	r2, #32
 8008398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e006      	b.n	80083ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	e000      	b.n	80083ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80083ac:	2302      	movs	r3, #2
  }
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3720      	adds	r7, #32
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	4613      	mov	r3, r2
 80083c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d112      	bne.n	80083f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_UART_Receive_IT+0x26>
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e00b      	b.n	80083f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083e6:	88fb      	ldrh	r3, [r7, #6]
 80083e8:	461a      	mov	r2, r3
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 fb12 	bl	8008a16 <UART_Start_Receive_IT>
 80083f2:	4603      	mov	r3, r0
 80083f4:	e000      	b.n	80083f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80083f6:	2302      	movs	r3, #2
  }
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b0ba      	sub	sp, #232	@ 0xe8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008426:	2300      	movs	r3, #0
 8008428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800842c:	2300      	movs	r3, #0
 800842e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800843e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10f      	bne.n	8008466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <HAL_UART_IRQHandler+0x66>
 8008452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fbf2 	bl	8008c48 <UART_Receive_IT>
      return;
 8008464:	e25b      	b.n	800891e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 80de 	beq.w	800862c <HAL_UART_IRQHandler+0x22c>
 8008470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	2b00      	cmp	r3, #0
 800847a:	d106      	bne.n	800848a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800847c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008480:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 80d1 	beq.w	800862c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800848a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00b      	beq.n	80084ae <HAL_UART_IRQHandler+0xae>
 8008496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800849a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a6:	f043 0201 	orr.w	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <HAL_UART_IRQHandler+0xd2>
 80084ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ca:	f043 0202 	orr.w	r2, r3, #2
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00b      	beq.n	80084f6 <HAL_UART_IRQHandler+0xf6>
 80084de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ee:	f043 0204 	orr.w	r2, r3, #4
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d011      	beq.n	8008526 <HAL_UART_IRQHandler+0x126>
 8008502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d105      	bne.n	800851a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800850e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800851e:	f043 0208 	orr.w	r2, r3, #8
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 81f2 	beq.w	8008914 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <HAL_UART_IRQHandler+0x14e>
 800853c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fb7d 	bl	8008c48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008558:	2b40      	cmp	r3, #64	@ 0x40
 800855a:	bf0c      	ite	eq
 800855c:	2301      	moveq	r3, #1
 800855e:	2300      	movne	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d103      	bne.n	800857a <HAL_UART_IRQHandler+0x17a>
 8008572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d04f      	beq.n	800861a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa85 	bl	8008a8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800858a:	2b40      	cmp	r3, #64	@ 0x40
 800858c:	d141      	bne.n	8008612 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3314      	adds	r3, #20
 8008594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80085a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3314      	adds	r3, #20
 80085b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80085ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80085be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80085c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80085d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1d9      	bne.n	800858e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d013      	beq.n	800860a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e6:	4a7e      	ldr	r2, [pc, #504]	@ (80087e0 <HAL_UART_IRQHandler+0x3e0>)
 80085e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fb fb46 	bl	8003c80 <HAL_DMA_Abort_IT>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d016      	beq.n	8008628 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008608:	e00e      	b.n	8008628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f994 	bl	8008938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008610:	e00a      	b.n	8008628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f990 	bl	8008938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008618:	e006      	b.n	8008628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f98c 	bl	8008938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008626:	e175      	b.n	8008914 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008628:	bf00      	nop
    return;
 800862a:	e173      	b.n	8008914 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	2b01      	cmp	r3, #1
 8008632:	f040 814f 	bne.w	80088d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863a:	f003 0310 	and.w	r3, r3, #16
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 8148 	beq.w	80088d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8141 	beq.w	80088d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008652:	2300      	movs	r3, #0
 8008654:	60bb      	str	r3, [r7, #8]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	60bb      	str	r3, [r7, #8]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	60bb      	str	r3, [r7, #8]
 8008666:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008672:	2b40      	cmp	r3, #64	@ 0x40
 8008674:	f040 80b6 	bne.w	80087e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 8145 	beq.w	8008918 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008696:	429a      	cmp	r2, r3
 8008698:	f080 813e 	bcs.w	8008918 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ae:	f000 8088 	beq.w	80087c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330c      	adds	r3, #12
 80086b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80086c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	330c      	adds	r3, #12
 80086da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80086de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80086e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80086ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80086f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1d9      	bne.n	80086b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3314      	adds	r3, #20
 8008704:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800870e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3314      	adds	r3, #20
 800871e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008722:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008726:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800872a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e1      	bne.n	80086fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3314      	adds	r3, #20
 8008740:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800874a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800874c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3314      	adds	r3, #20
 800875a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800875e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008760:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008764:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800876c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e3      	bne.n	800873a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2220      	movs	r2, #32
 8008776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008792:	f023 0310 	bic.w	r3, r3, #16
 8008796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	330c      	adds	r3, #12
 80087a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80087a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80087a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e3      	bne.n	8008780 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fb f9ef 	bl	8003ba0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2202      	movs	r2, #2
 80087c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f8b7 	bl	800894c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087de:	e09b      	b.n	8008918 <HAL_UART_IRQHandler+0x518>
 80087e0:	08008b51 	.word	0x08008b51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 808e 	beq.w	800891c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8089 	beq.w	800891c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	330c      	adds	r3, #12
 8008810:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800881a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008820:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	330c      	adds	r3, #12
 800882a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800882e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008830:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008834:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800883c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e3      	bne.n	800880a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3314      	adds	r3, #20
 8008848:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	623b      	str	r3, [r7, #32]
   return(result);
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	f023 0301 	bic.w	r3, r3, #1
 8008858:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3314      	adds	r3, #20
 8008862:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008866:	633a      	str	r2, [r7, #48]	@ 0x30
 8008868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800886c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e3      	bne.n	8008842 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	330c      	adds	r3, #12
 800888e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	60fb      	str	r3, [r7, #12]
   return(result);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0310 	bic.w	r3, r3, #16
 800889e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	330c      	adds	r3, #12
 80088a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80088ac:	61fa      	str	r2, [r7, #28]
 80088ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	69b9      	ldr	r1, [r7, #24]
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	617b      	str	r3, [r7, #20]
   return(result);
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e3      	bne.n	8008888 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f83d 	bl	800894c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088d2:	e023      	b.n	800891c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <HAL_UART_IRQHandler+0x4f4>
 80088e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f943 	bl	8008b78 <UART_Transmit_IT>
    return;
 80088f2:	e014      	b.n	800891e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00e      	beq.n	800891e <HAL_UART_IRQHandler+0x51e>
 8008900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f983 	bl	8008c18 <UART_EndTransmit_IT>
    return;
 8008912:	e004      	b.n	800891e <HAL_UART_IRQHandler+0x51e>
    return;
 8008914:	bf00      	nop
 8008916:	e002      	b.n	800891e <HAL_UART_IRQHandler+0x51e>
      return;
 8008918:	bf00      	nop
 800891a:	e000      	b.n	800891e <HAL_UART_IRQHandler+0x51e>
      return;
 800891c:	bf00      	nop
  }
}
 800891e:	37e8      	adds	r7, #232	@ 0xe8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	4613      	mov	r3, r2
 8008972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008974:	e03b      	b.n	80089ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d037      	beq.n	80089ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800897e:	f7fa fa6f 	bl	8002e60 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	6a3a      	ldr	r2, [r7, #32]
 800898a:	429a      	cmp	r2, r3
 800898c:	d302      	bcc.n	8008994 <UART_WaitOnFlagUntilTimeout+0x30>
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e03a      	b.n	8008a0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d023      	beq.n	80089ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b80      	cmp	r3, #128	@ 0x80
 80089aa:	d020      	beq.n	80089ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b40      	cmp	r3, #64	@ 0x40
 80089b0:	d01d      	beq.n	80089ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d116      	bne.n	80089ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 f857 	bl	8008a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2208      	movs	r2, #8
 80089e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e00f      	b.n	8008a0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4013      	ands	r3, r2
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	bf0c      	ite	eq
 80089fe:	2301      	moveq	r3, #1
 8008a00:	2300      	movne	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d0b4      	beq.n	8008976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	4613      	mov	r3, r2
 8008a22:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	88fa      	ldrh	r2, [r7, #6]
 8008a2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	88fa      	ldrh	r2, [r7, #6]
 8008a34:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2222      	movs	r2, #34	@ 0x22
 8008a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d007      	beq.n	8008a5c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a5a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695a      	ldr	r2, [r3, #20]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0201 	orr.w	r2, r2, #1
 8008a6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0220 	orr.w	r2, r2, #32
 8008a7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b095      	sub	sp, #84	@ 0x54
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	330c      	adds	r3, #12
 8008a98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	330c      	adds	r3, #12
 8008ab0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ab2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e5      	bne.n	8008a92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3314      	adds	r3, #20
 8008acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f023 0301 	bic.w	r3, r3, #1
 8008adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3314      	adds	r3, #20
 8008ae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e5      	bne.n	8008ac6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d119      	bne.n	8008b36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	330c      	adds	r3, #12
 8008b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f023 0310 	bic.w	r3, r3, #16
 8008b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	330c      	adds	r3, #12
 8008b20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b22:	61ba      	str	r2, [r7, #24]
 8008b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6979      	ldr	r1, [r7, #20]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e5      	bne.n	8008b02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008b44:	bf00      	nop
 8008b46:	3754      	adds	r7, #84	@ 0x54
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff fee4 	bl	8008938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b70:	bf00      	nop
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b21      	cmp	r3, #33	@ 0x21
 8008b8a:	d13e      	bne.n	8008c0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b94:	d114      	bne.n	8008bc0 <UART_Transmit_IT+0x48>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d110      	bne.n	8008bc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	1c9a      	adds	r2, r3, #2
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	621a      	str	r2, [r3, #32]
 8008bbe:	e008      	b.n	8008bd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	1c59      	adds	r1, r3, #1
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6211      	str	r1, [r2, #32]
 8008bca:	781a      	ldrb	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	4619      	mov	r1, r3
 8008be0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10f      	bne.n	8008c06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008bf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	e000      	b.n	8008c0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c0a:	2302      	movs	r3, #2
  }
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff fe73 	bl	8008924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08c      	sub	sp, #48	@ 0x30
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b22      	cmp	r3, #34	@ 0x22
 8008c5a:	f040 80ae 	bne.w	8008dba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c66:	d117      	bne.n	8008c98 <UART_Receive_IT+0x50>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d113      	bne.n	8008c98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	1c9a      	adds	r2, r3, #2
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c96:	e026      	b.n	8008ce6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008caa:	d007      	beq.n	8008cbc <UART_Receive_IT+0x74>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <UART_Receive_IT+0x82>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d106      	bne.n	8008cca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e008      	b.n	8008cdc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d15d      	bne.n	8008db6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0220 	bic.w	r2, r2, #32
 8008d08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695a      	ldr	r2, [r3, #20]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0201 	bic.w	r2, r2, #1
 8008d28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d135      	bne.n	8008dac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	330c      	adds	r3, #12
 8008d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	613b      	str	r3, [r7, #16]
   return(result);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f023 0310 	bic.w	r3, r3, #16
 8008d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	330c      	adds	r3, #12
 8008d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d66:	623a      	str	r2, [r7, #32]
 8008d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	69f9      	ldr	r1, [r7, #28]
 8008d6c:	6a3a      	ldr	r2, [r7, #32]
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e5      	bne.n	8008d46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0310 	and.w	r3, r3, #16
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d10a      	bne.n	8008d9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff fdd1 	bl	800894c <HAL_UARTEx_RxEventCallback>
 8008daa:	e002      	b.n	8008db2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7f8 fd2d 	bl	800180c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	e002      	b.n	8008dbc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e000      	b.n	8008dbc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008dba:	2302      	movs	r3, #2
  }
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3730      	adds	r7, #48	@ 0x30
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dc8:	b0c0      	sub	sp, #256	@ 0x100
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de0:	68d9      	ldr	r1, [r3, #12]
 8008de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	ea40 0301 	orr.w	r3, r0, r1
 8008dec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e1c:	f021 010c 	bic.w	r1, r1, #12
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e3e:	6999      	ldr	r1, [r3, #24]
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	ea40 0301 	orr.w	r3, r0, r1
 8008e4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b8f      	ldr	r3, [pc, #572]	@ (8009090 <UART_SetConfig+0x2cc>)
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d005      	beq.n	8008e64 <UART_SetConfig+0xa0>
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8009094 <UART_SetConfig+0x2d0>)
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d104      	bne.n	8008e6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e64:	f7fe fe50 	bl	8007b08 <HAL_RCC_GetPCLK2Freq>
 8008e68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008e6c:	e003      	b.n	8008e76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e6e:	f7fe fe37 	bl	8007ae0 <HAL_RCC_GetPCLK1Freq>
 8008e72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e80:	f040 810c 	bne.w	800909c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e96:	4622      	mov	r2, r4
 8008e98:	462b      	mov	r3, r5
 8008e9a:	1891      	adds	r1, r2, r2
 8008e9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e9e:	415b      	adcs	r3, r3
 8008ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ea2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	eb12 0801 	adds.w	r8, r2, r1
 8008eac:	4629      	mov	r1, r5
 8008eae:	eb43 0901 	adc.w	r9, r3, r1
 8008eb2:	f04f 0200 	mov.w	r2, #0
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ec6:	4690      	mov	r8, r2
 8008ec8:	4699      	mov	r9, r3
 8008eca:	4623      	mov	r3, r4
 8008ecc:	eb18 0303 	adds.w	r3, r8, r3
 8008ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	eb49 0303 	adc.w	r3, r9, r3
 8008eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008eea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008eee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	18db      	adds	r3, r3, r3
 8008ef6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ef8:	4613      	mov	r3, r2
 8008efa:	eb42 0303 	adc.w	r3, r2, r3
 8008efe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f08:	f7f7 fec8 	bl	8000c9c <__aeabi_uldivmod>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4b61      	ldr	r3, [pc, #388]	@ (8009098 <UART_SetConfig+0x2d4>)
 8008f12:	fba3 2302 	umull	r2, r3, r3, r2
 8008f16:	095b      	lsrs	r3, r3, #5
 8008f18:	011c      	lsls	r4, r3, #4
 8008f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	464b      	mov	r3, r9
 8008f30:	1891      	adds	r1, r2, r2
 8008f32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f34:	415b      	adcs	r3, r3
 8008f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f3c:	4641      	mov	r1, r8
 8008f3e:	eb12 0a01 	adds.w	sl, r2, r1
 8008f42:	4649      	mov	r1, r9
 8008f44:	eb43 0b01 	adc.w	fp, r3, r1
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f5c:	4692      	mov	sl, r2
 8008f5e:	469b      	mov	fp, r3
 8008f60:	4643      	mov	r3, r8
 8008f62:	eb1a 0303 	adds.w	r3, sl, r3
 8008f66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f6a:	464b      	mov	r3, r9
 8008f6c:	eb4b 0303 	adc.w	r3, fp, r3
 8008f70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	18db      	adds	r3, r3, r3
 8008f8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f8e:	4613      	mov	r3, r2
 8008f90:	eb42 0303 	adc.w	r3, r2, r3
 8008f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f9e:	f7f7 fe7d 	bl	8000c9c <__aeabi_uldivmod>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8009098 <UART_SetConfig+0x2d4>)
 8008faa:	fba3 2301 	umull	r2, r3, r3, r1
 8008fae:	095b      	lsrs	r3, r3, #5
 8008fb0:	2264      	movs	r2, #100	@ 0x64
 8008fb2:	fb02 f303 	mul.w	r3, r2, r3
 8008fb6:	1acb      	subs	r3, r1, r3
 8008fb8:	00db      	lsls	r3, r3, #3
 8008fba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008fbe:	4b36      	ldr	r3, [pc, #216]	@ (8009098 <UART_SetConfig+0x2d4>)
 8008fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8008fc4:	095b      	lsrs	r3, r3, #5
 8008fc6:	005b      	lsls	r3, r3, #1
 8008fc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008fcc:	441c      	add	r4, r3
 8008fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008fdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	1891      	adds	r1, r2, r2
 8008fe6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008fe8:	415b      	adcs	r3, r3
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	1851      	adds	r1, r2, r1
 8008ff4:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	414b      	adcs	r3, r1
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009008:	4659      	mov	r1, fp
 800900a:	00cb      	lsls	r3, r1, #3
 800900c:	4651      	mov	r1, sl
 800900e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009012:	4651      	mov	r1, sl
 8009014:	00ca      	lsls	r2, r1, #3
 8009016:	4610      	mov	r0, r2
 8009018:	4619      	mov	r1, r3
 800901a:	4603      	mov	r3, r0
 800901c:	4642      	mov	r2, r8
 800901e:	189b      	adds	r3, r3, r2
 8009020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009024:	464b      	mov	r3, r9
 8009026:	460a      	mov	r2, r1
 8009028:	eb42 0303 	adc.w	r3, r2, r3
 800902c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800903c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009040:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009044:	460b      	mov	r3, r1
 8009046:	18db      	adds	r3, r3, r3
 8009048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800904a:	4613      	mov	r3, r2
 800904c:	eb42 0303 	adc.w	r3, r2, r3
 8009050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009056:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800905a:	f7f7 fe1f 	bl	8000c9c <__aeabi_uldivmod>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4b0d      	ldr	r3, [pc, #52]	@ (8009098 <UART_SetConfig+0x2d4>)
 8009064:	fba3 1302 	umull	r1, r3, r3, r2
 8009068:	095b      	lsrs	r3, r3, #5
 800906a:	2164      	movs	r1, #100	@ 0x64
 800906c:	fb01 f303 	mul.w	r3, r1, r3
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	3332      	adds	r3, #50	@ 0x32
 8009076:	4a08      	ldr	r2, [pc, #32]	@ (8009098 <UART_SetConfig+0x2d4>)
 8009078:	fba2 2303 	umull	r2, r3, r2, r3
 800907c:	095b      	lsrs	r3, r3, #5
 800907e:	f003 0207 	and.w	r2, r3, #7
 8009082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4422      	add	r2, r4
 800908a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800908c:	e106      	b.n	800929c <UART_SetConfig+0x4d8>
 800908e:	bf00      	nop
 8009090:	40011000 	.word	0x40011000
 8009094:	40011400 	.word	0x40011400
 8009098:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800909c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80090aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80090ae:	4642      	mov	r2, r8
 80090b0:	464b      	mov	r3, r9
 80090b2:	1891      	adds	r1, r2, r2
 80090b4:	6239      	str	r1, [r7, #32]
 80090b6:	415b      	adcs	r3, r3
 80090b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090be:	4641      	mov	r1, r8
 80090c0:	1854      	adds	r4, r2, r1
 80090c2:	4649      	mov	r1, r9
 80090c4:	eb43 0501 	adc.w	r5, r3, r1
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	f04f 0300 	mov.w	r3, #0
 80090d0:	00eb      	lsls	r3, r5, #3
 80090d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090d6:	00e2      	lsls	r2, r4, #3
 80090d8:	4614      	mov	r4, r2
 80090da:	461d      	mov	r5, r3
 80090dc:	4643      	mov	r3, r8
 80090de:	18e3      	adds	r3, r4, r3
 80090e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090e4:	464b      	mov	r3, r9
 80090e6:	eb45 0303 	adc.w	r3, r5, r3
 80090ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090fe:	f04f 0200 	mov.w	r2, #0
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800910a:	4629      	mov	r1, r5
 800910c:	008b      	lsls	r3, r1, #2
 800910e:	4621      	mov	r1, r4
 8009110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009114:	4621      	mov	r1, r4
 8009116:	008a      	lsls	r2, r1, #2
 8009118:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800911c:	f7f7 fdbe 	bl	8000c9c <__aeabi_uldivmod>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4b60      	ldr	r3, [pc, #384]	@ (80092a8 <UART_SetConfig+0x4e4>)
 8009126:	fba3 2302 	umull	r2, r3, r3, r2
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	011c      	lsls	r4, r3, #4
 800912e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009132:	2200      	movs	r2, #0
 8009134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009138:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800913c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	1891      	adds	r1, r2, r2
 8009146:	61b9      	str	r1, [r7, #24]
 8009148:	415b      	adcs	r3, r3
 800914a:	61fb      	str	r3, [r7, #28]
 800914c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009150:	4641      	mov	r1, r8
 8009152:	1851      	adds	r1, r2, r1
 8009154:	6139      	str	r1, [r7, #16]
 8009156:	4649      	mov	r1, r9
 8009158:	414b      	adcs	r3, r1
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009168:	4659      	mov	r1, fp
 800916a:	00cb      	lsls	r3, r1, #3
 800916c:	4651      	mov	r1, sl
 800916e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009172:	4651      	mov	r1, sl
 8009174:	00ca      	lsls	r2, r1, #3
 8009176:	4610      	mov	r0, r2
 8009178:	4619      	mov	r1, r3
 800917a:	4603      	mov	r3, r0
 800917c:	4642      	mov	r2, r8
 800917e:	189b      	adds	r3, r3, r2
 8009180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009184:	464b      	mov	r3, r9
 8009186:	460a      	mov	r2, r1
 8009188:	eb42 0303 	adc.w	r3, r2, r3
 800918c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	67bb      	str	r3, [r7, #120]	@ 0x78
 800919a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80091a8:	4649      	mov	r1, r9
 80091aa:	008b      	lsls	r3, r1, #2
 80091ac:	4641      	mov	r1, r8
 80091ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091b2:	4641      	mov	r1, r8
 80091b4:	008a      	lsls	r2, r1, #2
 80091b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091ba:	f7f7 fd6f 	bl	8000c9c <__aeabi_uldivmod>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	4b38      	ldr	r3, [pc, #224]	@ (80092a8 <UART_SetConfig+0x4e4>)
 80091c6:	fba3 2301 	umull	r2, r3, r3, r1
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	2264      	movs	r2, #100	@ 0x64
 80091ce:	fb02 f303 	mul.w	r3, r2, r3
 80091d2:	1acb      	subs	r3, r1, r3
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	3332      	adds	r3, #50	@ 0x32
 80091d8:	4a33      	ldr	r2, [pc, #204]	@ (80092a8 <UART_SetConfig+0x4e4>)
 80091da:	fba2 2303 	umull	r2, r3, r2, r3
 80091de:	095b      	lsrs	r3, r3, #5
 80091e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091e4:	441c      	add	r4, r3
 80091e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091ea:	2200      	movs	r2, #0
 80091ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80091ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80091f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80091f4:	4642      	mov	r2, r8
 80091f6:	464b      	mov	r3, r9
 80091f8:	1891      	adds	r1, r2, r2
 80091fa:	60b9      	str	r1, [r7, #8]
 80091fc:	415b      	adcs	r3, r3
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009204:	4641      	mov	r1, r8
 8009206:	1851      	adds	r1, r2, r1
 8009208:	6039      	str	r1, [r7, #0]
 800920a:	4649      	mov	r1, r9
 800920c:	414b      	adcs	r3, r1
 800920e:	607b      	str	r3, [r7, #4]
 8009210:	f04f 0200 	mov.w	r2, #0
 8009214:	f04f 0300 	mov.w	r3, #0
 8009218:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800921c:	4659      	mov	r1, fp
 800921e:	00cb      	lsls	r3, r1, #3
 8009220:	4651      	mov	r1, sl
 8009222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009226:	4651      	mov	r1, sl
 8009228:	00ca      	lsls	r2, r1, #3
 800922a:	4610      	mov	r0, r2
 800922c:	4619      	mov	r1, r3
 800922e:	4603      	mov	r3, r0
 8009230:	4642      	mov	r2, r8
 8009232:	189b      	adds	r3, r3, r2
 8009234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009236:	464b      	mov	r3, r9
 8009238:	460a      	mov	r2, r1
 800923a:	eb42 0303 	adc.w	r3, r2, r3
 800923e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	663b      	str	r3, [r7, #96]	@ 0x60
 800924a:	667a      	str	r2, [r7, #100]	@ 0x64
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009258:	4649      	mov	r1, r9
 800925a:	008b      	lsls	r3, r1, #2
 800925c:	4641      	mov	r1, r8
 800925e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009262:	4641      	mov	r1, r8
 8009264:	008a      	lsls	r2, r1, #2
 8009266:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800926a:	f7f7 fd17 	bl	8000c9c <__aeabi_uldivmod>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4b0d      	ldr	r3, [pc, #52]	@ (80092a8 <UART_SetConfig+0x4e4>)
 8009274:	fba3 1302 	umull	r1, r3, r3, r2
 8009278:	095b      	lsrs	r3, r3, #5
 800927a:	2164      	movs	r1, #100	@ 0x64
 800927c:	fb01 f303 	mul.w	r3, r1, r3
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	3332      	adds	r3, #50	@ 0x32
 8009286:	4a08      	ldr	r2, [pc, #32]	@ (80092a8 <UART_SetConfig+0x4e4>)
 8009288:	fba2 2303 	umull	r2, r3, r2, r3
 800928c:	095b      	lsrs	r3, r3, #5
 800928e:	f003 020f 	and.w	r2, r3, #15
 8009292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4422      	add	r2, r4
 800929a:	609a      	str	r2, [r3, #8]
}
 800929c:	bf00      	nop
 800929e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80092a2:	46bd      	mov	sp, r7
 80092a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092a8:	51eb851f 	.word	0x51eb851f

080092ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092ac:	b084      	sub	sp, #16
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	f107 001c 	add.w	r0, r7, #28
 80092ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d123      	bne.n	800930e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80092da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d105      	bne.n	8009302 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 faa0 	bl	8009848 <USB_CoreReset>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
 800930c:	e01b      	b.n	8009346 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa94 	bl	8009848 <USB_CoreReset>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009324:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009330:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	639a      	str	r2, [r3, #56]	@ 0x38
 8009338:	e005      	b.n	8009346 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009346:	7fbb      	ldrb	r3, [r7, #30]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d10b      	bne.n	8009364 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f043 0206 	orr.w	r2, r3, #6
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f043 0220 	orr.w	r2, r3, #32
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009364:	7bfb      	ldrb	r3, [r7, #15]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009370:	b004      	add	sp, #16
 8009372:	4770      	bx	lr

08009374 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f023 0201 	bic.w	r2, r3, #1
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093b2:	78fb      	ldrb	r3, [r7, #3]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d115      	bne.n	80093e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093c4:	200a      	movs	r0, #10
 80093c6:	f7f9 fd57 	bl	8002e78 <HAL_Delay>
      ms += 10U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	330a      	adds	r3, #10
 80093ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fa2b 	bl	800982c <USB_GetMode>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d01e      	beq.n	800941a <USB_SetCurrentMode+0x84>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2bc7      	cmp	r3, #199	@ 0xc7
 80093e0:	d9f0      	bls.n	80093c4 <USB_SetCurrentMode+0x2e>
 80093e2:	e01a      	b.n	800941a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093e4:	78fb      	ldrb	r3, [r7, #3]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d115      	bne.n	8009416 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093f6:	200a      	movs	r0, #10
 80093f8:	f7f9 fd3e 	bl	8002e78 <HAL_Delay>
      ms += 10U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	330a      	adds	r3, #10
 8009400:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa12 	bl	800982c <USB_GetMode>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d005      	beq.n	800941a <USB_SetCurrentMode+0x84>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2bc7      	cmp	r3, #199	@ 0xc7
 8009412:	d9f0      	bls.n	80093f6 <USB_SetCurrentMode+0x60>
 8009414:	e001      	b.n	800941a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e005      	b.n	8009426 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2bc8      	cmp	r3, #200	@ 0xc8
 800941e:	d101      	bne.n	8009424 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e000      	b.n	8009426 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009430:	b084      	sub	sp, #16
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800943e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800944a:	2300      	movs	r3, #0
 800944c:	613b      	str	r3, [r7, #16]
 800944e:	e009      	b.n	8009464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	3340      	adds	r3, #64	@ 0x40
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	2200      	movs	r2, #0
 800945c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3301      	adds	r3, #1
 8009462:	613b      	str	r3, [r7, #16]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	2b0e      	cmp	r3, #14
 8009468:	d9f2      	bls.n	8009450 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800946a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800946e:	2b00      	cmp	r3, #0
 8009470:	d11c      	bne.n	80094ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800948a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009496:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80094aa:	e00b      	b.n	80094c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094ca:	461a      	mov	r2, r3
 80094cc:	2300      	movs	r3, #0
 80094ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d10d      	bne.n	80094f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d104      	bne.n	80094ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094e0:	2100      	movs	r1, #0
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f968 	bl	80097b8 <USB_SetDevSpeed>
 80094e8:	e008      	b.n	80094fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094ea:	2101      	movs	r1, #1
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f963 	bl	80097b8 <USB_SetDevSpeed>
 80094f2:	e003      	b.n	80094fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094f4:	2103      	movs	r1, #3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f95e 	bl	80097b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094fc:	2110      	movs	r1, #16
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f8fa 	bl	80096f8 <USB_FlushTxFifo>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f924 	bl	800975c <USB_FlushRxFifo>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009524:	461a      	mov	r2, r3
 8009526:	2300      	movs	r3, #0
 8009528:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009530:	461a      	mov	r2, r3
 8009532:	2300      	movs	r3, #0
 8009534:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800953c:	461a      	mov	r2, r3
 800953e:	2300      	movs	r3, #0
 8009540:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009542:	2300      	movs	r3, #0
 8009544:	613b      	str	r3, [r7, #16]
 8009546:	e043      	b.n	80095d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	015a      	lsls	r2, r3, #5
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4413      	add	r3, r2
 8009550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800955a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800955e:	d118      	bne.n	8009592 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009572:	461a      	mov	r2, r3
 8009574:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	e013      	b.n	80095a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009588:	461a      	mov	r2, r3
 800958a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	e008      	b.n	80095a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800959e:	461a      	mov	r2, r3
 80095a0:	2300      	movs	r3, #0
 80095a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b0:	461a      	mov	r2, r3
 80095b2:	2300      	movs	r3, #0
 80095b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095c2:	461a      	mov	r2, r3
 80095c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	3301      	adds	r3, #1
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80095d4:	461a      	mov	r2, r3
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	4293      	cmp	r3, r2
 80095da:	d3b5      	bcc.n	8009548 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095dc:	2300      	movs	r3, #0
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	e043      	b.n	800966a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095f8:	d118      	bne.n	800962c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800960c:	461a      	mov	r2, r3
 800960e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	e013      	b.n	800963e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009622:	461a      	mov	r2, r3
 8009624:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	e008      	b.n	800963e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009638:	461a      	mov	r2, r3
 800963a:	2300      	movs	r3, #0
 800963c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964a:	461a      	mov	r2, r3
 800964c:	2300      	movs	r3, #0
 800964e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800965c:	461a      	mov	r2, r3
 800965e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009662:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	3301      	adds	r3, #1
 8009668:	613b      	str	r3, [r7, #16]
 800966a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800966e:	461a      	mov	r2, r3
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	4293      	cmp	r3, r2
 8009674:	d3b5      	bcc.n	80095e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009688:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009696:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009698:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800969c:	2b00      	cmp	r3, #0
 800969e:	d105      	bne.n	80096ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	f043 0210 	orr.w	r2, r3, #16
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699a      	ldr	r2, [r3, #24]
 80096b0:	4b10      	ldr	r3, [pc, #64]	@ (80096f4 <USB_DevInit+0x2c4>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	f043 0208 	orr.w	r2, r3, #8
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d107      	bne.n	80096e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096dc:	f043 0304 	orr.w	r3, r3, #4
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096f0:	b004      	add	sp, #16
 80096f2:	4770      	bx	lr
 80096f4:	803c3800 	.word	0x803c3800

080096f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3301      	adds	r3, #1
 800970a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009712:	d901      	bls.n	8009718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e01b      	b.n	8009750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	daf2      	bge.n	8009706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	019b      	lsls	r3, r3, #6
 8009728:	f043 0220 	orr.w	r2, r3, #32
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3301      	adds	r3, #1
 8009734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800973c:	d901      	bls.n	8009742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e006      	b.n	8009750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b20      	cmp	r3, #32
 800974c:	d0f0      	beq.n	8009730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009774:	d901      	bls.n	800977a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e018      	b.n	80097ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	daf2      	bge.n	8009768 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2210      	movs	r2, #16
 800978a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009798:	d901      	bls.n	800979e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e006      	b.n	80097ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0310 	and.w	r3, r3, #16
 80097a6:	2b10      	cmp	r3, #16
 80097a8:	d0f0      	beq.n	800978c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097d8:	4313      	orrs	r3, r2
 80097da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b085      	sub	sp, #20
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009804:	f023 0303 	bic.w	r3, r3, #3
 8009808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009818:	f043 0302 	orr.w	r3, r3, #2
 800981c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	f003 0301 	and.w	r3, r3, #1
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009860:	d901      	bls.n	8009866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e01b      	b.n	800989e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	daf2      	bge.n	8009854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	f043 0201 	orr.w	r2, r3, #1
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3301      	adds	r3, #1
 8009882:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800988a:	d901      	bls.n	8009890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e006      	b.n	800989e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b01      	cmp	r3, #1
 800989a:	d0f0      	beq.n	800987e <USB_CoreReset+0x36>

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <atof>:
 80098aa:	2100      	movs	r1, #0
 80098ac:	f000 be04 	b.w	800a4b8 <strtod>

080098b0 <sulp>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	4604      	mov	r4, r0
 80098b4:	460d      	mov	r5, r1
 80098b6:	ec45 4b10 	vmov	d0, r4, r5
 80098ba:	4616      	mov	r6, r2
 80098bc:	f001 ff8c 	bl	800b7d8 <__ulp>
 80098c0:	ec51 0b10 	vmov	r0, r1, d0
 80098c4:	b17e      	cbz	r6, 80098e6 <sulp+0x36>
 80098c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80098ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	dd09      	ble.n	80098e6 <sulp+0x36>
 80098d2:	051b      	lsls	r3, r3, #20
 80098d4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80098d8:	2400      	movs	r4, #0
 80098da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80098de:	4622      	mov	r2, r4
 80098e0:	462b      	mov	r3, r5
 80098e2:	f7f6 fea9 	bl	8000638 <__aeabi_dmul>
 80098e6:	ec41 0b10 	vmov	d0, r0, r1
 80098ea:	bd70      	pop	{r4, r5, r6, pc}
 80098ec:	0000      	movs	r0, r0
	...

080098f0 <_strtod_l>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	b09f      	sub	sp, #124	@ 0x7c
 80098f6:	460c      	mov	r4, r1
 80098f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80098fa:	2200      	movs	r2, #0
 80098fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80098fe:	9005      	str	r0, [sp, #20]
 8009900:	f04f 0a00 	mov.w	sl, #0
 8009904:	f04f 0b00 	mov.w	fp, #0
 8009908:	460a      	mov	r2, r1
 800990a:	9219      	str	r2, [sp, #100]	@ 0x64
 800990c:	7811      	ldrb	r1, [r2, #0]
 800990e:	292b      	cmp	r1, #43	@ 0x2b
 8009910:	d04a      	beq.n	80099a8 <_strtod_l+0xb8>
 8009912:	d838      	bhi.n	8009986 <_strtod_l+0x96>
 8009914:	290d      	cmp	r1, #13
 8009916:	d832      	bhi.n	800997e <_strtod_l+0x8e>
 8009918:	2908      	cmp	r1, #8
 800991a:	d832      	bhi.n	8009982 <_strtod_l+0x92>
 800991c:	2900      	cmp	r1, #0
 800991e:	d03b      	beq.n	8009998 <_strtod_l+0xa8>
 8009920:	2200      	movs	r2, #0
 8009922:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009924:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009926:	782a      	ldrb	r2, [r5, #0]
 8009928:	2a30      	cmp	r2, #48	@ 0x30
 800992a:	f040 80b3 	bne.w	8009a94 <_strtod_l+0x1a4>
 800992e:	786a      	ldrb	r2, [r5, #1]
 8009930:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009934:	2a58      	cmp	r2, #88	@ 0x58
 8009936:	d16e      	bne.n	8009a16 <_strtod_l+0x126>
 8009938:	9302      	str	r3, [sp, #8]
 800993a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	4a8e      	ldr	r2, [pc, #568]	@ (8009b7c <_strtod_l+0x28c>)
 8009944:	9805      	ldr	r0, [sp, #20]
 8009946:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009948:	a919      	add	r1, sp, #100	@ 0x64
 800994a:	f001 f83f 	bl	800a9cc <__gethex>
 800994e:	f010 060f 	ands.w	r6, r0, #15
 8009952:	4604      	mov	r4, r0
 8009954:	d005      	beq.n	8009962 <_strtod_l+0x72>
 8009956:	2e06      	cmp	r6, #6
 8009958:	d128      	bne.n	80099ac <_strtod_l+0xbc>
 800995a:	3501      	adds	r5, #1
 800995c:	2300      	movs	r3, #0
 800995e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009962:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009964:	2b00      	cmp	r3, #0
 8009966:	f040 858e 	bne.w	800a486 <_strtod_l+0xb96>
 800996a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800996c:	b1cb      	cbz	r3, 80099a2 <_strtod_l+0xb2>
 800996e:	4652      	mov	r2, sl
 8009970:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009974:	ec43 2b10 	vmov	d0, r2, r3
 8009978:	b01f      	add	sp, #124	@ 0x7c
 800997a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	2920      	cmp	r1, #32
 8009980:	d1ce      	bne.n	8009920 <_strtod_l+0x30>
 8009982:	3201      	adds	r2, #1
 8009984:	e7c1      	b.n	800990a <_strtod_l+0x1a>
 8009986:	292d      	cmp	r1, #45	@ 0x2d
 8009988:	d1ca      	bne.n	8009920 <_strtod_l+0x30>
 800998a:	2101      	movs	r1, #1
 800998c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800998e:	1c51      	adds	r1, r2, #1
 8009990:	9119      	str	r1, [sp, #100]	@ 0x64
 8009992:	7852      	ldrb	r2, [r2, #1]
 8009994:	2a00      	cmp	r2, #0
 8009996:	d1c5      	bne.n	8009924 <_strtod_l+0x34>
 8009998:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800999a:	9419      	str	r4, [sp, #100]	@ 0x64
 800999c:	2b00      	cmp	r3, #0
 800999e:	f040 8570 	bne.w	800a482 <_strtod_l+0xb92>
 80099a2:	4652      	mov	r2, sl
 80099a4:	465b      	mov	r3, fp
 80099a6:	e7e5      	b.n	8009974 <_strtod_l+0x84>
 80099a8:	2100      	movs	r1, #0
 80099aa:	e7ef      	b.n	800998c <_strtod_l+0x9c>
 80099ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099ae:	b13a      	cbz	r2, 80099c0 <_strtod_l+0xd0>
 80099b0:	2135      	movs	r1, #53	@ 0x35
 80099b2:	a81c      	add	r0, sp, #112	@ 0x70
 80099b4:	f002 f80a 	bl	800b9cc <__copybits>
 80099b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ba:	9805      	ldr	r0, [sp, #20]
 80099bc:	f001 fbd8 	bl	800b170 <_Bfree>
 80099c0:	3e01      	subs	r6, #1
 80099c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80099c4:	2e04      	cmp	r6, #4
 80099c6:	d806      	bhi.n	80099d6 <_strtod_l+0xe6>
 80099c8:	e8df f006 	tbb	[pc, r6]
 80099cc:	201d0314 	.word	0x201d0314
 80099d0:	14          	.byte	0x14
 80099d1:	00          	.byte	0x00
 80099d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80099d6:	05e1      	lsls	r1, r4, #23
 80099d8:	bf48      	it	mi
 80099da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80099de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099e2:	0d1b      	lsrs	r3, r3, #20
 80099e4:	051b      	lsls	r3, r3, #20
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1bb      	bne.n	8009962 <_strtod_l+0x72>
 80099ea:	f000 fef7 	bl	800a7dc <__errno>
 80099ee:	2322      	movs	r3, #34	@ 0x22
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	e7b6      	b.n	8009962 <_strtod_l+0x72>
 80099f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80099f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80099fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009a00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a04:	e7e7      	b.n	80099d6 <_strtod_l+0xe6>
 8009a06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009b84 <_strtod_l+0x294>
 8009a0a:	e7e4      	b.n	80099d6 <_strtod_l+0xe6>
 8009a0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009a10:	f04f 3aff 	mov.w	sl, #4294967295
 8009a14:	e7df      	b.n	80099d6 <_strtod_l+0xe6>
 8009a16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a1c:	785b      	ldrb	r3, [r3, #1]
 8009a1e:	2b30      	cmp	r3, #48	@ 0x30
 8009a20:	d0f9      	beq.n	8009a16 <_strtod_l+0x126>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d09d      	beq.n	8009962 <_strtod_l+0x72>
 8009a26:	2301      	movs	r3, #1
 8009a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9308      	str	r3, [sp, #32]
 8009a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a34:	461f      	mov	r7, r3
 8009a36:	220a      	movs	r2, #10
 8009a38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009a3a:	7805      	ldrb	r5, [r0, #0]
 8009a3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009a40:	b2d9      	uxtb	r1, r3
 8009a42:	2909      	cmp	r1, #9
 8009a44:	d928      	bls.n	8009a98 <_strtod_l+0x1a8>
 8009a46:	494e      	ldr	r1, [pc, #312]	@ (8009b80 <_strtod_l+0x290>)
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f000 fe6e 	bl	800a72a <strncmp>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d032      	beq.n	8009ab8 <_strtod_l+0x1c8>
 8009a52:	2000      	movs	r0, #0
 8009a54:	462a      	mov	r2, r5
 8009a56:	4681      	mov	r9, r0
 8009a58:	463d      	mov	r5, r7
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2a65      	cmp	r2, #101	@ 0x65
 8009a5e:	d001      	beq.n	8009a64 <_strtod_l+0x174>
 8009a60:	2a45      	cmp	r2, #69	@ 0x45
 8009a62:	d114      	bne.n	8009a8e <_strtod_l+0x19e>
 8009a64:	b91d      	cbnz	r5, 8009a6e <_strtod_l+0x17e>
 8009a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a68:	4302      	orrs	r2, r0
 8009a6a:	d095      	beq.n	8009998 <_strtod_l+0xa8>
 8009a6c:	2500      	movs	r5, #0
 8009a6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009a70:	1c62      	adds	r2, r4, #1
 8009a72:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a74:	7862      	ldrb	r2, [r4, #1]
 8009a76:	2a2b      	cmp	r2, #43	@ 0x2b
 8009a78:	d077      	beq.n	8009b6a <_strtod_l+0x27a>
 8009a7a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009a7c:	d07b      	beq.n	8009b76 <_strtod_l+0x286>
 8009a7e:	f04f 0c00 	mov.w	ip, #0
 8009a82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009a86:	2909      	cmp	r1, #9
 8009a88:	f240 8082 	bls.w	8009b90 <_strtod_l+0x2a0>
 8009a8c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	e0a2      	b.n	8009bda <_strtod_l+0x2ea>
 8009a94:	2300      	movs	r3, #0
 8009a96:	e7c7      	b.n	8009a28 <_strtod_l+0x138>
 8009a98:	2f08      	cmp	r7, #8
 8009a9a:	bfd5      	itete	le
 8009a9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009a9e:	9908      	ldrgt	r1, [sp, #32]
 8009aa0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009aa4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009aa8:	f100 0001 	add.w	r0, r0, #1
 8009aac:	bfd4      	ite	le
 8009aae:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ab0:	9308      	strgt	r3, [sp, #32]
 8009ab2:	3701      	adds	r7, #1
 8009ab4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ab6:	e7bf      	b.n	8009a38 <_strtod_l+0x148>
 8009ab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009abe:	785a      	ldrb	r2, [r3, #1]
 8009ac0:	b37f      	cbz	r7, 8009b22 <_strtod_l+0x232>
 8009ac2:	4681      	mov	r9, r0
 8009ac4:	463d      	mov	r5, r7
 8009ac6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009aca:	2b09      	cmp	r3, #9
 8009acc:	d912      	bls.n	8009af4 <_strtod_l+0x204>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e7c4      	b.n	8009a5c <_strtod_l+0x16c>
 8009ad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ad8:	785a      	ldrb	r2, [r3, #1]
 8009ada:	3001      	adds	r0, #1
 8009adc:	2a30      	cmp	r2, #48	@ 0x30
 8009ade:	d0f8      	beq.n	8009ad2 <_strtod_l+0x1e2>
 8009ae0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	f200 84d3 	bhi.w	800a490 <_strtod_l+0xba0>
 8009aea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aec:	930c      	str	r3, [sp, #48]	@ 0x30
 8009aee:	4681      	mov	r9, r0
 8009af0:	2000      	movs	r0, #0
 8009af2:	4605      	mov	r5, r0
 8009af4:	3a30      	subs	r2, #48	@ 0x30
 8009af6:	f100 0301 	add.w	r3, r0, #1
 8009afa:	d02a      	beq.n	8009b52 <_strtod_l+0x262>
 8009afc:	4499      	add	r9, r3
 8009afe:	eb00 0c05 	add.w	ip, r0, r5
 8009b02:	462b      	mov	r3, r5
 8009b04:	210a      	movs	r1, #10
 8009b06:	4563      	cmp	r3, ip
 8009b08:	d10d      	bne.n	8009b26 <_strtod_l+0x236>
 8009b0a:	1c69      	adds	r1, r5, #1
 8009b0c:	4401      	add	r1, r0
 8009b0e:	4428      	add	r0, r5
 8009b10:	2808      	cmp	r0, #8
 8009b12:	dc16      	bgt.n	8009b42 <_strtod_l+0x252>
 8009b14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b16:	230a      	movs	r3, #10
 8009b18:	fb03 2300 	mla	r3, r3, r0, r2
 8009b1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e018      	b.n	8009b54 <_strtod_l+0x264>
 8009b22:	4638      	mov	r0, r7
 8009b24:	e7da      	b.n	8009adc <_strtod_l+0x1ec>
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	f103 0301 	add.w	r3, r3, #1
 8009b2c:	dc03      	bgt.n	8009b36 <_strtod_l+0x246>
 8009b2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009b30:	434e      	muls	r6, r1
 8009b32:	960a      	str	r6, [sp, #40]	@ 0x28
 8009b34:	e7e7      	b.n	8009b06 <_strtod_l+0x216>
 8009b36:	2b10      	cmp	r3, #16
 8009b38:	bfde      	ittt	le
 8009b3a:	9e08      	ldrle	r6, [sp, #32]
 8009b3c:	434e      	mulle	r6, r1
 8009b3e:	9608      	strle	r6, [sp, #32]
 8009b40:	e7e1      	b.n	8009b06 <_strtod_l+0x216>
 8009b42:	280f      	cmp	r0, #15
 8009b44:	dceb      	bgt.n	8009b1e <_strtod_l+0x22e>
 8009b46:	9808      	ldr	r0, [sp, #32]
 8009b48:	230a      	movs	r3, #10
 8009b4a:	fb03 2300 	mla	r3, r3, r0, r2
 8009b4e:	9308      	str	r3, [sp, #32]
 8009b50:	e7e5      	b.n	8009b1e <_strtod_l+0x22e>
 8009b52:	4629      	mov	r1, r5
 8009b54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b56:	1c50      	adds	r0, r2, #1
 8009b58:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b5a:	7852      	ldrb	r2, [r2, #1]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	460d      	mov	r5, r1
 8009b60:	e7b1      	b.n	8009ac6 <_strtod_l+0x1d6>
 8009b62:	f04f 0900 	mov.w	r9, #0
 8009b66:	2301      	movs	r3, #1
 8009b68:	e77d      	b.n	8009a66 <_strtod_l+0x176>
 8009b6a:	f04f 0c00 	mov.w	ip, #0
 8009b6e:	1ca2      	adds	r2, r4, #2
 8009b70:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b72:	78a2      	ldrb	r2, [r4, #2]
 8009b74:	e785      	b.n	8009a82 <_strtod_l+0x192>
 8009b76:	f04f 0c01 	mov.w	ip, #1
 8009b7a:	e7f8      	b.n	8009b6e <_strtod_l+0x27e>
 8009b7c:	0800d9a8 	.word	0x0800d9a8
 8009b80:	0800d984 	.word	0x0800d984
 8009b84:	7ff00000 	.word	0x7ff00000
 8009b88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b8a:	1c51      	adds	r1, r2, #1
 8009b8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b8e:	7852      	ldrb	r2, [r2, #1]
 8009b90:	2a30      	cmp	r2, #48	@ 0x30
 8009b92:	d0f9      	beq.n	8009b88 <_strtod_l+0x298>
 8009b94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009b98:	2908      	cmp	r1, #8
 8009b9a:	f63f af78 	bhi.w	8009a8e <_strtod_l+0x19e>
 8009b9e:	3a30      	subs	r2, #48	@ 0x30
 8009ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ba2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ba4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009ba6:	f04f 080a 	mov.w	r8, #10
 8009baa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bac:	1c56      	adds	r6, r2, #1
 8009bae:	9619      	str	r6, [sp, #100]	@ 0x64
 8009bb0:	7852      	ldrb	r2, [r2, #1]
 8009bb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009bb6:	f1be 0f09 	cmp.w	lr, #9
 8009bba:	d939      	bls.n	8009c30 <_strtod_l+0x340>
 8009bbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009bbe:	1a76      	subs	r6, r6, r1
 8009bc0:	2e08      	cmp	r6, #8
 8009bc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009bc6:	dc03      	bgt.n	8009bd0 <_strtod_l+0x2e0>
 8009bc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009bca:	4588      	cmp	r8, r1
 8009bcc:	bfa8      	it	ge
 8009bce:	4688      	movge	r8, r1
 8009bd0:	f1bc 0f00 	cmp.w	ip, #0
 8009bd4:	d001      	beq.n	8009bda <_strtod_l+0x2ea>
 8009bd6:	f1c8 0800 	rsb	r8, r8, #0
 8009bda:	2d00      	cmp	r5, #0
 8009bdc:	d14e      	bne.n	8009c7c <_strtod_l+0x38c>
 8009bde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009be0:	4308      	orrs	r0, r1
 8009be2:	f47f aebe 	bne.w	8009962 <_strtod_l+0x72>
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f47f aed6 	bne.w	8009998 <_strtod_l+0xa8>
 8009bec:	2a69      	cmp	r2, #105	@ 0x69
 8009bee:	d028      	beq.n	8009c42 <_strtod_l+0x352>
 8009bf0:	dc25      	bgt.n	8009c3e <_strtod_l+0x34e>
 8009bf2:	2a49      	cmp	r2, #73	@ 0x49
 8009bf4:	d025      	beq.n	8009c42 <_strtod_l+0x352>
 8009bf6:	2a4e      	cmp	r2, #78	@ 0x4e
 8009bf8:	f47f aece 	bne.w	8009998 <_strtod_l+0xa8>
 8009bfc:	499b      	ldr	r1, [pc, #620]	@ (8009e6c <_strtod_l+0x57c>)
 8009bfe:	a819      	add	r0, sp, #100	@ 0x64
 8009c00:	f001 f906 	bl	800ae10 <__match>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	f43f aec7 	beq.w	8009998 <_strtod_l+0xa8>
 8009c0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b28      	cmp	r3, #40	@ 0x28
 8009c10:	d12e      	bne.n	8009c70 <_strtod_l+0x380>
 8009c12:	4997      	ldr	r1, [pc, #604]	@ (8009e70 <_strtod_l+0x580>)
 8009c14:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c16:	a819      	add	r0, sp, #100	@ 0x64
 8009c18:	f001 f90e 	bl	800ae38 <__hexnan>
 8009c1c:	2805      	cmp	r0, #5
 8009c1e:	d127      	bne.n	8009c70 <_strtod_l+0x380>
 8009c20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009c26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009c2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009c2e:	e698      	b.n	8009962 <_strtod_l+0x72>
 8009c30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c32:	fb08 2101 	mla	r1, r8, r1, r2
 8009c36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009c3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c3c:	e7b5      	b.n	8009baa <_strtod_l+0x2ba>
 8009c3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009c40:	e7da      	b.n	8009bf8 <_strtod_l+0x308>
 8009c42:	498c      	ldr	r1, [pc, #560]	@ (8009e74 <_strtod_l+0x584>)
 8009c44:	a819      	add	r0, sp, #100	@ 0x64
 8009c46:	f001 f8e3 	bl	800ae10 <__match>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f43f aea4 	beq.w	8009998 <_strtod_l+0xa8>
 8009c50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c52:	4989      	ldr	r1, [pc, #548]	@ (8009e78 <_strtod_l+0x588>)
 8009c54:	3b01      	subs	r3, #1
 8009c56:	a819      	add	r0, sp, #100	@ 0x64
 8009c58:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c5a:	f001 f8d9 	bl	800ae10 <__match>
 8009c5e:	b910      	cbnz	r0, 8009c66 <_strtod_l+0x376>
 8009c60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c62:	3301      	adds	r3, #1
 8009c64:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009e88 <_strtod_l+0x598>
 8009c6a:	f04f 0a00 	mov.w	sl, #0
 8009c6e:	e678      	b.n	8009962 <_strtod_l+0x72>
 8009c70:	4882      	ldr	r0, [pc, #520]	@ (8009e7c <_strtod_l+0x58c>)
 8009c72:	f000 fdf1 	bl	800a858 <nan>
 8009c76:	ec5b ab10 	vmov	sl, fp, d0
 8009c7a:	e672      	b.n	8009962 <_strtod_l+0x72>
 8009c7c:	eba8 0309 	sub.w	r3, r8, r9
 8009c80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c84:	2f00      	cmp	r7, #0
 8009c86:	bf08      	it	eq
 8009c88:	462f      	moveq	r7, r5
 8009c8a:	2d10      	cmp	r5, #16
 8009c8c:	462c      	mov	r4, r5
 8009c8e:	bfa8      	it	ge
 8009c90:	2410      	movge	r4, #16
 8009c92:	f7f6 fc57 	bl	8000544 <__aeabi_ui2d>
 8009c96:	2d09      	cmp	r5, #9
 8009c98:	4682      	mov	sl, r0
 8009c9a:	468b      	mov	fp, r1
 8009c9c:	dc13      	bgt.n	8009cc6 <_strtod_l+0x3d6>
 8009c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f43f ae5e 	beq.w	8009962 <_strtod_l+0x72>
 8009ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca8:	dd78      	ble.n	8009d9c <_strtod_l+0x4ac>
 8009caa:	2b16      	cmp	r3, #22
 8009cac:	dc5f      	bgt.n	8009d6e <_strtod_l+0x47e>
 8009cae:	4974      	ldr	r1, [pc, #464]	@ (8009e80 <_strtod_l+0x590>)
 8009cb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cb8:	4652      	mov	r2, sl
 8009cba:	465b      	mov	r3, fp
 8009cbc:	f7f6 fcbc 	bl	8000638 <__aeabi_dmul>
 8009cc0:	4682      	mov	sl, r0
 8009cc2:	468b      	mov	fp, r1
 8009cc4:	e64d      	b.n	8009962 <_strtod_l+0x72>
 8009cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8009e80 <_strtod_l+0x590>)
 8009cc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ccc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009cd0:	f7f6 fcb2 	bl	8000638 <__aeabi_dmul>
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	9808      	ldr	r0, [sp, #32]
 8009cd8:	468b      	mov	fp, r1
 8009cda:	f7f6 fc33 	bl	8000544 <__aeabi_ui2d>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4650      	mov	r0, sl
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	f7f6 faf1 	bl	80002cc <__adddf3>
 8009cea:	2d0f      	cmp	r5, #15
 8009cec:	4682      	mov	sl, r0
 8009cee:	468b      	mov	fp, r1
 8009cf0:	ddd5      	ble.n	8009c9e <_strtod_l+0x3ae>
 8009cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf4:	1b2c      	subs	r4, r5, r4
 8009cf6:	441c      	add	r4, r3
 8009cf8:	2c00      	cmp	r4, #0
 8009cfa:	f340 8096 	ble.w	8009e2a <_strtod_l+0x53a>
 8009cfe:	f014 030f 	ands.w	r3, r4, #15
 8009d02:	d00a      	beq.n	8009d1a <_strtod_l+0x42a>
 8009d04:	495e      	ldr	r1, [pc, #376]	@ (8009e80 <_strtod_l+0x590>)
 8009d06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d0a:	4652      	mov	r2, sl
 8009d0c:	465b      	mov	r3, fp
 8009d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d12:	f7f6 fc91 	bl	8000638 <__aeabi_dmul>
 8009d16:	4682      	mov	sl, r0
 8009d18:	468b      	mov	fp, r1
 8009d1a:	f034 040f 	bics.w	r4, r4, #15
 8009d1e:	d073      	beq.n	8009e08 <_strtod_l+0x518>
 8009d20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009d24:	dd48      	ble.n	8009db8 <_strtod_l+0x4c8>
 8009d26:	2400      	movs	r4, #0
 8009d28:	46a0      	mov	r8, r4
 8009d2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d2c:	46a1      	mov	r9, r4
 8009d2e:	9a05      	ldr	r2, [sp, #20]
 8009d30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009e88 <_strtod_l+0x598>
 8009d34:	2322      	movs	r3, #34	@ 0x22
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	f04f 0a00 	mov.w	sl, #0
 8009d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f43f ae0f 	beq.w	8009962 <_strtod_l+0x72>
 8009d44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d46:	9805      	ldr	r0, [sp, #20]
 8009d48:	f001 fa12 	bl	800b170 <_Bfree>
 8009d4c:	9805      	ldr	r0, [sp, #20]
 8009d4e:	4649      	mov	r1, r9
 8009d50:	f001 fa0e 	bl	800b170 <_Bfree>
 8009d54:	9805      	ldr	r0, [sp, #20]
 8009d56:	4641      	mov	r1, r8
 8009d58:	f001 fa0a 	bl	800b170 <_Bfree>
 8009d5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d5e:	9805      	ldr	r0, [sp, #20]
 8009d60:	f001 fa06 	bl	800b170 <_Bfree>
 8009d64:	9805      	ldr	r0, [sp, #20]
 8009d66:	4621      	mov	r1, r4
 8009d68:	f001 fa02 	bl	800b170 <_Bfree>
 8009d6c:	e5f9      	b.n	8009962 <_strtod_l+0x72>
 8009d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009d74:	4293      	cmp	r3, r2
 8009d76:	dbbc      	blt.n	8009cf2 <_strtod_l+0x402>
 8009d78:	4c41      	ldr	r4, [pc, #260]	@ (8009e80 <_strtod_l+0x590>)
 8009d7a:	f1c5 050f 	rsb	r5, r5, #15
 8009d7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d82:	4652      	mov	r2, sl
 8009d84:	465b      	mov	r3, fp
 8009d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d8a:	f7f6 fc55 	bl	8000638 <__aeabi_dmul>
 8009d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d90:	1b5d      	subs	r5, r3, r5
 8009d92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d9a:	e78f      	b.n	8009cbc <_strtod_l+0x3cc>
 8009d9c:	3316      	adds	r3, #22
 8009d9e:	dba8      	blt.n	8009cf2 <_strtod_l+0x402>
 8009da0:	4b37      	ldr	r3, [pc, #220]	@ (8009e80 <_strtod_l+0x590>)
 8009da2:	eba9 0808 	sub.w	r8, r9, r8
 8009da6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009daa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009dae:	4650      	mov	r0, sl
 8009db0:	4659      	mov	r1, fp
 8009db2:	f7f6 fd6b 	bl	800088c <__aeabi_ddiv>
 8009db6:	e783      	b.n	8009cc0 <_strtod_l+0x3d0>
 8009db8:	4b32      	ldr	r3, [pc, #200]	@ (8009e84 <_strtod_l+0x594>)
 8009dba:	9308      	str	r3, [sp, #32]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	1124      	asrs	r4, r4, #4
 8009dc0:	4650      	mov	r0, sl
 8009dc2:	4659      	mov	r1, fp
 8009dc4:	461e      	mov	r6, r3
 8009dc6:	2c01      	cmp	r4, #1
 8009dc8:	dc21      	bgt.n	8009e0e <_strtod_l+0x51e>
 8009dca:	b10b      	cbz	r3, 8009dd0 <_strtod_l+0x4e0>
 8009dcc:	4682      	mov	sl, r0
 8009dce:	468b      	mov	fp, r1
 8009dd0:	492c      	ldr	r1, [pc, #176]	@ (8009e84 <_strtod_l+0x594>)
 8009dd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009dd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009dda:	4652      	mov	r2, sl
 8009ddc:	465b      	mov	r3, fp
 8009dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de2:	f7f6 fc29 	bl	8000638 <__aeabi_dmul>
 8009de6:	4b28      	ldr	r3, [pc, #160]	@ (8009e88 <_strtod_l+0x598>)
 8009de8:	460a      	mov	r2, r1
 8009dea:	400b      	ands	r3, r1
 8009dec:	4927      	ldr	r1, [pc, #156]	@ (8009e8c <_strtod_l+0x59c>)
 8009dee:	428b      	cmp	r3, r1
 8009df0:	4682      	mov	sl, r0
 8009df2:	d898      	bhi.n	8009d26 <_strtod_l+0x436>
 8009df4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009df8:	428b      	cmp	r3, r1
 8009dfa:	bf86      	itte	hi
 8009dfc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009e90 <_strtod_l+0x5a0>
 8009e00:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9308      	str	r3, [sp, #32]
 8009e0c:	e07a      	b.n	8009f04 <_strtod_l+0x614>
 8009e0e:	07e2      	lsls	r2, r4, #31
 8009e10:	d505      	bpl.n	8009e1e <_strtod_l+0x52e>
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 fc0e 	bl	8000638 <__aeabi_dmul>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	9a08      	ldr	r2, [sp, #32]
 8009e20:	3208      	adds	r2, #8
 8009e22:	3601      	adds	r6, #1
 8009e24:	1064      	asrs	r4, r4, #1
 8009e26:	9208      	str	r2, [sp, #32]
 8009e28:	e7cd      	b.n	8009dc6 <_strtod_l+0x4d6>
 8009e2a:	d0ed      	beq.n	8009e08 <_strtod_l+0x518>
 8009e2c:	4264      	negs	r4, r4
 8009e2e:	f014 020f 	ands.w	r2, r4, #15
 8009e32:	d00a      	beq.n	8009e4a <_strtod_l+0x55a>
 8009e34:	4b12      	ldr	r3, [pc, #72]	@ (8009e80 <_strtod_l+0x590>)
 8009e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e3a:	4650      	mov	r0, sl
 8009e3c:	4659      	mov	r1, fp
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 fd23 	bl	800088c <__aeabi_ddiv>
 8009e46:	4682      	mov	sl, r0
 8009e48:	468b      	mov	fp, r1
 8009e4a:	1124      	asrs	r4, r4, #4
 8009e4c:	d0dc      	beq.n	8009e08 <_strtod_l+0x518>
 8009e4e:	2c1f      	cmp	r4, #31
 8009e50:	dd20      	ble.n	8009e94 <_strtod_l+0x5a4>
 8009e52:	2400      	movs	r4, #0
 8009e54:	46a0      	mov	r8, r4
 8009e56:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e58:	46a1      	mov	r9, r4
 8009e5a:	9a05      	ldr	r2, [sp, #20]
 8009e5c:	2322      	movs	r3, #34	@ 0x22
 8009e5e:	f04f 0a00 	mov.w	sl, #0
 8009e62:	f04f 0b00 	mov.w	fp, #0
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	e768      	b.n	8009d3c <_strtod_l+0x44c>
 8009e6a:	bf00      	nop
 8009e6c:	0800d98f 	.word	0x0800d98f
 8009e70:	0800d994 	.word	0x0800d994
 8009e74:	0800d986 	.word	0x0800d986
 8009e78:	0800d989 	.word	0x0800d989
 8009e7c:	0800dd3f 	.word	0x0800dd3f
 8009e80:	0800db08 	.word	0x0800db08
 8009e84:	0800dae0 	.word	0x0800dae0
 8009e88:	7ff00000 	.word	0x7ff00000
 8009e8c:	7ca00000 	.word	0x7ca00000
 8009e90:	7fefffff 	.word	0x7fefffff
 8009e94:	f014 0310 	ands.w	r3, r4, #16
 8009e98:	bf18      	it	ne
 8009e9a:	236a      	movne	r3, #106	@ 0x6a
 8009e9c:	4ea9      	ldr	r6, [pc, #676]	@ (800a144 <_strtod_l+0x854>)
 8009e9e:	9308      	str	r3, [sp, #32]
 8009ea0:	4650      	mov	r0, sl
 8009ea2:	4659      	mov	r1, fp
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	07e2      	lsls	r2, r4, #31
 8009ea8:	d504      	bpl.n	8009eb4 <_strtod_l+0x5c4>
 8009eaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009eae:	f7f6 fbc3 	bl	8000638 <__aeabi_dmul>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	1064      	asrs	r4, r4, #1
 8009eb6:	f106 0608 	add.w	r6, r6, #8
 8009eba:	d1f4      	bne.n	8009ea6 <_strtod_l+0x5b6>
 8009ebc:	b10b      	cbz	r3, 8009ec2 <_strtod_l+0x5d2>
 8009ebe:	4682      	mov	sl, r0
 8009ec0:	468b      	mov	fp, r1
 8009ec2:	9b08      	ldr	r3, [sp, #32]
 8009ec4:	b1b3      	cbz	r3, 8009ef4 <_strtod_l+0x604>
 8009ec6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009eca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	4659      	mov	r1, fp
 8009ed2:	dd0f      	ble.n	8009ef4 <_strtod_l+0x604>
 8009ed4:	2b1f      	cmp	r3, #31
 8009ed6:	dd55      	ble.n	8009f84 <_strtod_l+0x694>
 8009ed8:	2b34      	cmp	r3, #52	@ 0x34
 8009eda:	bfde      	ittt	le
 8009edc:	f04f 33ff 	movle.w	r3, #4294967295
 8009ee0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009ee4:	4093      	lslle	r3, r2
 8009ee6:	f04f 0a00 	mov.w	sl, #0
 8009eea:	bfcc      	ite	gt
 8009eec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009ef0:	ea03 0b01 	andle.w	fp, r3, r1
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	4650      	mov	r0, sl
 8009efa:	4659      	mov	r1, fp
 8009efc:	f7f6 fe04 	bl	8000b08 <__aeabi_dcmpeq>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d1a6      	bne.n	8009e52 <_strtod_l+0x562>
 8009f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f0a:	9805      	ldr	r0, [sp, #20]
 8009f0c:	462b      	mov	r3, r5
 8009f0e:	463a      	mov	r2, r7
 8009f10:	f001 f996 	bl	800b240 <__s2b>
 8009f14:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f16:	2800      	cmp	r0, #0
 8009f18:	f43f af05 	beq.w	8009d26 <_strtod_l+0x436>
 8009f1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	eba9 0308 	sub.w	r3, r9, r8
 8009f24:	bfa8      	it	ge
 8009f26:	2300      	movge	r3, #0
 8009f28:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f30:	9316      	str	r3, [sp, #88]	@ 0x58
 8009f32:	46a0      	mov	r8, r4
 8009f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f36:	9805      	ldr	r0, [sp, #20]
 8009f38:	6859      	ldr	r1, [r3, #4]
 8009f3a:	f001 f8d9 	bl	800b0f0 <_Balloc>
 8009f3e:	4681      	mov	r9, r0
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f43f aef4 	beq.w	8009d2e <_strtod_l+0x43e>
 8009f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	3202      	adds	r2, #2
 8009f4c:	f103 010c 	add.w	r1, r3, #12
 8009f50:	0092      	lsls	r2, r2, #2
 8009f52:	300c      	adds	r0, #12
 8009f54:	f000 fc6f 	bl	800a836 <memcpy>
 8009f58:	ec4b ab10 	vmov	d0, sl, fp
 8009f5c:	9805      	ldr	r0, [sp, #20]
 8009f5e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009f60:	a91b      	add	r1, sp, #108	@ 0x6c
 8009f62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009f66:	f001 fca7 	bl	800b8b8 <__d2b>
 8009f6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f43f aede 	beq.w	8009d2e <_strtod_l+0x43e>
 8009f72:	9805      	ldr	r0, [sp, #20]
 8009f74:	2101      	movs	r1, #1
 8009f76:	f001 f9f9 	bl	800b36c <__i2b>
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	b948      	cbnz	r0, 8009f92 <_strtod_l+0x6a2>
 8009f7e:	f04f 0800 	mov.w	r8, #0
 8009f82:	e6d4      	b.n	8009d2e <_strtod_l+0x43e>
 8009f84:	f04f 32ff 	mov.w	r2, #4294967295
 8009f88:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8c:	ea03 0a0a 	and.w	sl, r3, sl
 8009f90:	e7b0      	b.n	8009ef4 <_strtod_l+0x604>
 8009f92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009f94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	bfab      	itete	ge
 8009f9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009f9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009f9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009fa0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009fa2:	bfac      	ite	ge
 8009fa4:	18ef      	addge	r7, r5, r3
 8009fa6:	1b5e      	sublt	r6, r3, r5
 8009fa8:	9b08      	ldr	r3, [sp, #32]
 8009faa:	1aed      	subs	r5, r5, r3
 8009fac:	4415      	add	r5, r2
 8009fae:	4b66      	ldr	r3, [pc, #408]	@ (800a148 <_strtod_l+0x858>)
 8009fb0:	3d01      	subs	r5, #1
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009fb8:	da50      	bge.n	800a05c <_strtod_l+0x76c>
 8009fba:	1b5b      	subs	r3, r3, r5
 8009fbc:	2b1f      	cmp	r3, #31
 8009fbe:	eba2 0203 	sub.w	r2, r2, r3
 8009fc2:	f04f 0101 	mov.w	r1, #1
 8009fc6:	dc3d      	bgt.n	800a044 <_strtod_l+0x754>
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009fd2:	18bd      	adds	r5, r7, r2
 8009fd4:	9b08      	ldr	r3, [sp, #32]
 8009fd6:	42af      	cmp	r7, r5
 8009fd8:	4416      	add	r6, r2
 8009fda:	441e      	add	r6, r3
 8009fdc:	463b      	mov	r3, r7
 8009fde:	bfa8      	it	ge
 8009fe0:	462b      	movge	r3, r5
 8009fe2:	42b3      	cmp	r3, r6
 8009fe4:	bfa8      	it	ge
 8009fe6:	4633      	movge	r3, r6
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	bfc2      	ittt	gt
 8009fec:	1aed      	subgt	r5, r5, r3
 8009fee:	1af6      	subgt	r6, r6, r3
 8009ff0:	1aff      	subgt	r7, r7, r3
 8009ff2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dd16      	ble.n	800a026 <_strtod_l+0x736>
 8009ff8:	4641      	mov	r1, r8
 8009ffa:	9805      	ldr	r0, [sp, #20]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f001 fa75 	bl	800b4ec <__pow5mult>
 800a002:	4680      	mov	r8, r0
 800a004:	2800      	cmp	r0, #0
 800a006:	d0ba      	beq.n	8009f7e <_strtod_l+0x68e>
 800a008:	4601      	mov	r1, r0
 800a00a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a00c:	9805      	ldr	r0, [sp, #20]
 800a00e:	f001 f9c3 	bl	800b398 <__multiply>
 800a012:	900e      	str	r0, [sp, #56]	@ 0x38
 800a014:	2800      	cmp	r0, #0
 800a016:	f43f ae8a 	beq.w	8009d2e <_strtod_l+0x43e>
 800a01a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a01c:	9805      	ldr	r0, [sp, #20]
 800a01e:	f001 f8a7 	bl	800b170 <_Bfree>
 800a022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a024:	931a      	str	r3, [sp, #104]	@ 0x68
 800a026:	2d00      	cmp	r5, #0
 800a028:	dc1d      	bgt.n	800a066 <_strtod_l+0x776>
 800a02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dd23      	ble.n	800a078 <_strtod_l+0x788>
 800a030:	4649      	mov	r1, r9
 800a032:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a034:	9805      	ldr	r0, [sp, #20]
 800a036:	f001 fa59 	bl	800b4ec <__pow5mult>
 800a03a:	4681      	mov	r9, r0
 800a03c:	b9e0      	cbnz	r0, 800a078 <_strtod_l+0x788>
 800a03e:	f04f 0900 	mov.w	r9, #0
 800a042:	e674      	b.n	8009d2e <_strtod_l+0x43e>
 800a044:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a048:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a04c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a050:	35e2      	adds	r5, #226	@ 0xe2
 800a052:	fa01 f305 	lsl.w	r3, r1, r5
 800a056:	9310      	str	r3, [sp, #64]	@ 0x40
 800a058:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a05a:	e7ba      	b.n	8009fd2 <_strtod_l+0x6e2>
 800a05c:	2300      	movs	r3, #0
 800a05e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a060:	2301      	movs	r3, #1
 800a062:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a064:	e7b5      	b.n	8009fd2 <_strtod_l+0x6e2>
 800a066:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a068:	9805      	ldr	r0, [sp, #20]
 800a06a:	462a      	mov	r2, r5
 800a06c:	f001 fa98 	bl	800b5a0 <__lshift>
 800a070:	901a      	str	r0, [sp, #104]	@ 0x68
 800a072:	2800      	cmp	r0, #0
 800a074:	d1d9      	bne.n	800a02a <_strtod_l+0x73a>
 800a076:	e65a      	b.n	8009d2e <_strtod_l+0x43e>
 800a078:	2e00      	cmp	r6, #0
 800a07a:	dd07      	ble.n	800a08c <_strtod_l+0x79c>
 800a07c:	4649      	mov	r1, r9
 800a07e:	9805      	ldr	r0, [sp, #20]
 800a080:	4632      	mov	r2, r6
 800a082:	f001 fa8d 	bl	800b5a0 <__lshift>
 800a086:	4681      	mov	r9, r0
 800a088:	2800      	cmp	r0, #0
 800a08a:	d0d8      	beq.n	800a03e <_strtod_l+0x74e>
 800a08c:	2f00      	cmp	r7, #0
 800a08e:	dd08      	ble.n	800a0a2 <_strtod_l+0x7b2>
 800a090:	4641      	mov	r1, r8
 800a092:	9805      	ldr	r0, [sp, #20]
 800a094:	463a      	mov	r2, r7
 800a096:	f001 fa83 	bl	800b5a0 <__lshift>
 800a09a:	4680      	mov	r8, r0
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f43f ae46 	beq.w	8009d2e <_strtod_l+0x43e>
 800a0a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0a4:	9805      	ldr	r0, [sp, #20]
 800a0a6:	464a      	mov	r2, r9
 800a0a8:	f001 fb02 	bl	800b6b0 <__mdiff>
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f43f ae3d 	beq.w	8009d2e <_strtod_l+0x43e>
 800a0b4:	68c3      	ldr	r3, [r0, #12]
 800a0b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60c3      	str	r3, [r0, #12]
 800a0bc:	4641      	mov	r1, r8
 800a0be:	f001 fadb 	bl	800b678 <__mcmp>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	da46      	bge.n	800a154 <_strtod_l+0x864>
 800a0c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0c8:	ea53 030a 	orrs.w	r3, r3, sl
 800a0cc:	d16c      	bne.n	800a1a8 <_strtod_l+0x8b8>
 800a0ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d168      	bne.n	800a1a8 <_strtod_l+0x8b8>
 800a0d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a0da:	0d1b      	lsrs	r3, r3, #20
 800a0dc:	051b      	lsls	r3, r3, #20
 800a0de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a0e2:	d961      	bls.n	800a1a8 <_strtod_l+0x8b8>
 800a0e4:	6963      	ldr	r3, [r4, #20]
 800a0e6:	b913      	cbnz	r3, 800a0ee <_strtod_l+0x7fe>
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	dd5c      	ble.n	800a1a8 <_strtod_l+0x8b8>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	9805      	ldr	r0, [sp, #20]
 800a0f4:	f001 fa54 	bl	800b5a0 <__lshift>
 800a0f8:	4641      	mov	r1, r8
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	f001 fabc 	bl	800b678 <__mcmp>
 800a100:	2800      	cmp	r0, #0
 800a102:	dd51      	ble.n	800a1a8 <_strtod_l+0x8b8>
 800a104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a108:	9a08      	ldr	r2, [sp, #32]
 800a10a:	0d1b      	lsrs	r3, r3, #20
 800a10c:	051b      	lsls	r3, r3, #20
 800a10e:	2a00      	cmp	r2, #0
 800a110:	d06b      	beq.n	800a1ea <_strtod_l+0x8fa>
 800a112:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a116:	d868      	bhi.n	800a1ea <_strtod_l+0x8fa>
 800a118:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a11c:	f67f ae9d 	bls.w	8009e5a <_strtod_l+0x56a>
 800a120:	4b0a      	ldr	r3, [pc, #40]	@ (800a14c <_strtod_l+0x85c>)
 800a122:	4650      	mov	r0, sl
 800a124:	4659      	mov	r1, fp
 800a126:	2200      	movs	r2, #0
 800a128:	f7f6 fa86 	bl	8000638 <__aeabi_dmul>
 800a12c:	4b08      	ldr	r3, [pc, #32]	@ (800a150 <_strtod_l+0x860>)
 800a12e:	400b      	ands	r3, r1
 800a130:	4682      	mov	sl, r0
 800a132:	468b      	mov	fp, r1
 800a134:	2b00      	cmp	r3, #0
 800a136:	f47f ae05 	bne.w	8009d44 <_strtod_l+0x454>
 800a13a:	9a05      	ldr	r2, [sp, #20]
 800a13c:	2322      	movs	r3, #34	@ 0x22
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	e600      	b.n	8009d44 <_strtod_l+0x454>
 800a142:	bf00      	nop
 800a144:	0800d9c0 	.word	0x0800d9c0
 800a148:	fffffc02 	.word	0xfffffc02
 800a14c:	39500000 	.word	0x39500000
 800a150:	7ff00000 	.word	0x7ff00000
 800a154:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a158:	d165      	bne.n	800a226 <_strtod_l+0x936>
 800a15a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a15c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a160:	b35a      	cbz	r2, 800a1ba <_strtod_l+0x8ca>
 800a162:	4a9f      	ldr	r2, [pc, #636]	@ (800a3e0 <_strtod_l+0xaf0>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d12b      	bne.n	800a1c0 <_strtod_l+0x8d0>
 800a168:	9b08      	ldr	r3, [sp, #32]
 800a16a:	4651      	mov	r1, sl
 800a16c:	b303      	cbz	r3, 800a1b0 <_strtod_l+0x8c0>
 800a16e:	4b9d      	ldr	r3, [pc, #628]	@ (800a3e4 <_strtod_l+0xaf4>)
 800a170:	465a      	mov	r2, fp
 800a172:	4013      	ands	r3, r2
 800a174:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a178:	f04f 32ff 	mov.w	r2, #4294967295
 800a17c:	d81b      	bhi.n	800a1b6 <_strtod_l+0x8c6>
 800a17e:	0d1b      	lsrs	r3, r3, #20
 800a180:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a184:	fa02 f303 	lsl.w	r3, r2, r3
 800a188:	4299      	cmp	r1, r3
 800a18a:	d119      	bne.n	800a1c0 <_strtod_l+0x8d0>
 800a18c:	4b96      	ldr	r3, [pc, #600]	@ (800a3e8 <_strtod_l+0xaf8>)
 800a18e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a190:	429a      	cmp	r2, r3
 800a192:	d102      	bne.n	800a19a <_strtod_l+0x8aa>
 800a194:	3101      	adds	r1, #1
 800a196:	f43f adca 	beq.w	8009d2e <_strtod_l+0x43e>
 800a19a:	4b92      	ldr	r3, [pc, #584]	@ (800a3e4 <_strtod_l+0xaf4>)
 800a19c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a19e:	401a      	ands	r2, r3
 800a1a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a1a4:	f04f 0a00 	mov.w	sl, #0
 800a1a8:	9b08      	ldr	r3, [sp, #32]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1b8      	bne.n	800a120 <_strtod_l+0x830>
 800a1ae:	e5c9      	b.n	8009d44 <_strtod_l+0x454>
 800a1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b4:	e7e8      	b.n	800a188 <_strtod_l+0x898>
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	e7e6      	b.n	800a188 <_strtod_l+0x898>
 800a1ba:	ea53 030a 	orrs.w	r3, r3, sl
 800a1be:	d0a1      	beq.n	800a104 <_strtod_l+0x814>
 800a1c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1c2:	b1db      	cbz	r3, 800a1fc <_strtod_l+0x90c>
 800a1c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1c6:	4213      	tst	r3, r2
 800a1c8:	d0ee      	beq.n	800a1a8 <_strtod_l+0x8b8>
 800a1ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1cc:	9a08      	ldr	r2, [sp, #32]
 800a1ce:	4650      	mov	r0, sl
 800a1d0:	4659      	mov	r1, fp
 800a1d2:	b1bb      	cbz	r3, 800a204 <_strtod_l+0x914>
 800a1d4:	f7ff fb6c 	bl	80098b0 <sulp>
 800a1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1dc:	ec53 2b10 	vmov	r2, r3, d0
 800a1e0:	f7f6 f874 	bl	80002cc <__adddf3>
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	468b      	mov	fp, r1
 800a1e8:	e7de      	b.n	800a1a8 <_strtod_l+0x8b8>
 800a1ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a1ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a1f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a1f6:	f04f 3aff 	mov.w	sl, #4294967295
 800a1fa:	e7d5      	b.n	800a1a8 <_strtod_l+0x8b8>
 800a1fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1fe:	ea13 0f0a 	tst.w	r3, sl
 800a202:	e7e1      	b.n	800a1c8 <_strtod_l+0x8d8>
 800a204:	f7ff fb54 	bl	80098b0 <sulp>
 800a208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a20c:	ec53 2b10 	vmov	r2, r3, d0
 800a210:	f7f6 f85a 	bl	80002c8 <__aeabi_dsub>
 800a214:	2200      	movs	r2, #0
 800a216:	2300      	movs	r3, #0
 800a218:	4682      	mov	sl, r0
 800a21a:	468b      	mov	fp, r1
 800a21c:	f7f6 fc74 	bl	8000b08 <__aeabi_dcmpeq>
 800a220:	2800      	cmp	r0, #0
 800a222:	d0c1      	beq.n	800a1a8 <_strtod_l+0x8b8>
 800a224:	e619      	b.n	8009e5a <_strtod_l+0x56a>
 800a226:	4641      	mov	r1, r8
 800a228:	4620      	mov	r0, r4
 800a22a:	f001 fb9d 	bl	800b968 <__ratio>
 800a22e:	ec57 6b10 	vmov	r6, r7, d0
 800a232:	2200      	movs	r2, #0
 800a234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	f7f6 fc78 	bl	8000b30 <__aeabi_dcmple>
 800a240:	2800      	cmp	r0, #0
 800a242:	d06f      	beq.n	800a324 <_strtod_l+0xa34>
 800a244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d17a      	bne.n	800a340 <_strtod_l+0xa50>
 800a24a:	f1ba 0f00 	cmp.w	sl, #0
 800a24e:	d158      	bne.n	800a302 <_strtod_l+0xa12>
 800a250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a256:	2b00      	cmp	r3, #0
 800a258:	d15a      	bne.n	800a310 <_strtod_l+0xa20>
 800a25a:	4b64      	ldr	r3, [pc, #400]	@ (800a3ec <_strtod_l+0xafc>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	4630      	mov	r0, r6
 800a260:	4639      	mov	r1, r7
 800a262:	f7f6 fc5b 	bl	8000b1c <__aeabi_dcmplt>
 800a266:	2800      	cmp	r0, #0
 800a268:	d159      	bne.n	800a31e <_strtod_l+0xa2e>
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	4b60      	ldr	r3, [pc, #384]	@ (800a3f0 <_strtod_l+0xb00>)
 800a270:	2200      	movs	r2, #0
 800a272:	f7f6 f9e1 	bl	8000638 <__aeabi_dmul>
 800a276:	4606      	mov	r6, r0
 800a278:	460f      	mov	r7, r1
 800a27a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a27e:	9606      	str	r6, [sp, #24]
 800a280:	9307      	str	r3, [sp, #28]
 800a282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a286:	4d57      	ldr	r5, [pc, #348]	@ (800a3e4 <_strtod_l+0xaf4>)
 800a288:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a28c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a28e:	401d      	ands	r5, r3
 800a290:	4b58      	ldr	r3, [pc, #352]	@ (800a3f4 <_strtod_l+0xb04>)
 800a292:	429d      	cmp	r5, r3
 800a294:	f040 80b2 	bne.w	800a3fc <_strtod_l+0xb0c>
 800a298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a29a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a29e:	ec4b ab10 	vmov	d0, sl, fp
 800a2a2:	f001 fa99 	bl	800b7d8 <__ulp>
 800a2a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2aa:	ec51 0b10 	vmov	r0, r1, d0
 800a2ae:	f7f6 f9c3 	bl	8000638 <__aeabi_dmul>
 800a2b2:	4652      	mov	r2, sl
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	f7f6 f809 	bl	80002cc <__adddf3>
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4949      	ldr	r1, [pc, #292]	@ (800a3e4 <_strtod_l+0xaf4>)
 800a2be:	4a4e      	ldr	r2, [pc, #312]	@ (800a3f8 <_strtod_l+0xb08>)
 800a2c0:	4019      	ands	r1, r3
 800a2c2:	4291      	cmp	r1, r2
 800a2c4:	4682      	mov	sl, r0
 800a2c6:	d942      	bls.n	800a34e <_strtod_l+0xa5e>
 800a2c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a2ca:	4b47      	ldr	r3, [pc, #284]	@ (800a3e8 <_strtod_l+0xaf8>)
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d103      	bne.n	800a2d8 <_strtod_l+0x9e8>
 800a2d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	f43f ad2b 	beq.w	8009d2e <_strtod_l+0x43e>
 800a2d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a3e8 <_strtod_l+0xaf8>
 800a2dc:	f04f 3aff 	mov.w	sl, #4294967295
 800a2e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2e2:	9805      	ldr	r0, [sp, #20]
 800a2e4:	f000 ff44 	bl	800b170 <_Bfree>
 800a2e8:	9805      	ldr	r0, [sp, #20]
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	f000 ff40 	bl	800b170 <_Bfree>
 800a2f0:	9805      	ldr	r0, [sp, #20]
 800a2f2:	4641      	mov	r1, r8
 800a2f4:	f000 ff3c 	bl	800b170 <_Bfree>
 800a2f8:	9805      	ldr	r0, [sp, #20]
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	f000 ff38 	bl	800b170 <_Bfree>
 800a300:	e618      	b.n	8009f34 <_strtod_l+0x644>
 800a302:	f1ba 0f01 	cmp.w	sl, #1
 800a306:	d103      	bne.n	800a310 <_strtod_l+0xa20>
 800a308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f43f ada5 	beq.w	8009e5a <_strtod_l+0x56a>
 800a310:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a3c0 <_strtod_l+0xad0>
 800a314:	4f35      	ldr	r7, [pc, #212]	@ (800a3ec <_strtod_l+0xafc>)
 800a316:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a31a:	2600      	movs	r6, #0
 800a31c:	e7b1      	b.n	800a282 <_strtod_l+0x992>
 800a31e:	4f34      	ldr	r7, [pc, #208]	@ (800a3f0 <_strtod_l+0xb00>)
 800a320:	2600      	movs	r6, #0
 800a322:	e7aa      	b.n	800a27a <_strtod_l+0x98a>
 800a324:	4b32      	ldr	r3, [pc, #200]	@ (800a3f0 <_strtod_l+0xb00>)
 800a326:	4630      	mov	r0, r6
 800a328:	4639      	mov	r1, r7
 800a32a:	2200      	movs	r2, #0
 800a32c:	f7f6 f984 	bl	8000638 <__aeabi_dmul>
 800a330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a332:	4606      	mov	r6, r0
 800a334:	460f      	mov	r7, r1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d09f      	beq.n	800a27a <_strtod_l+0x98a>
 800a33a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a33e:	e7a0      	b.n	800a282 <_strtod_l+0x992>
 800a340:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a3c8 <_strtod_l+0xad8>
 800a344:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a348:	ec57 6b17 	vmov	r6, r7, d7
 800a34c:	e799      	b.n	800a282 <_strtod_l+0x992>
 800a34e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a352:	9b08      	ldr	r3, [sp, #32]
 800a354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1c1      	bne.n	800a2e0 <_strtod_l+0x9f0>
 800a35c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a360:	0d1b      	lsrs	r3, r3, #20
 800a362:	051b      	lsls	r3, r3, #20
 800a364:	429d      	cmp	r5, r3
 800a366:	d1bb      	bne.n	800a2e0 <_strtod_l+0x9f0>
 800a368:	4630      	mov	r0, r6
 800a36a:	4639      	mov	r1, r7
 800a36c:	f7f6 fcae 	bl	8000ccc <__aeabi_d2lz>
 800a370:	f7f6 f934 	bl	80005dc <__aeabi_l2d>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4630      	mov	r0, r6
 800a37a:	4639      	mov	r1, r7
 800a37c:	f7f5 ffa4 	bl	80002c8 <__aeabi_dsub>
 800a380:	460b      	mov	r3, r1
 800a382:	4602      	mov	r2, r0
 800a384:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a388:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a38c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a38e:	ea46 060a 	orr.w	r6, r6, sl
 800a392:	431e      	orrs	r6, r3
 800a394:	d06f      	beq.n	800a476 <_strtod_l+0xb86>
 800a396:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3d0 <_strtod_l+0xae0>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f6 fbbe 	bl	8000b1c <__aeabi_dcmplt>
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	f47f accf 	bne.w	8009d44 <_strtod_l+0x454>
 800a3a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a3d8 <_strtod_l+0xae8>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3b0:	f7f6 fbd2 	bl	8000b58 <__aeabi_dcmpgt>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d093      	beq.n	800a2e0 <_strtod_l+0x9f0>
 800a3b8:	e4c4      	b.n	8009d44 <_strtod_l+0x454>
 800a3ba:	bf00      	nop
 800a3bc:	f3af 8000 	nop.w
 800a3c0:	00000000 	.word	0x00000000
 800a3c4:	bff00000 	.word	0xbff00000
 800a3c8:	00000000 	.word	0x00000000
 800a3cc:	3ff00000 	.word	0x3ff00000
 800a3d0:	94a03595 	.word	0x94a03595
 800a3d4:	3fdfffff 	.word	0x3fdfffff
 800a3d8:	35afe535 	.word	0x35afe535
 800a3dc:	3fe00000 	.word	0x3fe00000
 800a3e0:	000fffff 	.word	0x000fffff
 800a3e4:	7ff00000 	.word	0x7ff00000
 800a3e8:	7fefffff 	.word	0x7fefffff
 800a3ec:	3ff00000 	.word	0x3ff00000
 800a3f0:	3fe00000 	.word	0x3fe00000
 800a3f4:	7fe00000 	.word	0x7fe00000
 800a3f8:	7c9fffff 	.word	0x7c9fffff
 800a3fc:	9b08      	ldr	r3, [sp, #32]
 800a3fe:	b323      	cbz	r3, 800a44a <_strtod_l+0xb5a>
 800a400:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a404:	d821      	bhi.n	800a44a <_strtod_l+0xb5a>
 800a406:	a328      	add	r3, pc, #160	@ (adr r3, 800a4a8 <_strtod_l+0xbb8>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	4630      	mov	r0, r6
 800a40e:	4639      	mov	r1, r7
 800a410:	f7f6 fb8e 	bl	8000b30 <__aeabi_dcmple>
 800a414:	b1a0      	cbz	r0, 800a440 <_strtod_l+0xb50>
 800a416:	4639      	mov	r1, r7
 800a418:	4630      	mov	r0, r6
 800a41a:	f7f6 fbcf 	bl	8000bbc <__aeabi_d2uiz>
 800a41e:	2801      	cmp	r0, #1
 800a420:	bf38      	it	cc
 800a422:	2001      	movcc	r0, #1
 800a424:	f7f6 f88e 	bl	8000544 <__aeabi_ui2d>
 800a428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	b9fb      	cbnz	r3, 800a470 <_strtod_l+0xb80>
 800a430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a434:	9014      	str	r0, [sp, #80]	@ 0x50
 800a436:	9315      	str	r3, [sp, #84]	@ 0x54
 800a438:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a43c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a440:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a442:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a446:	1b5b      	subs	r3, r3, r5
 800a448:	9311      	str	r3, [sp, #68]	@ 0x44
 800a44a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a44e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a452:	f001 f9c1 	bl	800b7d8 <__ulp>
 800a456:	4650      	mov	r0, sl
 800a458:	ec53 2b10 	vmov	r2, r3, d0
 800a45c:	4659      	mov	r1, fp
 800a45e:	f7f6 f8eb 	bl	8000638 <__aeabi_dmul>
 800a462:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a466:	f7f5 ff31 	bl	80002cc <__adddf3>
 800a46a:	4682      	mov	sl, r0
 800a46c:	468b      	mov	fp, r1
 800a46e:	e770      	b.n	800a352 <_strtod_l+0xa62>
 800a470:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a474:	e7e0      	b.n	800a438 <_strtod_l+0xb48>
 800a476:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4b0 <_strtod_l+0xbc0>)
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	f7f6 fb4e 	bl	8000b1c <__aeabi_dcmplt>
 800a480:	e798      	b.n	800a3b4 <_strtod_l+0xac4>
 800a482:	2300      	movs	r3, #0
 800a484:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a486:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	f7ff ba6d 	b.w	800996a <_strtod_l+0x7a>
 800a490:	2a65      	cmp	r2, #101	@ 0x65
 800a492:	f43f ab66 	beq.w	8009b62 <_strtod_l+0x272>
 800a496:	2a45      	cmp	r2, #69	@ 0x45
 800a498:	f43f ab63 	beq.w	8009b62 <_strtod_l+0x272>
 800a49c:	2301      	movs	r3, #1
 800a49e:	f7ff bb9e 	b.w	8009bde <_strtod_l+0x2ee>
 800a4a2:	bf00      	nop
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	ffc00000 	.word	0xffc00000
 800a4ac:	41dfffff 	.word	0x41dfffff
 800a4b0:	94a03595 	.word	0x94a03595
 800a4b4:	3fcfffff 	.word	0x3fcfffff

0800a4b8 <strtod>:
 800a4b8:	460a      	mov	r2, r1
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	4802      	ldr	r0, [pc, #8]	@ (800a4c8 <strtod+0x10>)
 800a4be:	4b03      	ldr	r3, [pc, #12]	@ (800a4cc <strtod+0x14>)
 800a4c0:	6800      	ldr	r0, [r0, #0]
 800a4c2:	f7ff ba15 	b.w	80098f0 <_strtod_l>
 800a4c6:	bf00      	nop
 800a4c8:	20000190 	.word	0x20000190
 800a4cc:	20000024 	.word	0x20000024

0800a4d0 <std>:
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4de:	6083      	str	r3, [r0, #8]
 800a4e0:	8181      	strh	r1, [r0, #12]
 800a4e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4e4:	81c2      	strh	r2, [r0, #14]
 800a4e6:	6183      	str	r3, [r0, #24]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	2208      	movs	r2, #8
 800a4ec:	305c      	adds	r0, #92	@ 0x5c
 800a4ee:	f000 f914 	bl	800a71a <memset>
 800a4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a528 <std+0x58>)
 800a4f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a52c <std+0x5c>)
 800a4f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a530 <std+0x60>)
 800a4fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a534 <std+0x64>)
 800a500:	6323      	str	r3, [r4, #48]	@ 0x30
 800a502:	4b0d      	ldr	r3, [pc, #52]	@ (800a538 <std+0x68>)
 800a504:	6224      	str	r4, [r4, #32]
 800a506:	429c      	cmp	r4, r3
 800a508:	d006      	beq.n	800a518 <std+0x48>
 800a50a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a50e:	4294      	cmp	r4, r2
 800a510:	d002      	beq.n	800a518 <std+0x48>
 800a512:	33d0      	adds	r3, #208	@ 0xd0
 800a514:	429c      	cmp	r4, r3
 800a516:	d105      	bne.n	800a524 <std+0x54>
 800a518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a520:	f000 b986 	b.w	800a830 <__retarget_lock_init_recursive>
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	0800a695 	.word	0x0800a695
 800a52c:	0800a6b7 	.word	0x0800a6b7
 800a530:	0800a6ef 	.word	0x0800a6ef
 800a534:	0800a713 	.word	0x0800a713
 800a538:	20001248 	.word	0x20001248

0800a53c <stdio_exit_handler>:
 800a53c:	4a02      	ldr	r2, [pc, #8]	@ (800a548 <stdio_exit_handler+0xc>)
 800a53e:	4903      	ldr	r1, [pc, #12]	@ (800a54c <stdio_exit_handler+0x10>)
 800a540:	4803      	ldr	r0, [pc, #12]	@ (800a550 <stdio_exit_handler+0x14>)
 800a542:	f000 b869 	b.w	800a618 <_fwalk_sglue>
 800a546:	bf00      	nop
 800a548:	20000018 	.word	0x20000018
 800a54c:	0800c141 	.word	0x0800c141
 800a550:	20000194 	.word	0x20000194

0800a554 <cleanup_stdio>:
 800a554:	6841      	ldr	r1, [r0, #4]
 800a556:	4b0c      	ldr	r3, [pc, #48]	@ (800a588 <cleanup_stdio+0x34>)
 800a558:	4299      	cmp	r1, r3
 800a55a:	b510      	push	{r4, lr}
 800a55c:	4604      	mov	r4, r0
 800a55e:	d001      	beq.n	800a564 <cleanup_stdio+0x10>
 800a560:	f001 fdee 	bl	800c140 <_fflush_r>
 800a564:	68a1      	ldr	r1, [r4, #8]
 800a566:	4b09      	ldr	r3, [pc, #36]	@ (800a58c <cleanup_stdio+0x38>)
 800a568:	4299      	cmp	r1, r3
 800a56a:	d002      	beq.n	800a572 <cleanup_stdio+0x1e>
 800a56c:	4620      	mov	r0, r4
 800a56e:	f001 fde7 	bl	800c140 <_fflush_r>
 800a572:	68e1      	ldr	r1, [r4, #12]
 800a574:	4b06      	ldr	r3, [pc, #24]	@ (800a590 <cleanup_stdio+0x3c>)
 800a576:	4299      	cmp	r1, r3
 800a578:	d004      	beq.n	800a584 <cleanup_stdio+0x30>
 800a57a:	4620      	mov	r0, r4
 800a57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a580:	f001 bdde 	b.w	800c140 <_fflush_r>
 800a584:	bd10      	pop	{r4, pc}
 800a586:	bf00      	nop
 800a588:	20001248 	.word	0x20001248
 800a58c:	200012b0 	.word	0x200012b0
 800a590:	20001318 	.word	0x20001318

0800a594 <global_stdio_init.part.0>:
 800a594:	b510      	push	{r4, lr}
 800a596:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c4 <global_stdio_init.part.0+0x30>)
 800a598:	4c0b      	ldr	r4, [pc, #44]	@ (800a5c8 <global_stdio_init.part.0+0x34>)
 800a59a:	4a0c      	ldr	r2, [pc, #48]	@ (800a5cc <global_stdio_init.part.0+0x38>)
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	4620      	mov	r0, r4
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2104      	movs	r1, #4
 800a5a4:	f7ff ff94 	bl	800a4d0 <std>
 800a5a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	2109      	movs	r1, #9
 800a5b0:	f7ff ff8e 	bl	800a4d0 <std>
 800a5b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5be:	2112      	movs	r1, #18
 800a5c0:	f7ff bf86 	b.w	800a4d0 <std>
 800a5c4:	20001380 	.word	0x20001380
 800a5c8:	20001248 	.word	0x20001248
 800a5cc:	0800a53d 	.word	0x0800a53d

0800a5d0 <__sfp_lock_acquire>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	@ (800a5d8 <__sfp_lock_acquire+0x8>)
 800a5d2:	f000 b92e 	b.w	800a832 <__retarget_lock_acquire_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	20001389 	.word	0x20001389

0800a5dc <__sfp_lock_release>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	@ (800a5e4 <__sfp_lock_release+0x8>)
 800a5de:	f000 b929 	b.w	800a834 <__retarget_lock_release_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	20001389 	.word	0x20001389

0800a5e8 <__sinit>:
 800a5e8:	b510      	push	{r4, lr}
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	f7ff fff0 	bl	800a5d0 <__sfp_lock_acquire>
 800a5f0:	6a23      	ldr	r3, [r4, #32]
 800a5f2:	b11b      	cbz	r3, 800a5fc <__sinit+0x14>
 800a5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f8:	f7ff bff0 	b.w	800a5dc <__sfp_lock_release>
 800a5fc:	4b04      	ldr	r3, [pc, #16]	@ (800a610 <__sinit+0x28>)
 800a5fe:	6223      	str	r3, [r4, #32]
 800a600:	4b04      	ldr	r3, [pc, #16]	@ (800a614 <__sinit+0x2c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1f5      	bne.n	800a5f4 <__sinit+0xc>
 800a608:	f7ff ffc4 	bl	800a594 <global_stdio_init.part.0>
 800a60c:	e7f2      	b.n	800a5f4 <__sinit+0xc>
 800a60e:	bf00      	nop
 800a610:	0800a555 	.word	0x0800a555
 800a614:	20001380 	.word	0x20001380

0800a618 <_fwalk_sglue>:
 800a618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a61c:	4607      	mov	r7, r0
 800a61e:	4688      	mov	r8, r1
 800a620:	4614      	mov	r4, r2
 800a622:	2600      	movs	r6, #0
 800a624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a628:	f1b9 0901 	subs.w	r9, r9, #1
 800a62c:	d505      	bpl.n	800a63a <_fwalk_sglue+0x22>
 800a62e:	6824      	ldr	r4, [r4, #0]
 800a630:	2c00      	cmp	r4, #0
 800a632:	d1f7      	bne.n	800a624 <_fwalk_sglue+0xc>
 800a634:	4630      	mov	r0, r6
 800a636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63a:	89ab      	ldrh	r3, [r5, #12]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d907      	bls.n	800a650 <_fwalk_sglue+0x38>
 800a640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a644:	3301      	adds	r3, #1
 800a646:	d003      	beq.n	800a650 <_fwalk_sglue+0x38>
 800a648:	4629      	mov	r1, r5
 800a64a:	4638      	mov	r0, r7
 800a64c:	47c0      	blx	r8
 800a64e:	4306      	orrs	r6, r0
 800a650:	3568      	adds	r5, #104	@ 0x68
 800a652:	e7e9      	b.n	800a628 <_fwalk_sglue+0x10>

0800a654 <siprintf>:
 800a654:	b40e      	push	{r1, r2, r3}
 800a656:	b500      	push	{lr}
 800a658:	b09c      	sub	sp, #112	@ 0x70
 800a65a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a65c:	9002      	str	r0, [sp, #8]
 800a65e:	9006      	str	r0, [sp, #24]
 800a660:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a664:	4809      	ldr	r0, [pc, #36]	@ (800a68c <siprintf+0x38>)
 800a666:	9107      	str	r1, [sp, #28]
 800a668:	9104      	str	r1, [sp, #16]
 800a66a:	4909      	ldr	r1, [pc, #36]	@ (800a690 <siprintf+0x3c>)
 800a66c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a670:	9105      	str	r1, [sp, #20]
 800a672:	6800      	ldr	r0, [r0, #0]
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	a902      	add	r1, sp, #8
 800a678:	f001 fa54 	bl	800bb24 <_svfiprintf_r>
 800a67c:	9b02      	ldr	r3, [sp, #8]
 800a67e:	2200      	movs	r2, #0
 800a680:	701a      	strb	r2, [r3, #0]
 800a682:	b01c      	add	sp, #112	@ 0x70
 800a684:	f85d eb04 	ldr.w	lr, [sp], #4
 800a688:	b003      	add	sp, #12
 800a68a:	4770      	bx	lr
 800a68c:	20000190 	.word	0x20000190
 800a690:	ffff0208 	.word	0xffff0208

0800a694 <__sread>:
 800a694:	b510      	push	{r4, lr}
 800a696:	460c      	mov	r4, r1
 800a698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69c:	f000 f87a 	bl	800a794 <_read_r>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	bfab      	itete	ge
 800a6a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a6a8:	181b      	addge	r3, r3, r0
 800a6aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6ae:	bfac      	ite	ge
 800a6b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6b2:	81a3      	strhlt	r3, [r4, #12]
 800a6b4:	bd10      	pop	{r4, pc}

0800a6b6 <__swrite>:
 800a6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ba:	461f      	mov	r7, r3
 800a6bc:	898b      	ldrh	r3, [r1, #12]
 800a6be:	05db      	lsls	r3, r3, #23
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	d505      	bpl.n	800a6d4 <__swrite+0x1e>
 800a6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f000 f84e 	bl	800a770 <_lseek_r>
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	4632      	mov	r2, r6
 800a6e2:	463b      	mov	r3, r7
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ea:	f000 b865 	b.w	800a7b8 <_write_r>

0800a6ee <__sseek>:
 800a6ee:	b510      	push	{r4, lr}
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f6:	f000 f83b 	bl	800a770 <_lseek_r>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	bf15      	itete	ne
 800a700:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a70a:	81a3      	strheq	r3, [r4, #12]
 800a70c:	bf18      	it	ne
 800a70e:	81a3      	strhne	r3, [r4, #12]
 800a710:	bd10      	pop	{r4, pc}

0800a712 <__sclose>:
 800a712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a716:	f000 b81b 	b.w	800a750 <_close_r>

0800a71a <memset>:
 800a71a:	4402      	add	r2, r0
 800a71c:	4603      	mov	r3, r0
 800a71e:	4293      	cmp	r3, r2
 800a720:	d100      	bne.n	800a724 <memset+0xa>
 800a722:	4770      	bx	lr
 800a724:	f803 1b01 	strb.w	r1, [r3], #1
 800a728:	e7f9      	b.n	800a71e <memset+0x4>

0800a72a <strncmp>:
 800a72a:	b510      	push	{r4, lr}
 800a72c:	b16a      	cbz	r2, 800a74a <strncmp+0x20>
 800a72e:	3901      	subs	r1, #1
 800a730:	1884      	adds	r4, r0, r2
 800a732:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a736:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d103      	bne.n	800a746 <strncmp+0x1c>
 800a73e:	42a0      	cmp	r0, r4
 800a740:	d001      	beq.n	800a746 <strncmp+0x1c>
 800a742:	2a00      	cmp	r2, #0
 800a744:	d1f5      	bne.n	800a732 <strncmp+0x8>
 800a746:	1ad0      	subs	r0, r2, r3
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	4610      	mov	r0, r2
 800a74c:	e7fc      	b.n	800a748 <strncmp+0x1e>
	...

0800a750 <_close_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4d06      	ldr	r5, [pc, #24]	@ (800a76c <_close_r+0x1c>)
 800a754:	2300      	movs	r3, #0
 800a756:	4604      	mov	r4, r0
 800a758:	4608      	mov	r0, r1
 800a75a:	602b      	str	r3, [r5, #0]
 800a75c:	f7f8 fa28 	bl	8002bb0 <_close>
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	d102      	bne.n	800a76a <_close_r+0x1a>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	b103      	cbz	r3, 800a76a <_close_r+0x1a>
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	20001384 	.word	0x20001384

0800a770 <_lseek_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4d07      	ldr	r5, [pc, #28]	@ (800a790 <_lseek_r+0x20>)
 800a774:	4604      	mov	r4, r0
 800a776:	4608      	mov	r0, r1
 800a778:	4611      	mov	r1, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	602a      	str	r2, [r5, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f7f8 fa3d 	bl	8002bfe <_lseek>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_lseek_r+0x1e>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_lseek_r+0x1e>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20001384 	.word	0x20001384

0800a794 <_read_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4d07      	ldr	r5, [pc, #28]	@ (800a7b4 <_read_r+0x20>)
 800a798:	4604      	mov	r4, r0
 800a79a:	4608      	mov	r0, r1
 800a79c:	4611      	mov	r1, r2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	602a      	str	r2, [r5, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f7f8 f9cb 	bl	8002b3e <_read>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_read_r+0x1e>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_read_r+0x1e>
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	20001384 	.word	0x20001384

0800a7b8 <_write_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d07      	ldr	r5, [pc, #28]	@ (800a7d8 <_write_r+0x20>)
 800a7bc:	4604      	mov	r4, r0
 800a7be:	4608      	mov	r0, r1
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	602a      	str	r2, [r5, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f7f8 f9d6 	bl	8002b78 <_write>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_write_r+0x1e>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_write_r+0x1e>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20001384 	.word	0x20001384

0800a7dc <__errno>:
 800a7dc:	4b01      	ldr	r3, [pc, #4]	@ (800a7e4 <__errno+0x8>)
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20000190 	.word	0x20000190

0800a7e8 <__libc_init_array>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	4d0d      	ldr	r5, [pc, #52]	@ (800a820 <__libc_init_array+0x38>)
 800a7ec:	4c0d      	ldr	r4, [pc, #52]	@ (800a824 <__libc_init_array+0x3c>)
 800a7ee:	1b64      	subs	r4, r4, r5
 800a7f0:	10a4      	asrs	r4, r4, #2
 800a7f2:	2600      	movs	r6, #0
 800a7f4:	42a6      	cmp	r6, r4
 800a7f6:	d109      	bne.n	800a80c <__libc_init_array+0x24>
 800a7f8:	4d0b      	ldr	r5, [pc, #44]	@ (800a828 <__libc_init_array+0x40>)
 800a7fa:	4c0c      	ldr	r4, [pc, #48]	@ (800a82c <__libc_init_array+0x44>)
 800a7fc:	f003 f848 	bl	800d890 <_init>
 800a800:	1b64      	subs	r4, r4, r5
 800a802:	10a4      	asrs	r4, r4, #2
 800a804:	2600      	movs	r6, #0
 800a806:	42a6      	cmp	r6, r4
 800a808:	d105      	bne.n	800a816 <__libc_init_array+0x2e>
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a810:	4798      	blx	r3
 800a812:	3601      	adds	r6, #1
 800a814:	e7ee      	b.n	800a7f4 <__libc_init_array+0xc>
 800a816:	f855 3b04 	ldr.w	r3, [r5], #4
 800a81a:	4798      	blx	r3
 800a81c:	3601      	adds	r6, #1
 800a81e:	e7f2      	b.n	800a806 <__libc_init_array+0x1e>
 800a820:	0800df20 	.word	0x0800df20
 800a824:	0800df20 	.word	0x0800df20
 800a828:	0800df20 	.word	0x0800df20
 800a82c:	0800df24 	.word	0x0800df24

0800a830 <__retarget_lock_init_recursive>:
 800a830:	4770      	bx	lr

0800a832 <__retarget_lock_acquire_recursive>:
 800a832:	4770      	bx	lr

0800a834 <__retarget_lock_release_recursive>:
 800a834:	4770      	bx	lr

0800a836 <memcpy>:
 800a836:	440a      	add	r2, r1
 800a838:	4291      	cmp	r1, r2
 800a83a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a83e:	d100      	bne.n	800a842 <memcpy+0xc>
 800a840:	4770      	bx	lr
 800a842:	b510      	push	{r4, lr}
 800a844:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a84c:	4291      	cmp	r1, r2
 800a84e:	d1f9      	bne.n	800a844 <memcpy+0xe>
 800a850:	bd10      	pop	{r4, pc}
 800a852:	0000      	movs	r0, r0
 800a854:	0000      	movs	r0, r0
	...

0800a858 <nan>:
 800a858:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a860 <nan+0x8>
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	00000000 	.word	0x00000000
 800a864:	7ff80000 	.word	0x7ff80000

0800a868 <_free_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4605      	mov	r5, r0
 800a86c:	2900      	cmp	r1, #0
 800a86e:	d041      	beq.n	800a8f4 <_free_r+0x8c>
 800a870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a874:	1f0c      	subs	r4, r1, #4
 800a876:	2b00      	cmp	r3, #0
 800a878:	bfb8      	it	lt
 800a87a:	18e4      	addlt	r4, r4, r3
 800a87c:	f000 fc2c 	bl	800b0d8 <__malloc_lock>
 800a880:	4a1d      	ldr	r2, [pc, #116]	@ (800a8f8 <_free_r+0x90>)
 800a882:	6813      	ldr	r3, [r2, #0]
 800a884:	b933      	cbnz	r3, 800a894 <_free_r+0x2c>
 800a886:	6063      	str	r3, [r4, #4]
 800a888:	6014      	str	r4, [r2, #0]
 800a88a:	4628      	mov	r0, r5
 800a88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a890:	f000 bc28 	b.w	800b0e4 <__malloc_unlock>
 800a894:	42a3      	cmp	r3, r4
 800a896:	d908      	bls.n	800a8aa <_free_r+0x42>
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	1821      	adds	r1, r4, r0
 800a89c:	428b      	cmp	r3, r1
 800a89e:	bf01      	itttt	eq
 800a8a0:	6819      	ldreq	r1, [r3, #0]
 800a8a2:	685b      	ldreq	r3, [r3, #4]
 800a8a4:	1809      	addeq	r1, r1, r0
 800a8a6:	6021      	streq	r1, [r4, #0]
 800a8a8:	e7ed      	b.n	800a886 <_free_r+0x1e>
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	b10b      	cbz	r3, 800a8b4 <_free_r+0x4c>
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	d9fa      	bls.n	800a8aa <_free_r+0x42>
 800a8b4:	6811      	ldr	r1, [r2, #0]
 800a8b6:	1850      	adds	r0, r2, r1
 800a8b8:	42a0      	cmp	r0, r4
 800a8ba:	d10b      	bne.n	800a8d4 <_free_r+0x6c>
 800a8bc:	6820      	ldr	r0, [r4, #0]
 800a8be:	4401      	add	r1, r0
 800a8c0:	1850      	adds	r0, r2, r1
 800a8c2:	4283      	cmp	r3, r0
 800a8c4:	6011      	str	r1, [r2, #0]
 800a8c6:	d1e0      	bne.n	800a88a <_free_r+0x22>
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	6053      	str	r3, [r2, #4]
 800a8ce:	4408      	add	r0, r1
 800a8d0:	6010      	str	r0, [r2, #0]
 800a8d2:	e7da      	b.n	800a88a <_free_r+0x22>
 800a8d4:	d902      	bls.n	800a8dc <_free_r+0x74>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	e7d6      	b.n	800a88a <_free_r+0x22>
 800a8dc:	6820      	ldr	r0, [r4, #0]
 800a8de:	1821      	adds	r1, r4, r0
 800a8e0:	428b      	cmp	r3, r1
 800a8e2:	bf04      	itt	eq
 800a8e4:	6819      	ldreq	r1, [r3, #0]
 800a8e6:	685b      	ldreq	r3, [r3, #4]
 800a8e8:	6063      	str	r3, [r4, #4]
 800a8ea:	bf04      	itt	eq
 800a8ec:	1809      	addeq	r1, r1, r0
 800a8ee:	6021      	streq	r1, [r4, #0]
 800a8f0:	6054      	str	r4, [r2, #4]
 800a8f2:	e7ca      	b.n	800a88a <_free_r+0x22>
 800a8f4:	bd38      	pop	{r3, r4, r5, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20001390 	.word	0x20001390

0800a8fc <rshift>:
 800a8fc:	6903      	ldr	r3, [r0, #16]
 800a8fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a906:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a90a:	f100 0414 	add.w	r4, r0, #20
 800a90e:	dd45      	ble.n	800a99c <rshift+0xa0>
 800a910:	f011 011f 	ands.w	r1, r1, #31
 800a914:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a918:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a91c:	d10c      	bne.n	800a938 <rshift+0x3c>
 800a91e:	f100 0710 	add.w	r7, r0, #16
 800a922:	4629      	mov	r1, r5
 800a924:	42b1      	cmp	r1, r6
 800a926:	d334      	bcc.n	800a992 <rshift+0x96>
 800a928:	1a9b      	subs	r3, r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	1eea      	subs	r2, r5, #3
 800a92e:	4296      	cmp	r6, r2
 800a930:	bf38      	it	cc
 800a932:	2300      	movcc	r3, #0
 800a934:	4423      	add	r3, r4
 800a936:	e015      	b.n	800a964 <rshift+0x68>
 800a938:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a93c:	f1c1 0820 	rsb	r8, r1, #32
 800a940:	40cf      	lsrs	r7, r1
 800a942:	f105 0e04 	add.w	lr, r5, #4
 800a946:	46a1      	mov	r9, r4
 800a948:	4576      	cmp	r6, lr
 800a94a:	46f4      	mov	ip, lr
 800a94c:	d815      	bhi.n	800a97a <rshift+0x7e>
 800a94e:	1a9a      	subs	r2, r3, r2
 800a950:	0092      	lsls	r2, r2, #2
 800a952:	3a04      	subs	r2, #4
 800a954:	3501      	adds	r5, #1
 800a956:	42ae      	cmp	r6, r5
 800a958:	bf38      	it	cc
 800a95a:	2200      	movcc	r2, #0
 800a95c:	18a3      	adds	r3, r4, r2
 800a95e:	50a7      	str	r7, [r4, r2]
 800a960:	b107      	cbz	r7, 800a964 <rshift+0x68>
 800a962:	3304      	adds	r3, #4
 800a964:	1b1a      	subs	r2, r3, r4
 800a966:	42a3      	cmp	r3, r4
 800a968:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a96c:	bf08      	it	eq
 800a96e:	2300      	moveq	r3, #0
 800a970:	6102      	str	r2, [r0, #16]
 800a972:	bf08      	it	eq
 800a974:	6143      	streq	r3, [r0, #20]
 800a976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a97a:	f8dc c000 	ldr.w	ip, [ip]
 800a97e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a982:	ea4c 0707 	orr.w	r7, ip, r7
 800a986:	f849 7b04 	str.w	r7, [r9], #4
 800a98a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a98e:	40cf      	lsrs	r7, r1
 800a990:	e7da      	b.n	800a948 <rshift+0x4c>
 800a992:	f851 cb04 	ldr.w	ip, [r1], #4
 800a996:	f847 cf04 	str.w	ip, [r7, #4]!
 800a99a:	e7c3      	b.n	800a924 <rshift+0x28>
 800a99c:	4623      	mov	r3, r4
 800a99e:	e7e1      	b.n	800a964 <rshift+0x68>

0800a9a0 <__hexdig_fun>:
 800a9a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a9a4:	2b09      	cmp	r3, #9
 800a9a6:	d802      	bhi.n	800a9ae <__hexdig_fun+0xe>
 800a9a8:	3820      	subs	r0, #32
 800a9aa:	b2c0      	uxtb	r0, r0
 800a9ac:	4770      	bx	lr
 800a9ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	d801      	bhi.n	800a9ba <__hexdig_fun+0x1a>
 800a9b6:	3847      	subs	r0, #71	@ 0x47
 800a9b8:	e7f7      	b.n	800a9aa <__hexdig_fun+0xa>
 800a9ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a9be:	2b05      	cmp	r3, #5
 800a9c0:	d801      	bhi.n	800a9c6 <__hexdig_fun+0x26>
 800a9c2:	3827      	subs	r0, #39	@ 0x27
 800a9c4:	e7f1      	b.n	800a9aa <__hexdig_fun+0xa>
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	4770      	bx	lr
	...

0800a9cc <__gethex>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	468a      	mov	sl, r1
 800a9d4:	9302      	str	r3, [sp, #8]
 800a9d6:	680b      	ldr	r3, [r1, #0]
 800a9d8:	9001      	str	r0, [sp, #4]
 800a9da:	4690      	mov	r8, r2
 800a9dc:	1c9c      	adds	r4, r3, #2
 800a9de:	46a1      	mov	r9, r4
 800a9e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a9e4:	2830      	cmp	r0, #48	@ 0x30
 800a9e6:	d0fa      	beq.n	800a9de <__gethex+0x12>
 800a9e8:	eba9 0303 	sub.w	r3, r9, r3
 800a9ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800a9f0:	f7ff ffd6 	bl	800a9a0 <__hexdig_fun>
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d168      	bne.n	800aacc <__gethex+0x100>
 800a9fa:	49a0      	ldr	r1, [pc, #640]	@ (800ac7c <__gethex+0x2b0>)
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	4648      	mov	r0, r9
 800aa00:	f7ff fe93 	bl	800a72a <strncmp>
 800aa04:	4607      	mov	r7, r0
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d167      	bne.n	800aada <__gethex+0x10e>
 800aa0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa0e:	4626      	mov	r6, r4
 800aa10:	f7ff ffc6 	bl	800a9a0 <__hexdig_fun>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d062      	beq.n	800aade <__gethex+0x112>
 800aa18:	4623      	mov	r3, r4
 800aa1a:	7818      	ldrb	r0, [r3, #0]
 800aa1c:	2830      	cmp	r0, #48	@ 0x30
 800aa1e:	4699      	mov	r9, r3
 800aa20:	f103 0301 	add.w	r3, r3, #1
 800aa24:	d0f9      	beq.n	800aa1a <__gethex+0x4e>
 800aa26:	f7ff ffbb 	bl	800a9a0 <__hexdig_fun>
 800aa2a:	fab0 f580 	clz	r5, r0
 800aa2e:	096d      	lsrs	r5, r5, #5
 800aa30:	f04f 0b01 	mov.w	fp, #1
 800aa34:	464a      	mov	r2, r9
 800aa36:	4616      	mov	r6, r2
 800aa38:	3201      	adds	r2, #1
 800aa3a:	7830      	ldrb	r0, [r6, #0]
 800aa3c:	f7ff ffb0 	bl	800a9a0 <__hexdig_fun>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d1f8      	bne.n	800aa36 <__gethex+0x6a>
 800aa44:	498d      	ldr	r1, [pc, #564]	@ (800ac7c <__gethex+0x2b0>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f7ff fe6e 	bl	800a72a <strncmp>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d13f      	bne.n	800aad2 <__gethex+0x106>
 800aa52:	b944      	cbnz	r4, 800aa66 <__gethex+0x9a>
 800aa54:	1c74      	adds	r4, r6, #1
 800aa56:	4622      	mov	r2, r4
 800aa58:	4616      	mov	r6, r2
 800aa5a:	3201      	adds	r2, #1
 800aa5c:	7830      	ldrb	r0, [r6, #0]
 800aa5e:	f7ff ff9f 	bl	800a9a0 <__hexdig_fun>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d1f8      	bne.n	800aa58 <__gethex+0x8c>
 800aa66:	1ba4      	subs	r4, r4, r6
 800aa68:	00a7      	lsls	r7, r4, #2
 800aa6a:	7833      	ldrb	r3, [r6, #0]
 800aa6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aa70:	2b50      	cmp	r3, #80	@ 0x50
 800aa72:	d13e      	bne.n	800aaf2 <__gethex+0x126>
 800aa74:	7873      	ldrb	r3, [r6, #1]
 800aa76:	2b2b      	cmp	r3, #43	@ 0x2b
 800aa78:	d033      	beq.n	800aae2 <__gethex+0x116>
 800aa7a:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa7c:	d034      	beq.n	800aae8 <__gethex+0x11c>
 800aa7e:	1c71      	adds	r1, r6, #1
 800aa80:	2400      	movs	r4, #0
 800aa82:	7808      	ldrb	r0, [r1, #0]
 800aa84:	f7ff ff8c 	bl	800a9a0 <__hexdig_fun>
 800aa88:	1e43      	subs	r3, r0, #1
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b18      	cmp	r3, #24
 800aa8e:	d830      	bhi.n	800aaf2 <__gethex+0x126>
 800aa90:	f1a0 0210 	sub.w	r2, r0, #16
 800aa94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa98:	f7ff ff82 	bl	800a9a0 <__hexdig_fun>
 800aa9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800aaa0:	fa5f fc8c 	uxtb.w	ip, ip
 800aaa4:	f1bc 0f18 	cmp.w	ip, #24
 800aaa8:	f04f 030a 	mov.w	r3, #10
 800aaac:	d91e      	bls.n	800aaec <__gethex+0x120>
 800aaae:	b104      	cbz	r4, 800aab2 <__gethex+0xe6>
 800aab0:	4252      	negs	r2, r2
 800aab2:	4417      	add	r7, r2
 800aab4:	f8ca 1000 	str.w	r1, [sl]
 800aab8:	b1ed      	cbz	r5, 800aaf6 <__gethex+0x12a>
 800aaba:	f1bb 0f00 	cmp.w	fp, #0
 800aabe:	bf0c      	ite	eq
 800aac0:	2506      	moveq	r5, #6
 800aac2:	2500      	movne	r5, #0
 800aac4:	4628      	mov	r0, r5
 800aac6:	b005      	add	sp, #20
 800aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aacc:	2500      	movs	r5, #0
 800aace:	462c      	mov	r4, r5
 800aad0:	e7b0      	b.n	800aa34 <__gethex+0x68>
 800aad2:	2c00      	cmp	r4, #0
 800aad4:	d1c7      	bne.n	800aa66 <__gethex+0x9a>
 800aad6:	4627      	mov	r7, r4
 800aad8:	e7c7      	b.n	800aa6a <__gethex+0x9e>
 800aada:	464e      	mov	r6, r9
 800aadc:	462f      	mov	r7, r5
 800aade:	2501      	movs	r5, #1
 800aae0:	e7c3      	b.n	800aa6a <__gethex+0x9e>
 800aae2:	2400      	movs	r4, #0
 800aae4:	1cb1      	adds	r1, r6, #2
 800aae6:	e7cc      	b.n	800aa82 <__gethex+0xb6>
 800aae8:	2401      	movs	r4, #1
 800aaea:	e7fb      	b.n	800aae4 <__gethex+0x118>
 800aaec:	fb03 0002 	mla	r0, r3, r2, r0
 800aaf0:	e7ce      	b.n	800aa90 <__gethex+0xc4>
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	e7de      	b.n	800aab4 <__gethex+0xe8>
 800aaf6:	eba6 0309 	sub.w	r3, r6, r9
 800aafa:	3b01      	subs	r3, #1
 800aafc:	4629      	mov	r1, r5
 800aafe:	2b07      	cmp	r3, #7
 800ab00:	dc0a      	bgt.n	800ab18 <__gethex+0x14c>
 800ab02:	9801      	ldr	r0, [sp, #4]
 800ab04:	f000 faf4 	bl	800b0f0 <_Balloc>
 800ab08:	4604      	mov	r4, r0
 800ab0a:	b940      	cbnz	r0, 800ab1e <__gethex+0x152>
 800ab0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ac80 <__gethex+0x2b4>)
 800ab0e:	4602      	mov	r2, r0
 800ab10:	21e4      	movs	r1, #228	@ 0xe4
 800ab12:	485c      	ldr	r0, [pc, #368]	@ (800ac84 <__gethex+0x2b8>)
 800ab14:	f001 fb66 	bl	800c1e4 <__assert_func>
 800ab18:	3101      	adds	r1, #1
 800ab1a:	105b      	asrs	r3, r3, #1
 800ab1c:	e7ef      	b.n	800aafe <__gethex+0x132>
 800ab1e:	f100 0a14 	add.w	sl, r0, #20
 800ab22:	2300      	movs	r3, #0
 800ab24:	4655      	mov	r5, sl
 800ab26:	469b      	mov	fp, r3
 800ab28:	45b1      	cmp	r9, r6
 800ab2a:	d337      	bcc.n	800ab9c <__gethex+0x1d0>
 800ab2c:	f845 bb04 	str.w	fp, [r5], #4
 800ab30:	eba5 050a 	sub.w	r5, r5, sl
 800ab34:	10ad      	asrs	r5, r5, #2
 800ab36:	6125      	str	r5, [r4, #16]
 800ab38:	4658      	mov	r0, fp
 800ab3a:	f000 fbcb 	bl	800b2d4 <__hi0bits>
 800ab3e:	016d      	lsls	r5, r5, #5
 800ab40:	f8d8 6000 	ldr.w	r6, [r8]
 800ab44:	1a2d      	subs	r5, r5, r0
 800ab46:	42b5      	cmp	r5, r6
 800ab48:	dd54      	ble.n	800abf4 <__gethex+0x228>
 800ab4a:	1bad      	subs	r5, r5, r6
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 ff5f 	bl	800ba12 <__any_on>
 800ab54:	4681      	mov	r9, r0
 800ab56:	b178      	cbz	r0, 800ab78 <__gethex+0x1ac>
 800ab58:	1e6b      	subs	r3, r5, #1
 800ab5a:	1159      	asrs	r1, r3, #5
 800ab5c:	f003 021f 	and.w	r2, r3, #31
 800ab60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab64:	f04f 0901 	mov.w	r9, #1
 800ab68:	fa09 f202 	lsl.w	r2, r9, r2
 800ab6c:	420a      	tst	r2, r1
 800ab6e:	d003      	beq.n	800ab78 <__gethex+0x1ac>
 800ab70:	454b      	cmp	r3, r9
 800ab72:	dc36      	bgt.n	800abe2 <__gethex+0x216>
 800ab74:	f04f 0902 	mov.w	r9, #2
 800ab78:	4629      	mov	r1, r5
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f7ff febe 	bl	800a8fc <rshift>
 800ab80:	442f      	add	r7, r5
 800ab82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab86:	42bb      	cmp	r3, r7
 800ab88:	da42      	bge.n	800ac10 <__gethex+0x244>
 800ab8a:	9801      	ldr	r0, [sp, #4]
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	f000 faef 	bl	800b170 <_Bfree>
 800ab92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab94:	2300      	movs	r3, #0
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	25a3      	movs	r5, #163	@ 0xa3
 800ab9a:	e793      	b.n	800aac4 <__gethex+0xf8>
 800ab9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aba0:	2a2e      	cmp	r2, #46	@ 0x2e
 800aba2:	d012      	beq.n	800abca <__gethex+0x1fe>
 800aba4:	2b20      	cmp	r3, #32
 800aba6:	d104      	bne.n	800abb2 <__gethex+0x1e6>
 800aba8:	f845 bb04 	str.w	fp, [r5], #4
 800abac:	f04f 0b00 	mov.w	fp, #0
 800abb0:	465b      	mov	r3, fp
 800abb2:	7830      	ldrb	r0, [r6, #0]
 800abb4:	9303      	str	r3, [sp, #12]
 800abb6:	f7ff fef3 	bl	800a9a0 <__hexdig_fun>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	f000 000f 	and.w	r0, r0, #15
 800abc0:	4098      	lsls	r0, r3
 800abc2:	ea4b 0b00 	orr.w	fp, fp, r0
 800abc6:	3304      	adds	r3, #4
 800abc8:	e7ae      	b.n	800ab28 <__gethex+0x15c>
 800abca:	45b1      	cmp	r9, r6
 800abcc:	d8ea      	bhi.n	800aba4 <__gethex+0x1d8>
 800abce:	492b      	ldr	r1, [pc, #172]	@ (800ac7c <__gethex+0x2b0>)
 800abd0:	9303      	str	r3, [sp, #12]
 800abd2:	2201      	movs	r2, #1
 800abd4:	4630      	mov	r0, r6
 800abd6:	f7ff fda8 	bl	800a72a <strncmp>
 800abda:	9b03      	ldr	r3, [sp, #12]
 800abdc:	2800      	cmp	r0, #0
 800abde:	d1e1      	bne.n	800aba4 <__gethex+0x1d8>
 800abe0:	e7a2      	b.n	800ab28 <__gethex+0x15c>
 800abe2:	1ea9      	subs	r1, r5, #2
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 ff14 	bl	800ba12 <__any_on>
 800abea:	2800      	cmp	r0, #0
 800abec:	d0c2      	beq.n	800ab74 <__gethex+0x1a8>
 800abee:	f04f 0903 	mov.w	r9, #3
 800abf2:	e7c1      	b.n	800ab78 <__gethex+0x1ac>
 800abf4:	da09      	bge.n	800ac0a <__gethex+0x23e>
 800abf6:	1b75      	subs	r5, r6, r5
 800abf8:	4621      	mov	r1, r4
 800abfa:	9801      	ldr	r0, [sp, #4]
 800abfc:	462a      	mov	r2, r5
 800abfe:	f000 fccf 	bl	800b5a0 <__lshift>
 800ac02:	1b7f      	subs	r7, r7, r5
 800ac04:	4604      	mov	r4, r0
 800ac06:	f100 0a14 	add.w	sl, r0, #20
 800ac0a:	f04f 0900 	mov.w	r9, #0
 800ac0e:	e7b8      	b.n	800ab82 <__gethex+0x1b6>
 800ac10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac14:	42bd      	cmp	r5, r7
 800ac16:	dd6f      	ble.n	800acf8 <__gethex+0x32c>
 800ac18:	1bed      	subs	r5, r5, r7
 800ac1a:	42ae      	cmp	r6, r5
 800ac1c:	dc34      	bgt.n	800ac88 <__gethex+0x2bc>
 800ac1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d022      	beq.n	800ac6c <__gethex+0x2a0>
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d024      	beq.n	800ac74 <__gethex+0x2a8>
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d115      	bne.n	800ac5a <__gethex+0x28e>
 800ac2e:	42ae      	cmp	r6, r5
 800ac30:	d113      	bne.n	800ac5a <__gethex+0x28e>
 800ac32:	2e01      	cmp	r6, #1
 800ac34:	d10b      	bne.n	800ac4e <__gethex+0x282>
 800ac36:	9a02      	ldr	r2, [sp, #8]
 800ac38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	2301      	movs	r3, #1
 800ac40:	6123      	str	r3, [r4, #16]
 800ac42:	f8ca 3000 	str.w	r3, [sl]
 800ac46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac48:	2562      	movs	r5, #98	@ 0x62
 800ac4a:	601c      	str	r4, [r3, #0]
 800ac4c:	e73a      	b.n	800aac4 <__gethex+0xf8>
 800ac4e:	1e71      	subs	r1, r6, #1
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fede 	bl	800ba12 <__any_on>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d1ed      	bne.n	800ac36 <__gethex+0x26a>
 800ac5a:	9801      	ldr	r0, [sp, #4]
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	f000 fa87 	bl	800b170 <_Bfree>
 800ac62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac64:	2300      	movs	r3, #0
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	2550      	movs	r5, #80	@ 0x50
 800ac6a:	e72b      	b.n	800aac4 <__gethex+0xf8>
 800ac6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1f3      	bne.n	800ac5a <__gethex+0x28e>
 800ac72:	e7e0      	b.n	800ac36 <__gethex+0x26a>
 800ac74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1dd      	bne.n	800ac36 <__gethex+0x26a>
 800ac7a:	e7ee      	b.n	800ac5a <__gethex+0x28e>
 800ac7c:	0800d984 	.word	0x0800d984
 800ac80:	0800d9f0 	.word	0x0800d9f0
 800ac84:	0800da01 	.word	0x0800da01
 800ac88:	1e6f      	subs	r7, r5, #1
 800ac8a:	f1b9 0f00 	cmp.w	r9, #0
 800ac8e:	d130      	bne.n	800acf2 <__gethex+0x326>
 800ac90:	b127      	cbz	r7, 800ac9c <__gethex+0x2d0>
 800ac92:	4639      	mov	r1, r7
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 febc 	bl	800ba12 <__any_on>
 800ac9a:	4681      	mov	r9, r0
 800ac9c:	117a      	asrs	r2, r7, #5
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aca4:	f007 071f 	and.w	r7, r7, #31
 800aca8:	40bb      	lsls	r3, r7
 800acaa:	4213      	tst	r3, r2
 800acac:	4629      	mov	r1, r5
 800acae:	4620      	mov	r0, r4
 800acb0:	bf18      	it	ne
 800acb2:	f049 0902 	orrne.w	r9, r9, #2
 800acb6:	f7ff fe21 	bl	800a8fc <rshift>
 800acba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800acbe:	1b76      	subs	r6, r6, r5
 800acc0:	2502      	movs	r5, #2
 800acc2:	f1b9 0f00 	cmp.w	r9, #0
 800acc6:	d047      	beq.n	800ad58 <__gethex+0x38c>
 800acc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d015      	beq.n	800acfc <__gethex+0x330>
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d017      	beq.n	800ad04 <__gethex+0x338>
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d109      	bne.n	800acec <__gethex+0x320>
 800acd8:	f019 0f02 	tst.w	r9, #2
 800acdc:	d006      	beq.n	800acec <__gethex+0x320>
 800acde:	f8da 3000 	ldr.w	r3, [sl]
 800ace2:	ea49 0903 	orr.w	r9, r9, r3
 800ace6:	f019 0f01 	tst.w	r9, #1
 800acea:	d10e      	bne.n	800ad0a <__gethex+0x33e>
 800acec:	f045 0510 	orr.w	r5, r5, #16
 800acf0:	e032      	b.n	800ad58 <__gethex+0x38c>
 800acf2:	f04f 0901 	mov.w	r9, #1
 800acf6:	e7d1      	b.n	800ac9c <__gethex+0x2d0>
 800acf8:	2501      	movs	r5, #1
 800acfa:	e7e2      	b.n	800acc2 <__gethex+0x2f6>
 800acfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acfe:	f1c3 0301 	rsb	r3, r3, #1
 800ad02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0f0      	beq.n	800acec <__gethex+0x320>
 800ad0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad0e:	f104 0314 	add.w	r3, r4, #20
 800ad12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad1a:	f04f 0c00 	mov.w	ip, #0
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad24:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad28:	d01b      	beq.n	800ad62 <__gethex+0x396>
 800ad2a:	3201      	adds	r2, #1
 800ad2c:	6002      	str	r2, [r0, #0]
 800ad2e:	2d02      	cmp	r5, #2
 800ad30:	f104 0314 	add.w	r3, r4, #20
 800ad34:	d13c      	bne.n	800adb0 <__gethex+0x3e4>
 800ad36:	f8d8 2000 	ldr.w	r2, [r8]
 800ad3a:	3a01      	subs	r2, #1
 800ad3c:	42b2      	cmp	r2, r6
 800ad3e:	d109      	bne.n	800ad54 <__gethex+0x388>
 800ad40:	1171      	asrs	r1, r6, #5
 800ad42:	2201      	movs	r2, #1
 800ad44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad48:	f006 061f 	and.w	r6, r6, #31
 800ad4c:	fa02 f606 	lsl.w	r6, r2, r6
 800ad50:	421e      	tst	r6, r3
 800ad52:	d13a      	bne.n	800adca <__gethex+0x3fe>
 800ad54:	f045 0520 	orr.w	r5, r5, #32
 800ad58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad5a:	601c      	str	r4, [r3, #0]
 800ad5c:	9b02      	ldr	r3, [sp, #8]
 800ad5e:	601f      	str	r7, [r3, #0]
 800ad60:	e6b0      	b.n	800aac4 <__gethex+0xf8>
 800ad62:	4299      	cmp	r1, r3
 800ad64:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad68:	d8d9      	bhi.n	800ad1e <__gethex+0x352>
 800ad6a:	68a3      	ldr	r3, [r4, #8]
 800ad6c:	459b      	cmp	fp, r3
 800ad6e:	db17      	blt.n	800ada0 <__gethex+0x3d4>
 800ad70:	6861      	ldr	r1, [r4, #4]
 800ad72:	9801      	ldr	r0, [sp, #4]
 800ad74:	3101      	adds	r1, #1
 800ad76:	f000 f9bb 	bl	800b0f0 <_Balloc>
 800ad7a:	4681      	mov	r9, r0
 800ad7c:	b918      	cbnz	r0, 800ad86 <__gethex+0x3ba>
 800ad7e:	4b1a      	ldr	r3, [pc, #104]	@ (800ade8 <__gethex+0x41c>)
 800ad80:	4602      	mov	r2, r0
 800ad82:	2184      	movs	r1, #132	@ 0x84
 800ad84:	e6c5      	b.n	800ab12 <__gethex+0x146>
 800ad86:	6922      	ldr	r2, [r4, #16]
 800ad88:	3202      	adds	r2, #2
 800ad8a:	f104 010c 	add.w	r1, r4, #12
 800ad8e:	0092      	lsls	r2, r2, #2
 800ad90:	300c      	adds	r0, #12
 800ad92:	f7ff fd50 	bl	800a836 <memcpy>
 800ad96:	4621      	mov	r1, r4
 800ad98:	9801      	ldr	r0, [sp, #4]
 800ad9a:	f000 f9e9 	bl	800b170 <_Bfree>
 800ad9e:	464c      	mov	r4, r9
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ada8:	6122      	str	r2, [r4, #16]
 800adaa:	2201      	movs	r2, #1
 800adac:	615a      	str	r2, [r3, #20]
 800adae:	e7be      	b.n	800ad2e <__gethex+0x362>
 800adb0:	6922      	ldr	r2, [r4, #16]
 800adb2:	455a      	cmp	r2, fp
 800adb4:	dd0b      	ble.n	800adce <__gethex+0x402>
 800adb6:	2101      	movs	r1, #1
 800adb8:	4620      	mov	r0, r4
 800adba:	f7ff fd9f 	bl	800a8fc <rshift>
 800adbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adc2:	3701      	adds	r7, #1
 800adc4:	42bb      	cmp	r3, r7
 800adc6:	f6ff aee0 	blt.w	800ab8a <__gethex+0x1be>
 800adca:	2501      	movs	r5, #1
 800adcc:	e7c2      	b.n	800ad54 <__gethex+0x388>
 800adce:	f016 061f 	ands.w	r6, r6, #31
 800add2:	d0fa      	beq.n	800adca <__gethex+0x3fe>
 800add4:	4453      	add	r3, sl
 800add6:	f1c6 0620 	rsb	r6, r6, #32
 800adda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800adde:	f000 fa79 	bl	800b2d4 <__hi0bits>
 800ade2:	42b0      	cmp	r0, r6
 800ade4:	dbe7      	blt.n	800adb6 <__gethex+0x3ea>
 800ade6:	e7f0      	b.n	800adca <__gethex+0x3fe>
 800ade8:	0800d9f0 	.word	0x0800d9f0

0800adec <L_shift>:
 800adec:	f1c2 0208 	rsb	r2, r2, #8
 800adf0:	0092      	lsls	r2, r2, #2
 800adf2:	b570      	push	{r4, r5, r6, lr}
 800adf4:	f1c2 0620 	rsb	r6, r2, #32
 800adf8:	6843      	ldr	r3, [r0, #4]
 800adfa:	6804      	ldr	r4, [r0, #0]
 800adfc:	fa03 f506 	lsl.w	r5, r3, r6
 800ae00:	432c      	orrs	r4, r5
 800ae02:	40d3      	lsrs	r3, r2
 800ae04:	6004      	str	r4, [r0, #0]
 800ae06:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae0a:	4288      	cmp	r0, r1
 800ae0c:	d3f4      	bcc.n	800adf8 <L_shift+0xc>
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}

0800ae10 <__match>:
 800ae10:	b530      	push	{r4, r5, lr}
 800ae12:	6803      	ldr	r3, [r0, #0]
 800ae14:	3301      	adds	r3, #1
 800ae16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1a:	b914      	cbnz	r4, 800ae22 <__match+0x12>
 800ae1c:	6003      	str	r3, [r0, #0]
 800ae1e:	2001      	movs	r0, #1
 800ae20:	bd30      	pop	{r4, r5, pc}
 800ae22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae2a:	2d19      	cmp	r5, #25
 800ae2c:	bf98      	it	ls
 800ae2e:	3220      	addls	r2, #32
 800ae30:	42a2      	cmp	r2, r4
 800ae32:	d0f0      	beq.n	800ae16 <__match+0x6>
 800ae34:	2000      	movs	r0, #0
 800ae36:	e7f3      	b.n	800ae20 <__match+0x10>

0800ae38 <__hexnan>:
 800ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	680b      	ldr	r3, [r1, #0]
 800ae3e:	6801      	ldr	r1, [r0, #0]
 800ae40:	115e      	asrs	r6, r3, #5
 800ae42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae46:	f013 031f 	ands.w	r3, r3, #31
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	bf18      	it	ne
 800ae4e:	3604      	addne	r6, #4
 800ae50:	2500      	movs	r5, #0
 800ae52:	1f37      	subs	r7, r6, #4
 800ae54:	4682      	mov	sl, r0
 800ae56:	4690      	mov	r8, r2
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae5e:	46b9      	mov	r9, r7
 800ae60:	463c      	mov	r4, r7
 800ae62:	9502      	str	r5, [sp, #8]
 800ae64:	46ab      	mov	fp, r5
 800ae66:	784a      	ldrb	r2, [r1, #1]
 800ae68:	1c4b      	adds	r3, r1, #1
 800ae6a:	9303      	str	r3, [sp, #12]
 800ae6c:	b342      	cbz	r2, 800aec0 <__hexnan+0x88>
 800ae6e:	4610      	mov	r0, r2
 800ae70:	9105      	str	r1, [sp, #20]
 800ae72:	9204      	str	r2, [sp, #16]
 800ae74:	f7ff fd94 	bl	800a9a0 <__hexdig_fun>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d151      	bne.n	800af20 <__hexnan+0xe8>
 800ae7c:	9a04      	ldr	r2, [sp, #16]
 800ae7e:	9905      	ldr	r1, [sp, #20]
 800ae80:	2a20      	cmp	r2, #32
 800ae82:	d818      	bhi.n	800aeb6 <__hexnan+0x7e>
 800ae84:	9b02      	ldr	r3, [sp, #8]
 800ae86:	459b      	cmp	fp, r3
 800ae88:	dd13      	ble.n	800aeb2 <__hexnan+0x7a>
 800ae8a:	454c      	cmp	r4, r9
 800ae8c:	d206      	bcs.n	800ae9c <__hexnan+0x64>
 800ae8e:	2d07      	cmp	r5, #7
 800ae90:	dc04      	bgt.n	800ae9c <__hexnan+0x64>
 800ae92:	462a      	mov	r2, r5
 800ae94:	4649      	mov	r1, r9
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7ff ffa8 	bl	800adec <L_shift>
 800ae9c:	4544      	cmp	r4, r8
 800ae9e:	d952      	bls.n	800af46 <__hexnan+0x10e>
 800aea0:	2300      	movs	r3, #0
 800aea2:	f1a4 0904 	sub.w	r9, r4, #4
 800aea6:	f844 3c04 	str.w	r3, [r4, #-4]
 800aeaa:	f8cd b008 	str.w	fp, [sp, #8]
 800aeae:	464c      	mov	r4, r9
 800aeb0:	461d      	mov	r5, r3
 800aeb2:	9903      	ldr	r1, [sp, #12]
 800aeb4:	e7d7      	b.n	800ae66 <__hexnan+0x2e>
 800aeb6:	2a29      	cmp	r2, #41	@ 0x29
 800aeb8:	d157      	bne.n	800af6a <__hexnan+0x132>
 800aeba:	3102      	adds	r1, #2
 800aebc:	f8ca 1000 	str.w	r1, [sl]
 800aec0:	f1bb 0f00 	cmp.w	fp, #0
 800aec4:	d051      	beq.n	800af6a <__hexnan+0x132>
 800aec6:	454c      	cmp	r4, r9
 800aec8:	d206      	bcs.n	800aed8 <__hexnan+0xa0>
 800aeca:	2d07      	cmp	r5, #7
 800aecc:	dc04      	bgt.n	800aed8 <__hexnan+0xa0>
 800aece:	462a      	mov	r2, r5
 800aed0:	4649      	mov	r1, r9
 800aed2:	4620      	mov	r0, r4
 800aed4:	f7ff ff8a 	bl	800adec <L_shift>
 800aed8:	4544      	cmp	r4, r8
 800aeda:	d936      	bls.n	800af4a <__hexnan+0x112>
 800aedc:	f1a8 0204 	sub.w	r2, r8, #4
 800aee0:	4623      	mov	r3, r4
 800aee2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aee6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aeea:	429f      	cmp	r7, r3
 800aeec:	d2f9      	bcs.n	800aee2 <__hexnan+0xaa>
 800aeee:	1b3b      	subs	r3, r7, r4
 800aef0:	f023 0303 	bic.w	r3, r3, #3
 800aef4:	3304      	adds	r3, #4
 800aef6:	3401      	adds	r4, #1
 800aef8:	3e03      	subs	r6, #3
 800aefa:	42b4      	cmp	r4, r6
 800aefc:	bf88      	it	hi
 800aefe:	2304      	movhi	r3, #4
 800af00:	4443      	add	r3, r8
 800af02:	2200      	movs	r2, #0
 800af04:	f843 2b04 	str.w	r2, [r3], #4
 800af08:	429f      	cmp	r7, r3
 800af0a:	d2fb      	bcs.n	800af04 <__hexnan+0xcc>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	b91b      	cbnz	r3, 800af18 <__hexnan+0xe0>
 800af10:	4547      	cmp	r7, r8
 800af12:	d128      	bne.n	800af66 <__hexnan+0x12e>
 800af14:	2301      	movs	r3, #1
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	2005      	movs	r0, #5
 800af1a:	b007      	add	sp, #28
 800af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af20:	3501      	adds	r5, #1
 800af22:	2d08      	cmp	r5, #8
 800af24:	f10b 0b01 	add.w	fp, fp, #1
 800af28:	dd06      	ble.n	800af38 <__hexnan+0x100>
 800af2a:	4544      	cmp	r4, r8
 800af2c:	d9c1      	bls.n	800aeb2 <__hexnan+0x7a>
 800af2e:	2300      	movs	r3, #0
 800af30:	f844 3c04 	str.w	r3, [r4, #-4]
 800af34:	2501      	movs	r5, #1
 800af36:	3c04      	subs	r4, #4
 800af38:	6822      	ldr	r2, [r4, #0]
 800af3a:	f000 000f 	and.w	r0, r0, #15
 800af3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af42:	6020      	str	r0, [r4, #0]
 800af44:	e7b5      	b.n	800aeb2 <__hexnan+0x7a>
 800af46:	2508      	movs	r5, #8
 800af48:	e7b3      	b.n	800aeb2 <__hexnan+0x7a>
 800af4a:	9b01      	ldr	r3, [sp, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d0dd      	beq.n	800af0c <__hexnan+0xd4>
 800af50:	f1c3 0320 	rsb	r3, r3, #32
 800af54:	f04f 32ff 	mov.w	r2, #4294967295
 800af58:	40da      	lsrs	r2, r3
 800af5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af5e:	4013      	ands	r3, r2
 800af60:	f846 3c04 	str.w	r3, [r6, #-4]
 800af64:	e7d2      	b.n	800af0c <__hexnan+0xd4>
 800af66:	3f04      	subs	r7, #4
 800af68:	e7d0      	b.n	800af0c <__hexnan+0xd4>
 800af6a:	2004      	movs	r0, #4
 800af6c:	e7d5      	b.n	800af1a <__hexnan+0xe2>
	...

0800af70 <sbrk_aligned>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	4e0f      	ldr	r6, [pc, #60]	@ (800afb0 <sbrk_aligned+0x40>)
 800af74:	460c      	mov	r4, r1
 800af76:	6831      	ldr	r1, [r6, #0]
 800af78:	4605      	mov	r5, r0
 800af7a:	b911      	cbnz	r1, 800af82 <sbrk_aligned+0x12>
 800af7c:	f001 f922 	bl	800c1c4 <_sbrk_r>
 800af80:	6030      	str	r0, [r6, #0]
 800af82:	4621      	mov	r1, r4
 800af84:	4628      	mov	r0, r5
 800af86:	f001 f91d 	bl	800c1c4 <_sbrk_r>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	d103      	bne.n	800af96 <sbrk_aligned+0x26>
 800af8e:	f04f 34ff 	mov.w	r4, #4294967295
 800af92:	4620      	mov	r0, r4
 800af94:	bd70      	pop	{r4, r5, r6, pc}
 800af96:	1cc4      	adds	r4, r0, #3
 800af98:	f024 0403 	bic.w	r4, r4, #3
 800af9c:	42a0      	cmp	r0, r4
 800af9e:	d0f8      	beq.n	800af92 <sbrk_aligned+0x22>
 800afa0:	1a21      	subs	r1, r4, r0
 800afa2:	4628      	mov	r0, r5
 800afa4:	f001 f90e 	bl	800c1c4 <_sbrk_r>
 800afa8:	3001      	adds	r0, #1
 800afaa:	d1f2      	bne.n	800af92 <sbrk_aligned+0x22>
 800afac:	e7ef      	b.n	800af8e <sbrk_aligned+0x1e>
 800afae:	bf00      	nop
 800afb0:	2000138c 	.word	0x2000138c

0800afb4 <_malloc_r>:
 800afb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb8:	1ccd      	adds	r5, r1, #3
 800afba:	f025 0503 	bic.w	r5, r5, #3
 800afbe:	3508      	adds	r5, #8
 800afc0:	2d0c      	cmp	r5, #12
 800afc2:	bf38      	it	cc
 800afc4:	250c      	movcc	r5, #12
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	4606      	mov	r6, r0
 800afca:	db01      	blt.n	800afd0 <_malloc_r+0x1c>
 800afcc:	42a9      	cmp	r1, r5
 800afce:	d904      	bls.n	800afda <_malloc_r+0x26>
 800afd0:	230c      	movs	r3, #12
 800afd2:	6033      	str	r3, [r6, #0]
 800afd4:	2000      	movs	r0, #0
 800afd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0b0 <_malloc_r+0xfc>
 800afde:	f000 f87b 	bl	800b0d8 <__malloc_lock>
 800afe2:	f8d8 3000 	ldr.w	r3, [r8]
 800afe6:	461c      	mov	r4, r3
 800afe8:	bb44      	cbnz	r4, 800b03c <_malloc_r+0x88>
 800afea:	4629      	mov	r1, r5
 800afec:	4630      	mov	r0, r6
 800afee:	f7ff ffbf 	bl	800af70 <sbrk_aligned>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	4604      	mov	r4, r0
 800aff6:	d158      	bne.n	800b0aa <_malloc_r+0xf6>
 800aff8:	f8d8 4000 	ldr.w	r4, [r8]
 800affc:	4627      	mov	r7, r4
 800affe:	2f00      	cmp	r7, #0
 800b000:	d143      	bne.n	800b08a <_malloc_r+0xd6>
 800b002:	2c00      	cmp	r4, #0
 800b004:	d04b      	beq.n	800b09e <_malloc_r+0xea>
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	4639      	mov	r1, r7
 800b00a:	4630      	mov	r0, r6
 800b00c:	eb04 0903 	add.w	r9, r4, r3
 800b010:	f001 f8d8 	bl	800c1c4 <_sbrk_r>
 800b014:	4581      	cmp	r9, r0
 800b016:	d142      	bne.n	800b09e <_malloc_r+0xea>
 800b018:	6821      	ldr	r1, [r4, #0]
 800b01a:	1a6d      	subs	r5, r5, r1
 800b01c:	4629      	mov	r1, r5
 800b01e:	4630      	mov	r0, r6
 800b020:	f7ff ffa6 	bl	800af70 <sbrk_aligned>
 800b024:	3001      	adds	r0, #1
 800b026:	d03a      	beq.n	800b09e <_malloc_r+0xea>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	442b      	add	r3, r5
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	f8d8 3000 	ldr.w	r3, [r8]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	bb62      	cbnz	r2, 800b090 <_malloc_r+0xdc>
 800b036:	f8c8 7000 	str.w	r7, [r8]
 800b03a:	e00f      	b.n	800b05c <_malloc_r+0xa8>
 800b03c:	6822      	ldr	r2, [r4, #0]
 800b03e:	1b52      	subs	r2, r2, r5
 800b040:	d420      	bmi.n	800b084 <_malloc_r+0xd0>
 800b042:	2a0b      	cmp	r2, #11
 800b044:	d917      	bls.n	800b076 <_malloc_r+0xc2>
 800b046:	1961      	adds	r1, r4, r5
 800b048:	42a3      	cmp	r3, r4
 800b04a:	6025      	str	r5, [r4, #0]
 800b04c:	bf18      	it	ne
 800b04e:	6059      	strne	r1, [r3, #4]
 800b050:	6863      	ldr	r3, [r4, #4]
 800b052:	bf08      	it	eq
 800b054:	f8c8 1000 	streq.w	r1, [r8]
 800b058:	5162      	str	r2, [r4, r5]
 800b05a:	604b      	str	r3, [r1, #4]
 800b05c:	4630      	mov	r0, r6
 800b05e:	f000 f841 	bl	800b0e4 <__malloc_unlock>
 800b062:	f104 000b 	add.w	r0, r4, #11
 800b066:	1d23      	adds	r3, r4, #4
 800b068:	f020 0007 	bic.w	r0, r0, #7
 800b06c:	1ac2      	subs	r2, r0, r3
 800b06e:	bf1c      	itt	ne
 800b070:	1a1b      	subne	r3, r3, r0
 800b072:	50a3      	strne	r3, [r4, r2]
 800b074:	e7af      	b.n	800afd6 <_malloc_r+0x22>
 800b076:	6862      	ldr	r2, [r4, #4]
 800b078:	42a3      	cmp	r3, r4
 800b07a:	bf0c      	ite	eq
 800b07c:	f8c8 2000 	streq.w	r2, [r8]
 800b080:	605a      	strne	r2, [r3, #4]
 800b082:	e7eb      	b.n	800b05c <_malloc_r+0xa8>
 800b084:	4623      	mov	r3, r4
 800b086:	6864      	ldr	r4, [r4, #4]
 800b088:	e7ae      	b.n	800afe8 <_malloc_r+0x34>
 800b08a:	463c      	mov	r4, r7
 800b08c:	687f      	ldr	r7, [r7, #4]
 800b08e:	e7b6      	b.n	800affe <_malloc_r+0x4a>
 800b090:	461a      	mov	r2, r3
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	42a3      	cmp	r3, r4
 800b096:	d1fb      	bne.n	800b090 <_malloc_r+0xdc>
 800b098:	2300      	movs	r3, #0
 800b09a:	6053      	str	r3, [r2, #4]
 800b09c:	e7de      	b.n	800b05c <_malloc_r+0xa8>
 800b09e:	230c      	movs	r3, #12
 800b0a0:	6033      	str	r3, [r6, #0]
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f000 f81e 	bl	800b0e4 <__malloc_unlock>
 800b0a8:	e794      	b.n	800afd4 <_malloc_r+0x20>
 800b0aa:	6005      	str	r5, [r0, #0]
 800b0ac:	e7d6      	b.n	800b05c <_malloc_r+0xa8>
 800b0ae:	bf00      	nop
 800b0b0:	20001390 	.word	0x20001390

0800b0b4 <__ascii_mbtowc>:
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	b901      	cbnz	r1, 800b0ba <__ascii_mbtowc+0x6>
 800b0b8:	a901      	add	r1, sp, #4
 800b0ba:	b142      	cbz	r2, 800b0ce <__ascii_mbtowc+0x1a>
 800b0bc:	b14b      	cbz	r3, 800b0d2 <__ascii_mbtowc+0x1e>
 800b0be:	7813      	ldrb	r3, [r2, #0]
 800b0c0:	600b      	str	r3, [r1, #0]
 800b0c2:	7812      	ldrb	r2, [r2, #0]
 800b0c4:	1e10      	subs	r0, r2, #0
 800b0c6:	bf18      	it	ne
 800b0c8:	2001      	movne	r0, #1
 800b0ca:	b002      	add	sp, #8
 800b0cc:	4770      	bx	lr
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	e7fb      	b.n	800b0ca <__ascii_mbtowc+0x16>
 800b0d2:	f06f 0001 	mvn.w	r0, #1
 800b0d6:	e7f8      	b.n	800b0ca <__ascii_mbtowc+0x16>

0800b0d8 <__malloc_lock>:
 800b0d8:	4801      	ldr	r0, [pc, #4]	@ (800b0e0 <__malloc_lock+0x8>)
 800b0da:	f7ff bbaa 	b.w	800a832 <__retarget_lock_acquire_recursive>
 800b0de:	bf00      	nop
 800b0e0:	20001388 	.word	0x20001388

0800b0e4 <__malloc_unlock>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	@ (800b0ec <__malloc_unlock+0x8>)
 800b0e6:	f7ff bba5 	b.w	800a834 <__retarget_lock_release_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	20001388 	.word	0x20001388

0800b0f0 <_Balloc>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	69c6      	ldr	r6, [r0, #28]
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	460d      	mov	r5, r1
 800b0f8:	b976      	cbnz	r6, 800b118 <_Balloc+0x28>
 800b0fa:	2010      	movs	r0, #16
 800b0fc:	f001 f8a4 	bl	800c248 <malloc>
 800b100:	4602      	mov	r2, r0
 800b102:	61e0      	str	r0, [r4, #28]
 800b104:	b920      	cbnz	r0, 800b110 <_Balloc+0x20>
 800b106:	4b18      	ldr	r3, [pc, #96]	@ (800b168 <_Balloc+0x78>)
 800b108:	4818      	ldr	r0, [pc, #96]	@ (800b16c <_Balloc+0x7c>)
 800b10a:	216b      	movs	r1, #107	@ 0x6b
 800b10c:	f001 f86a 	bl	800c1e4 <__assert_func>
 800b110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b114:	6006      	str	r6, [r0, #0]
 800b116:	60c6      	str	r6, [r0, #12]
 800b118:	69e6      	ldr	r6, [r4, #28]
 800b11a:	68f3      	ldr	r3, [r6, #12]
 800b11c:	b183      	cbz	r3, 800b140 <_Balloc+0x50>
 800b11e:	69e3      	ldr	r3, [r4, #28]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b126:	b9b8      	cbnz	r0, 800b158 <_Balloc+0x68>
 800b128:	2101      	movs	r1, #1
 800b12a:	fa01 f605 	lsl.w	r6, r1, r5
 800b12e:	1d72      	adds	r2, r6, #5
 800b130:	0092      	lsls	r2, r2, #2
 800b132:	4620      	mov	r0, r4
 800b134:	f001 f874 	bl	800c220 <_calloc_r>
 800b138:	b160      	cbz	r0, 800b154 <_Balloc+0x64>
 800b13a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b13e:	e00e      	b.n	800b15e <_Balloc+0x6e>
 800b140:	2221      	movs	r2, #33	@ 0x21
 800b142:	2104      	movs	r1, #4
 800b144:	4620      	mov	r0, r4
 800b146:	f001 f86b 	bl	800c220 <_calloc_r>
 800b14a:	69e3      	ldr	r3, [r4, #28]
 800b14c:	60f0      	str	r0, [r6, #12]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e4      	bne.n	800b11e <_Balloc+0x2e>
 800b154:	2000      	movs	r0, #0
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	6802      	ldr	r2, [r0, #0]
 800b15a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b15e:	2300      	movs	r3, #0
 800b160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b164:	e7f7      	b.n	800b156 <_Balloc+0x66>
 800b166:	bf00      	nop
 800b168:	0800da61 	.word	0x0800da61
 800b16c:	0800da78 	.word	0x0800da78

0800b170 <_Bfree>:
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	69c6      	ldr	r6, [r0, #28]
 800b174:	4605      	mov	r5, r0
 800b176:	460c      	mov	r4, r1
 800b178:	b976      	cbnz	r6, 800b198 <_Bfree+0x28>
 800b17a:	2010      	movs	r0, #16
 800b17c:	f001 f864 	bl	800c248 <malloc>
 800b180:	4602      	mov	r2, r0
 800b182:	61e8      	str	r0, [r5, #28]
 800b184:	b920      	cbnz	r0, 800b190 <_Bfree+0x20>
 800b186:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <_Bfree+0x3c>)
 800b188:	4809      	ldr	r0, [pc, #36]	@ (800b1b0 <_Bfree+0x40>)
 800b18a:	218f      	movs	r1, #143	@ 0x8f
 800b18c:	f001 f82a 	bl	800c1e4 <__assert_func>
 800b190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b194:	6006      	str	r6, [r0, #0]
 800b196:	60c6      	str	r6, [r0, #12]
 800b198:	b13c      	cbz	r4, 800b1aa <_Bfree+0x3a>
 800b19a:	69eb      	ldr	r3, [r5, #28]
 800b19c:	6862      	ldr	r2, [r4, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1a4:	6021      	str	r1, [r4, #0]
 800b1a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1aa:	bd70      	pop	{r4, r5, r6, pc}
 800b1ac:	0800da61 	.word	0x0800da61
 800b1b0:	0800da78 	.word	0x0800da78

0800b1b4 <__multadd>:
 800b1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b8:	690d      	ldr	r5, [r1, #16]
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	460c      	mov	r4, r1
 800b1be:	461e      	mov	r6, r3
 800b1c0:	f101 0c14 	add.w	ip, r1, #20
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b1ca:	b299      	uxth	r1, r3
 800b1cc:	fb02 6101 	mla	r1, r2, r1, r6
 800b1d0:	0c1e      	lsrs	r6, r3, #16
 800b1d2:	0c0b      	lsrs	r3, r1, #16
 800b1d4:	fb02 3306 	mla	r3, r2, r6, r3
 800b1d8:	b289      	uxth	r1, r1
 800b1da:	3001      	adds	r0, #1
 800b1dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1e0:	4285      	cmp	r5, r0
 800b1e2:	f84c 1b04 	str.w	r1, [ip], #4
 800b1e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1ea:	dcec      	bgt.n	800b1c6 <__multadd+0x12>
 800b1ec:	b30e      	cbz	r6, 800b232 <__multadd+0x7e>
 800b1ee:	68a3      	ldr	r3, [r4, #8]
 800b1f0:	42ab      	cmp	r3, r5
 800b1f2:	dc19      	bgt.n	800b228 <__multadd+0x74>
 800b1f4:	6861      	ldr	r1, [r4, #4]
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	3101      	adds	r1, #1
 800b1fa:	f7ff ff79 	bl	800b0f0 <_Balloc>
 800b1fe:	4680      	mov	r8, r0
 800b200:	b928      	cbnz	r0, 800b20e <__multadd+0x5a>
 800b202:	4602      	mov	r2, r0
 800b204:	4b0c      	ldr	r3, [pc, #48]	@ (800b238 <__multadd+0x84>)
 800b206:	480d      	ldr	r0, [pc, #52]	@ (800b23c <__multadd+0x88>)
 800b208:	21ba      	movs	r1, #186	@ 0xba
 800b20a:	f000 ffeb 	bl	800c1e4 <__assert_func>
 800b20e:	6922      	ldr	r2, [r4, #16]
 800b210:	3202      	adds	r2, #2
 800b212:	f104 010c 	add.w	r1, r4, #12
 800b216:	0092      	lsls	r2, r2, #2
 800b218:	300c      	adds	r0, #12
 800b21a:	f7ff fb0c 	bl	800a836 <memcpy>
 800b21e:	4621      	mov	r1, r4
 800b220:	4638      	mov	r0, r7
 800b222:	f7ff ffa5 	bl	800b170 <_Bfree>
 800b226:	4644      	mov	r4, r8
 800b228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b22c:	3501      	adds	r5, #1
 800b22e:	615e      	str	r6, [r3, #20]
 800b230:	6125      	str	r5, [r4, #16]
 800b232:	4620      	mov	r0, r4
 800b234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b238:	0800d9f0 	.word	0x0800d9f0
 800b23c:	0800da78 	.word	0x0800da78

0800b240 <__s2b>:
 800b240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b244:	460c      	mov	r4, r1
 800b246:	4615      	mov	r5, r2
 800b248:	461f      	mov	r7, r3
 800b24a:	2209      	movs	r2, #9
 800b24c:	3308      	adds	r3, #8
 800b24e:	4606      	mov	r6, r0
 800b250:	fb93 f3f2 	sdiv	r3, r3, r2
 800b254:	2100      	movs	r1, #0
 800b256:	2201      	movs	r2, #1
 800b258:	429a      	cmp	r2, r3
 800b25a:	db09      	blt.n	800b270 <__s2b+0x30>
 800b25c:	4630      	mov	r0, r6
 800b25e:	f7ff ff47 	bl	800b0f0 <_Balloc>
 800b262:	b940      	cbnz	r0, 800b276 <__s2b+0x36>
 800b264:	4602      	mov	r2, r0
 800b266:	4b19      	ldr	r3, [pc, #100]	@ (800b2cc <__s2b+0x8c>)
 800b268:	4819      	ldr	r0, [pc, #100]	@ (800b2d0 <__s2b+0x90>)
 800b26a:	21d3      	movs	r1, #211	@ 0xd3
 800b26c:	f000 ffba 	bl	800c1e4 <__assert_func>
 800b270:	0052      	lsls	r2, r2, #1
 800b272:	3101      	adds	r1, #1
 800b274:	e7f0      	b.n	800b258 <__s2b+0x18>
 800b276:	9b08      	ldr	r3, [sp, #32]
 800b278:	6143      	str	r3, [r0, #20]
 800b27a:	2d09      	cmp	r5, #9
 800b27c:	f04f 0301 	mov.w	r3, #1
 800b280:	6103      	str	r3, [r0, #16]
 800b282:	dd16      	ble.n	800b2b2 <__s2b+0x72>
 800b284:	f104 0909 	add.w	r9, r4, #9
 800b288:	46c8      	mov	r8, r9
 800b28a:	442c      	add	r4, r5
 800b28c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b290:	4601      	mov	r1, r0
 800b292:	3b30      	subs	r3, #48	@ 0x30
 800b294:	220a      	movs	r2, #10
 800b296:	4630      	mov	r0, r6
 800b298:	f7ff ff8c 	bl	800b1b4 <__multadd>
 800b29c:	45a0      	cmp	r8, r4
 800b29e:	d1f5      	bne.n	800b28c <__s2b+0x4c>
 800b2a0:	f1a5 0408 	sub.w	r4, r5, #8
 800b2a4:	444c      	add	r4, r9
 800b2a6:	1b2d      	subs	r5, r5, r4
 800b2a8:	1963      	adds	r3, r4, r5
 800b2aa:	42bb      	cmp	r3, r7
 800b2ac:	db04      	blt.n	800b2b8 <__s2b+0x78>
 800b2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b2:	340a      	adds	r4, #10
 800b2b4:	2509      	movs	r5, #9
 800b2b6:	e7f6      	b.n	800b2a6 <__s2b+0x66>
 800b2b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2bc:	4601      	mov	r1, r0
 800b2be:	3b30      	subs	r3, #48	@ 0x30
 800b2c0:	220a      	movs	r2, #10
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7ff ff76 	bl	800b1b4 <__multadd>
 800b2c8:	e7ee      	b.n	800b2a8 <__s2b+0x68>
 800b2ca:	bf00      	nop
 800b2cc:	0800d9f0 	.word	0x0800d9f0
 800b2d0:	0800da78 	.word	0x0800da78

0800b2d4 <__hi0bits>:
 800b2d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b2d8:	4603      	mov	r3, r0
 800b2da:	bf36      	itet	cc
 800b2dc:	0403      	lslcc	r3, r0, #16
 800b2de:	2000      	movcs	r0, #0
 800b2e0:	2010      	movcc	r0, #16
 800b2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2e6:	bf3c      	itt	cc
 800b2e8:	021b      	lslcc	r3, r3, #8
 800b2ea:	3008      	addcc	r0, #8
 800b2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2f0:	bf3c      	itt	cc
 800b2f2:	011b      	lslcc	r3, r3, #4
 800b2f4:	3004      	addcc	r0, #4
 800b2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2fa:	bf3c      	itt	cc
 800b2fc:	009b      	lslcc	r3, r3, #2
 800b2fe:	3002      	addcc	r0, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	db05      	blt.n	800b310 <__hi0bits+0x3c>
 800b304:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b308:	f100 0001 	add.w	r0, r0, #1
 800b30c:	bf08      	it	eq
 800b30e:	2020      	moveq	r0, #32
 800b310:	4770      	bx	lr

0800b312 <__lo0bits>:
 800b312:	6803      	ldr	r3, [r0, #0]
 800b314:	4602      	mov	r2, r0
 800b316:	f013 0007 	ands.w	r0, r3, #7
 800b31a:	d00b      	beq.n	800b334 <__lo0bits+0x22>
 800b31c:	07d9      	lsls	r1, r3, #31
 800b31e:	d421      	bmi.n	800b364 <__lo0bits+0x52>
 800b320:	0798      	lsls	r0, r3, #30
 800b322:	bf49      	itett	mi
 800b324:	085b      	lsrmi	r3, r3, #1
 800b326:	089b      	lsrpl	r3, r3, #2
 800b328:	2001      	movmi	r0, #1
 800b32a:	6013      	strmi	r3, [r2, #0]
 800b32c:	bf5c      	itt	pl
 800b32e:	6013      	strpl	r3, [r2, #0]
 800b330:	2002      	movpl	r0, #2
 800b332:	4770      	bx	lr
 800b334:	b299      	uxth	r1, r3
 800b336:	b909      	cbnz	r1, 800b33c <__lo0bits+0x2a>
 800b338:	0c1b      	lsrs	r3, r3, #16
 800b33a:	2010      	movs	r0, #16
 800b33c:	b2d9      	uxtb	r1, r3
 800b33e:	b909      	cbnz	r1, 800b344 <__lo0bits+0x32>
 800b340:	3008      	adds	r0, #8
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	0719      	lsls	r1, r3, #28
 800b346:	bf04      	itt	eq
 800b348:	091b      	lsreq	r3, r3, #4
 800b34a:	3004      	addeq	r0, #4
 800b34c:	0799      	lsls	r1, r3, #30
 800b34e:	bf04      	itt	eq
 800b350:	089b      	lsreq	r3, r3, #2
 800b352:	3002      	addeq	r0, #2
 800b354:	07d9      	lsls	r1, r3, #31
 800b356:	d403      	bmi.n	800b360 <__lo0bits+0x4e>
 800b358:	085b      	lsrs	r3, r3, #1
 800b35a:	f100 0001 	add.w	r0, r0, #1
 800b35e:	d003      	beq.n	800b368 <__lo0bits+0x56>
 800b360:	6013      	str	r3, [r2, #0]
 800b362:	4770      	bx	lr
 800b364:	2000      	movs	r0, #0
 800b366:	4770      	bx	lr
 800b368:	2020      	movs	r0, #32
 800b36a:	4770      	bx	lr

0800b36c <__i2b>:
 800b36c:	b510      	push	{r4, lr}
 800b36e:	460c      	mov	r4, r1
 800b370:	2101      	movs	r1, #1
 800b372:	f7ff febd 	bl	800b0f0 <_Balloc>
 800b376:	4602      	mov	r2, r0
 800b378:	b928      	cbnz	r0, 800b386 <__i2b+0x1a>
 800b37a:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <__i2b+0x24>)
 800b37c:	4805      	ldr	r0, [pc, #20]	@ (800b394 <__i2b+0x28>)
 800b37e:	f240 1145 	movw	r1, #325	@ 0x145
 800b382:	f000 ff2f 	bl	800c1e4 <__assert_func>
 800b386:	2301      	movs	r3, #1
 800b388:	6144      	str	r4, [r0, #20]
 800b38a:	6103      	str	r3, [r0, #16]
 800b38c:	bd10      	pop	{r4, pc}
 800b38e:	bf00      	nop
 800b390:	0800d9f0 	.word	0x0800d9f0
 800b394:	0800da78 	.word	0x0800da78

0800b398 <__multiply>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4614      	mov	r4, r2
 800b39e:	690a      	ldr	r2, [r1, #16]
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	bfa8      	it	ge
 800b3a6:	4623      	movge	r3, r4
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	bfa4      	itt	ge
 800b3ac:	460c      	movge	r4, r1
 800b3ae:	461f      	movge	r7, r3
 800b3b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b3b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b3b8:	68a3      	ldr	r3, [r4, #8]
 800b3ba:	6861      	ldr	r1, [r4, #4]
 800b3bc:	eb0a 0609 	add.w	r6, sl, r9
 800b3c0:	42b3      	cmp	r3, r6
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	bfb8      	it	lt
 800b3c6:	3101      	addlt	r1, #1
 800b3c8:	f7ff fe92 	bl	800b0f0 <_Balloc>
 800b3cc:	b930      	cbnz	r0, 800b3dc <__multiply+0x44>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	4b44      	ldr	r3, [pc, #272]	@ (800b4e4 <__multiply+0x14c>)
 800b3d2:	4845      	ldr	r0, [pc, #276]	@ (800b4e8 <__multiply+0x150>)
 800b3d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b3d8:	f000 ff04 	bl	800c1e4 <__assert_func>
 800b3dc:	f100 0514 	add.w	r5, r0, #20
 800b3e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4543      	cmp	r3, r8
 800b3ea:	d321      	bcc.n	800b430 <__multiply+0x98>
 800b3ec:	f107 0114 	add.w	r1, r7, #20
 800b3f0:	f104 0214 	add.w	r2, r4, #20
 800b3f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b3f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b3fc:	9302      	str	r3, [sp, #8]
 800b3fe:	1b13      	subs	r3, r2, r4
 800b400:	3b15      	subs	r3, #21
 800b402:	f023 0303 	bic.w	r3, r3, #3
 800b406:	3304      	adds	r3, #4
 800b408:	f104 0715 	add.w	r7, r4, #21
 800b40c:	42ba      	cmp	r2, r7
 800b40e:	bf38      	it	cc
 800b410:	2304      	movcc	r3, #4
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	9b02      	ldr	r3, [sp, #8]
 800b416:	9103      	str	r1, [sp, #12]
 800b418:	428b      	cmp	r3, r1
 800b41a:	d80c      	bhi.n	800b436 <__multiply+0x9e>
 800b41c:	2e00      	cmp	r6, #0
 800b41e:	dd03      	ble.n	800b428 <__multiply+0x90>
 800b420:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b424:	2b00      	cmp	r3, #0
 800b426:	d05b      	beq.n	800b4e0 <__multiply+0x148>
 800b428:	6106      	str	r6, [r0, #16]
 800b42a:	b005      	add	sp, #20
 800b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b430:	f843 2b04 	str.w	r2, [r3], #4
 800b434:	e7d8      	b.n	800b3e8 <__multiply+0x50>
 800b436:	f8b1 a000 	ldrh.w	sl, [r1]
 800b43a:	f1ba 0f00 	cmp.w	sl, #0
 800b43e:	d024      	beq.n	800b48a <__multiply+0xf2>
 800b440:	f104 0e14 	add.w	lr, r4, #20
 800b444:	46a9      	mov	r9, r5
 800b446:	f04f 0c00 	mov.w	ip, #0
 800b44a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b44e:	f8d9 3000 	ldr.w	r3, [r9]
 800b452:	fa1f fb87 	uxth.w	fp, r7
 800b456:	b29b      	uxth	r3, r3
 800b458:	fb0a 330b 	mla	r3, sl, fp, r3
 800b45c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b460:	f8d9 7000 	ldr.w	r7, [r9]
 800b464:	4463      	add	r3, ip
 800b466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b46a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b46e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b472:	b29b      	uxth	r3, r3
 800b474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b478:	4572      	cmp	r2, lr
 800b47a:	f849 3b04 	str.w	r3, [r9], #4
 800b47e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b482:	d8e2      	bhi.n	800b44a <__multiply+0xb2>
 800b484:	9b01      	ldr	r3, [sp, #4]
 800b486:	f845 c003 	str.w	ip, [r5, r3]
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b490:	3104      	adds	r1, #4
 800b492:	f1b9 0f00 	cmp.w	r9, #0
 800b496:	d021      	beq.n	800b4dc <__multiply+0x144>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	f104 0c14 	add.w	ip, r4, #20
 800b49e:	46ae      	mov	lr, r5
 800b4a0:	f04f 0a00 	mov.w	sl, #0
 800b4a4:	f8bc b000 	ldrh.w	fp, [ip]
 800b4a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b4ac:	fb09 770b 	mla	r7, r9, fp, r7
 800b4b0:	4457      	add	r7, sl
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b4b8:	f84e 3b04 	str.w	r3, [lr], #4
 800b4bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4c4:	f8be 3000 	ldrh.w	r3, [lr]
 800b4c8:	fb09 330a 	mla	r3, r9, sl, r3
 800b4cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b4d0:	4562      	cmp	r2, ip
 800b4d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4d6:	d8e5      	bhi.n	800b4a4 <__multiply+0x10c>
 800b4d8:	9f01      	ldr	r7, [sp, #4]
 800b4da:	51eb      	str	r3, [r5, r7]
 800b4dc:	3504      	adds	r5, #4
 800b4de:	e799      	b.n	800b414 <__multiply+0x7c>
 800b4e0:	3e01      	subs	r6, #1
 800b4e2:	e79b      	b.n	800b41c <__multiply+0x84>
 800b4e4:	0800d9f0 	.word	0x0800d9f0
 800b4e8:	0800da78 	.word	0x0800da78

0800b4ec <__pow5mult>:
 800b4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	f012 0203 	ands.w	r2, r2, #3
 800b4f6:	4607      	mov	r7, r0
 800b4f8:	460e      	mov	r6, r1
 800b4fa:	d007      	beq.n	800b50c <__pow5mult+0x20>
 800b4fc:	4c25      	ldr	r4, [pc, #148]	@ (800b594 <__pow5mult+0xa8>)
 800b4fe:	3a01      	subs	r2, #1
 800b500:	2300      	movs	r3, #0
 800b502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b506:	f7ff fe55 	bl	800b1b4 <__multadd>
 800b50a:	4606      	mov	r6, r0
 800b50c:	10ad      	asrs	r5, r5, #2
 800b50e:	d03d      	beq.n	800b58c <__pow5mult+0xa0>
 800b510:	69fc      	ldr	r4, [r7, #28]
 800b512:	b97c      	cbnz	r4, 800b534 <__pow5mult+0x48>
 800b514:	2010      	movs	r0, #16
 800b516:	f000 fe97 	bl	800c248 <malloc>
 800b51a:	4602      	mov	r2, r0
 800b51c:	61f8      	str	r0, [r7, #28]
 800b51e:	b928      	cbnz	r0, 800b52c <__pow5mult+0x40>
 800b520:	4b1d      	ldr	r3, [pc, #116]	@ (800b598 <__pow5mult+0xac>)
 800b522:	481e      	ldr	r0, [pc, #120]	@ (800b59c <__pow5mult+0xb0>)
 800b524:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b528:	f000 fe5c 	bl	800c1e4 <__assert_func>
 800b52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b530:	6004      	str	r4, [r0, #0]
 800b532:	60c4      	str	r4, [r0, #12]
 800b534:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b53c:	b94c      	cbnz	r4, 800b552 <__pow5mult+0x66>
 800b53e:	f240 2171 	movw	r1, #625	@ 0x271
 800b542:	4638      	mov	r0, r7
 800b544:	f7ff ff12 	bl	800b36c <__i2b>
 800b548:	2300      	movs	r3, #0
 800b54a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b54e:	4604      	mov	r4, r0
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	f04f 0900 	mov.w	r9, #0
 800b556:	07eb      	lsls	r3, r5, #31
 800b558:	d50a      	bpl.n	800b570 <__pow5mult+0x84>
 800b55a:	4631      	mov	r1, r6
 800b55c:	4622      	mov	r2, r4
 800b55e:	4638      	mov	r0, r7
 800b560:	f7ff ff1a 	bl	800b398 <__multiply>
 800b564:	4631      	mov	r1, r6
 800b566:	4680      	mov	r8, r0
 800b568:	4638      	mov	r0, r7
 800b56a:	f7ff fe01 	bl	800b170 <_Bfree>
 800b56e:	4646      	mov	r6, r8
 800b570:	106d      	asrs	r5, r5, #1
 800b572:	d00b      	beq.n	800b58c <__pow5mult+0xa0>
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	b938      	cbnz	r0, 800b588 <__pow5mult+0x9c>
 800b578:	4622      	mov	r2, r4
 800b57a:	4621      	mov	r1, r4
 800b57c:	4638      	mov	r0, r7
 800b57e:	f7ff ff0b 	bl	800b398 <__multiply>
 800b582:	6020      	str	r0, [r4, #0]
 800b584:	f8c0 9000 	str.w	r9, [r0]
 800b588:	4604      	mov	r4, r0
 800b58a:	e7e4      	b.n	800b556 <__pow5mult+0x6a>
 800b58c:	4630      	mov	r0, r6
 800b58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b592:	bf00      	nop
 800b594:	0800dad4 	.word	0x0800dad4
 800b598:	0800da61 	.word	0x0800da61
 800b59c:	0800da78 	.word	0x0800da78

0800b5a0 <__lshift>:
 800b5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	6849      	ldr	r1, [r1, #4]
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ae:	68a3      	ldr	r3, [r4, #8]
 800b5b0:	4607      	mov	r7, r0
 800b5b2:	4691      	mov	r9, r2
 800b5b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5b8:	f108 0601 	add.w	r6, r8, #1
 800b5bc:	42b3      	cmp	r3, r6
 800b5be:	db0b      	blt.n	800b5d8 <__lshift+0x38>
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f7ff fd95 	bl	800b0f0 <_Balloc>
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	b948      	cbnz	r0, 800b5de <__lshift+0x3e>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b28      	ldr	r3, [pc, #160]	@ (800b670 <__lshift+0xd0>)
 800b5ce:	4829      	ldr	r0, [pc, #164]	@ (800b674 <__lshift+0xd4>)
 800b5d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b5d4:	f000 fe06 	bl	800c1e4 <__assert_func>
 800b5d8:	3101      	adds	r1, #1
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	e7ee      	b.n	800b5bc <__lshift+0x1c>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f100 0114 	add.w	r1, r0, #20
 800b5e4:	f100 0210 	add.w	r2, r0, #16
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	4553      	cmp	r3, sl
 800b5ec:	db33      	blt.n	800b656 <__lshift+0xb6>
 800b5ee:	6920      	ldr	r0, [r4, #16]
 800b5f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5f4:	f104 0314 	add.w	r3, r4, #20
 800b5f8:	f019 091f 	ands.w	r9, r9, #31
 800b5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b600:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b604:	d02b      	beq.n	800b65e <__lshift+0xbe>
 800b606:	f1c9 0e20 	rsb	lr, r9, #32
 800b60a:	468a      	mov	sl, r1
 800b60c:	2200      	movs	r2, #0
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	fa00 f009 	lsl.w	r0, r0, r9
 800b614:	4310      	orrs	r0, r2
 800b616:	f84a 0b04 	str.w	r0, [sl], #4
 800b61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61e:	459c      	cmp	ip, r3
 800b620:	fa22 f20e 	lsr.w	r2, r2, lr
 800b624:	d8f3      	bhi.n	800b60e <__lshift+0x6e>
 800b626:	ebac 0304 	sub.w	r3, ip, r4
 800b62a:	3b15      	subs	r3, #21
 800b62c:	f023 0303 	bic.w	r3, r3, #3
 800b630:	3304      	adds	r3, #4
 800b632:	f104 0015 	add.w	r0, r4, #21
 800b636:	4584      	cmp	ip, r0
 800b638:	bf38      	it	cc
 800b63a:	2304      	movcc	r3, #4
 800b63c:	50ca      	str	r2, [r1, r3]
 800b63e:	b10a      	cbz	r2, 800b644 <__lshift+0xa4>
 800b640:	f108 0602 	add.w	r6, r8, #2
 800b644:	3e01      	subs	r6, #1
 800b646:	4638      	mov	r0, r7
 800b648:	612e      	str	r6, [r5, #16]
 800b64a:	4621      	mov	r1, r4
 800b64c:	f7ff fd90 	bl	800b170 <_Bfree>
 800b650:	4628      	mov	r0, r5
 800b652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b656:	f842 0f04 	str.w	r0, [r2, #4]!
 800b65a:	3301      	adds	r3, #1
 800b65c:	e7c5      	b.n	800b5ea <__lshift+0x4a>
 800b65e:	3904      	subs	r1, #4
 800b660:	f853 2b04 	ldr.w	r2, [r3], #4
 800b664:	f841 2f04 	str.w	r2, [r1, #4]!
 800b668:	459c      	cmp	ip, r3
 800b66a:	d8f9      	bhi.n	800b660 <__lshift+0xc0>
 800b66c:	e7ea      	b.n	800b644 <__lshift+0xa4>
 800b66e:	bf00      	nop
 800b670:	0800d9f0 	.word	0x0800d9f0
 800b674:	0800da78 	.word	0x0800da78

0800b678 <__mcmp>:
 800b678:	690a      	ldr	r2, [r1, #16]
 800b67a:	4603      	mov	r3, r0
 800b67c:	6900      	ldr	r0, [r0, #16]
 800b67e:	1a80      	subs	r0, r0, r2
 800b680:	b530      	push	{r4, r5, lr}
 800b682:	d10e      	bne.n	800b6a2 <__mcmp+0x2a>
 800b684:	3314      	adds	r3, #20
 800b686:	3114      	adds	r1, #20
 800b688:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b68c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b698:	4295      	cmp	r5, r2
 800b69a:	d003      	beq.n	800b6a4 <__mcmp+0x2c>
 800b69c:	d205      	bcs.n	800b6aa <__mcmp+0x32>
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	bd30      	pop	{r4, r5, pc}
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	d3f3      	bcc.n	800b690 <__mcmp+0x18>
 800b6a8:	e7fb      	b.n	800b6a2 <__mcmp+0x2a>
 800b6aa:	2001      	movs	r0, #1
 800b6ac:	e7f9      	b.n	800b6a2 <__mcmp+0x2a>
	...

0800b6b0 <__mdiff>:
 800b6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4689      	mov	r9, r1
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4648      	mov	r0, r9
 800b6bc:	4614      	mov	r4, r2
 800b6be:	f7ff ffdb 	bl	800b678 <__mcmp>
 800b6c2:	1e05      	subs	r5, r0, #0
 800b6c4:	d112      	bne.n	800b6ec <__mdiff+0x3c>
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff fd11 	bl	800b0f0 <_Balloc>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	b928      	cbnz	r0, 800b6de <__mdiff+0x2e>
 800b6d2:	4b3f      	ldr	r3, [pc, #252]	@ (800b7d0 <__mdiff+0x120>)
 800b6d4:	f240 2137 	movw	r1, #567	@ 0x237
 800b6d8:	483e      	ldr	r0, [pc, #248]	@ (800b7d4 <__mdiff+0x124>)
 800b6da:	f000 fd83 	bl	800c1e4 <__assert_func>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	b003      	add	sp, #12
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	bfbc      	itt	lt
 800b6ee:	464b      	movlt	r3, r9
 800b6f0:	46a1      	movlt	r9, r4
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b6f8:	bfba      	itte	lt
 800b6fa:	461c      	movlt	r4, r3
 800b6fc:	2501      	movlt	r5, #1
 800b6fe:	2500      	movge	r5, #0
 800b700:	f7ff fcf6 	bl	800b0f0 <_Balloc>
 800b704:	4602      	mov	r2, r0
 800b706:	b918      	cbnz	r0, 800b710 <__mdiff+0x60>
 800b708:	4b31      	ldr	r3, [pc, #196]	@ (800b7d0 <__mdiff+0x120>)
 800b70a:	f240 2145 	movw	r1, #581	@ 0x245
 800b70e:	e7e3      	b.n	800b6d8 <__mdiff+0x28>
 800b710:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b714:	6926      	ldr	r6, [r4, #16]
 800b716:	60c5      	str	r5, [r0, #12]
 800b718:	f109 0310 	add.w	r3, r9, #16
 800b71c:	f109 0514 	add.w	r5, r9, #20
 800b720:	f104 0e14 	add.w	lr, r4, #20
 800b724:	f100 0b14 	add.w	fp, r0, #20
 800b728:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b72c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	46d9      	mov	r9, fp
 800b734:	f04f 0c00 	mov.w	ip, #0
 800b738:	9b01      	ldr	r3, [sp, #4]
 800b73a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b73e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	fa1f f38a 	uxth.w	r3, sl
 800b748:	4619      	mov	r1, r3
 800b74a:	b283      	uxth	r3, r0
 800b74c:	1acb      	subs	r3, r1, r3
 800b74e:	0c00      	lsrs	r0, r0, #16
 800b750:	4463      	add	r3, ip
 800b752:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b756:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b760:	4576      	cmp	r6, lr
 800b762:	f849 3b04 	str.w	r3, [r9], #4
 800b766:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b76a:	d8e5      	bhi.n	800b738 <__mdiff+0x88>
 800b76c:	1b33      	subs	r3, r6, r4
 800b76e:	3b15      	subs	r3, #21
 800b770:	f023 0303 	bic.w	r3, r3, #3
 800b774:	3415      	adds	r4, #21
 800b776:	3304      	adds	r3, #4
 800b778:	42a6      	cmp	r6, r4
 800b77a:	bf38      	it	cc
 800b77c:	2304      	movcc	r3, #4
 800b77e:	441d      	add	r5, r3
 800b780:	445b      	add	r3, fp
 800b782:	461e      	mov	r6, r3
 800b784:	462c      	mov	r4, r5
 800b786:	4544      	cmp	r4, r8
 800b788:	d30e      	bcc.n	800b7a8 <__mdiff+0xf8>
 800b78a:	f108 0103 	add.w	r1, r8, #3
 800b78e:	1b49      	subs	r1, r1, r5
 800b790:	f021 0103 	bic.w	r1, r1, #3
 800b794:	3d03      	subs	r5, #3
 800b796:	45a8      	cmp	r8, r5
 800b798:	bf38      	it	cc
 800b79a:	2100      	movcc	r1, #0
 800b79c:	440b      	add	r3, r1
 800b79e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7a2:	b191      	cbz	r1, 800b7ca <__mdiff+0x11a>
 800b7a4:	6117      	str	r7, [r2, #16]
 800b7a6:	e79d      	b.n	800b6e4 <__mdiff+0x34>
 800b7a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7ac:	46e6      	mov	lr, ip
 800b7ae:	0c08      	lsrs	r0, r1, #16
 800b7b0:	fa1c fc81 	uxtah	ip, ip, r1
 800b7b4:	4471      	add	r1, lr
 800b7b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7ba:	b289      	uxth	r1, r1
 800b7bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7c0:	f846 1b04 	str.w	r1, [r6], #4
 800b7c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7c8:	e7dd      	b.n	800b786 <__mdiff+0xd6>
 800b7ca:	3f01      	subs	r7, #1
 800b7cc:	e7e7      	b.n	800b79e <__mdiff+0xee>
 800b7ce:	bf00      	nop
 800b7d0:	0800d9f0 	.word	0x0800d9f0
 800b7d4:	0800da78 	.word	0x0800da78

0800b7d8 <__ulp>:
 800b7d8:	b082      	sub	sp, #8
 800b7da:	ed8d 0b00 	vstr	d0, [sp]
 800b7de:	9a01      	ldr	r2, [sp, #4]
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b820 <__ulp+0x48>)
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dc08      	bgt.n	800b7fe <__ulp+0x26>
 800b7ec:	425b      	negs	r3, r3
 800b7ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b7f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b7f6:	da04      	bge.n	800b802 <__ulp+0x2a>
 800b7f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b7fc:	4113      	asrs	r3, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	e008      	b.n	800b814 <__ulp+0x3c>
 800b802:	f1a2 0314 	sub.w	r3, r2, #20
 800b806:	2b1e      	cmp	r3, #30
 800b808:	bfda      	itte	le
 800b80a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b80e:	40da      	lsrle	r2, r3
 800b810:	2201      	movgt	r2, #1
 800b812:	2300      	movs	r3, #0
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	ec41 0b10 	vmov	d0, r0, r1
 800b81c:	b002      	add	sp, #8
 800b81e:	4770      	bx	lr
 800b820:	7ff00000 	.word	0x7ff00000

0800b824 <__b2d>:
 800b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b828:	6906      	ldr	r6, [r0, #16]
 800b82a:	f100 0814 	add.w	r8, r0, #20
 800b82e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b832:	1f37      	subs	r7, r6, #4
 800b834:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b838:	4610      	mov	r0, r2
 800b83a:	f7ff fd4b 	bl	800b2d4 <__hi0bits>
 800b83e:	f1c0 0320 	rsb	r3, r0, #32
 800b842:	280a      	cmp	r0, #10
 800b844:	600b      	str	r3, [r1, #0]
 800b846:	491b      	ldr	r1, [pc, #108]	@ (800b8b4 <__b2d+0x90>)
 800b848:	dc15      	bgt.n	800b876 <__b2d+0x52>
 800b84a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b84e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b852:	45b8      	cmp	r8, r7
 800b854:	ea43 0501 	orr.w	r5, r3, r1
 800b858:	bf34      	ite	cc
 800b85a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b85e:	2300      	movcs	r3, #0
 800b860:	3015      	adds	r0, #21
 800b862:	fa02 f000 	lsl.w	r0, r2, r0
 800b866:	fa23 f30c 	lsr.w	r3, r3, ip
 800b86a:	4303      	orrs	r3, r0
 800b86c:	461c      	mov	r4, r3
 800b86e:	ec45 4b10 	vmov	d0, r4, r5
 800b872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b876:	45b8      	cmp	r8, r7
 800b878:	bf3a      	itte	cc
 800b87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b87e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b882:	2300      	movcs	r3, #0
 800b884:	380b      	subs	r0, #11
 800b886:	d012      	beq.n	800b8ae <__b2d+0x8a>
 800b888:	f1c0 0120 	rsb	r1, r0, #32
 800b88c:	fa23 f401 	lsr.w	r4, r3, r1
 800b890:	4082      	lsls	r2, r0
 800b892:	4322      	orrs	r2, r4
 800b894:	4547      	cmp	r7, r8
 800b896:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b89a:	bf8c      	ite	hi
 800b89c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b8a0:	2200      	movls	r2, #0
 800b8a2:	4083      	lsls	r3, r0
 800b8a4:	40ca      	lsrs	r2, r1
 800b8a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	e7de      	b.n	800b86c <__b2d+0x48>
 800b8ae:	ea42 0501 	orr.w	r5, r2, r1
 800b8b2:	e7db      	b.n	800b86c <__b2d+0x48>
 800b8b4:	3ff00000 	.word	0x3ff00000

0800b8b8 <__d2b>:
 800b8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8bc:	460f      	mov	r7, r1
 800b8be:	2101      	movs	r1, #1
 800b8c0:	ec59 8b10 	vmov	r8, r9, d0
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	f7ff fc13 	bl	800b0f0 <_Balloc>
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	b930      	cbnz	r0, 800b8dc <__d2b+0x24>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	4b23      	ldr	r3, [pc, #140]	@ (800b960 <__d2b+0xa8>)
 800b8d2:	4824      	ldr	r0, [pc, #144]	@ (800b964 <__d2b+0xac>)
 800b8d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8d8:	f000 fc84 	bl	800c1e4 <__assert_func>
 800b8dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8e4:	b10d      	cbz	r5, 800b8ea <__d2b+0x32>
 800b8e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8ea:	9301      	str	r3, [sp, #4]
 800b8ec:	f1b8 0300 	subs.w	r3, r8, #0
 800b8f0:	d023      	beq.n	800b93a <__d2b+0x82>
 800b8f2:	4668      	mov	r0, sp
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	f7ff fd0c 	bl	800b312 <__lo0bits>
 800b8fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8fe:	b1d0      	cbz	r0, 800b936 <__d2b+0x7e>
 800b900:	f1c0 0320 	rsb	r3, r0, #32
 800b904:	fa02 f303 	lsl.w	r3, r2, r3
 800b908:	430b      	orrs	r3, r1
 800b90a:	40c2      	lsrs	r2, r0
 800b90c:	6163      	str	r3, [r4, #20]
 800b90e:	9201      	str	r2, [sp, #4]
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	61a3      	str	r3, [r4, #24]
 800b914:	2b00      	cmp	r3, #0
 800b916:	bf0c      	ite	eq
 800b918:	2201      	moveq	r2, #1
 800b91a:	2202      	movne	r2, #2
 800b91c:	6122      	str	r2, [r4, #16]
 800b91e:	b1a5      	cbz	r5, 800b94a <__d2b+0x92>
 800b920:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b924:	4405      	add	r5, r0
 800b926:	603d      	str	r5, [r7, #0]
 800b928:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b92c:	6030      	str	r0, [r6, #0]
 800b92e:	4620      	mov	r0, r4
 800b930:	b003      	add	sp, #12
 800b932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b936:	6161      	str	r1, [r4, #20]
 800b938:	e7ea      	b.n	800b910 <__d2b+0x58>
 800b93a:	a801      	add	r0, sp, #4
 800b93c:	f7ff fce9 	bl	800b312 <__lo0bits>
 800b940:	9b01      	ldr	r3, [sp, #4]
 800b942:	6163      	str	r3, [r4, #20]
 800b944:	3020      	adds	r0, #32
 800b946:	2201      	movs	r2, #1
 800b948:	e7e8      	b.n	800b91c <__d2b+0x64>
 800b94a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b94e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b952:	6038      	str	r0, [r7, #0]
 800b954:	6918      	ldr	r0, [r3, #16]
 800b956:	f7ff fcbd 	bl	800b2d4 <__hi0bits>
 800b95a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b95e:	e7e5      	b.n	800b92c <__d2b+0x74>
 800b960:	0800d9f0 	.word	0x0800d9f0
 800b964:	0800da78 	.word	0x0800da78

0800b968 <__ratio>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	b085      	sub	sp, #20
 800b96e:	e9cd 1000 	strd	r1, r0, [sp]
 800b972:	a902      	add	r1, sp, #8
 800b974:	f7ff ff56 	bl	800b824 <__b2d>
 800b978:	9800      	ldr	r0, [sp, #0]
 800b97a:	a903      	add	r1, sp, #12
 800b97c:	ec55 4b10 	vmov	r4, r5, d0
 800b980:	f7ff ff50 	bl	800b824 <__b2d>
 800b984:	9b01      	ldr	r3, [sp, #4]
 800b986:	6919      	ldr	r1, [r3, #16]
 800b988:	9b00      	ldr	r3, [sp, #0]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	1ac9      	subs	r1, r1, r3
 800b98e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b992:	1a9b      	subs	r3, r3, r2
 800b994:	ec5b ab10 	vmov	sl, fp, d0
 800b998:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	bfce      	itee	gt
 800b9a0:	462a      	movgt	r2, r5
 800b9a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9a6:	465a      	movle	r2, fp
 800b9a8:	462f      	mov	r7, r5
 800b9aa:	46d9      	mov	r9, fp
 800b9ac:	bfcc      	ite	gt
 800b9ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b9b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b9b6:	464b      	mov	r3, r9
 800b9b8:	4652      	mov	r2, sl
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	4639      	mov	r1, r7
 800b9be:	f7f4 ff65 	bl	800088c <__aeabi_ddiv>
 800b9c2:	ec41 0b10 	vmov	d0, r0, r1
 800b9c6:	b005      	add	sp, #20
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9cc <__copybits>:
 800b9cc:	3901      	subs	r1, #1
 800b9ce:	b570      	push	{r4, r5, r6, lr}
 800b9d0:	1149      	asrs	r1, r1, #5
 800b9d2:	6914      	ldr	r4, [r2, #16]
 800b9d4:	3101      	adds	r1, #1
 800b9d6:	f102 0314 	add.w	r3, r2, #20
 800b9da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b9e2:	1f05      	subs	r5, r0, #4
 800b9e4:	42a3      	cmp	r3, r4
 800b9e6:	d30c      	bcc.n	800ba02 <__copybits+0x36>
 800b9e8:	1aa3      	subs	r3, r4, r2
 800b9ea:	3b11      	subs	r3, #17
 800b9ec:	f023 0303 	bic.w	r3, r3, #3
 800b9f0:	3211      	adds	r2, #17
 800b9f2:	42a2      	cmp	r2, r4
 800b9f4:	bf88      	it	hi
 800b9f6:	2300      	movhi	r3, #0
 800b9f8:	4418      	add	r0, r3
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4288      	cmp	r0, r1
 800b9fe:	d305      	bcc.n	800ba0c <__copybits+0x40>
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba06:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba0a:	e7eb      	b.n	800b9e4 <__copybits+0x18>
 800ba0c:	f840 3b04 	str.w	r3, [r0], #4
 800ba10:	e7f4      	b.n	800b9fc <__copybits+0x30>

0800ba12 <__any_on>:
 800ba12:	f100 0214 	add.w	r2, r0, #20
 800ba16:	6900      	ldr	r0, [r0, #16]
 800ba18:	114b      	asrs	r3, r1, #5
 800ba1a:	4298      	cmp	r0, r3
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	db11      	blt.n	800ba44 <__any_on+0x32>
 800ba20:	dd0a      	ble.n	800ba38 <__any_on+0x26>
 800ba22:	f011 011f 	ands.w	r1, r1, #31
 800ba26:	d007      	beq.n	800ba38 <__any_on+0x26>
 800ba28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba2c:	fa24 f001 	lsr.w	r0, r4, r1
 800ba30:	fa00 f101 	lsl.w	r1, r0, r1
 800ba34:	428c      	cmp	r4, r1
 800ba36:	d10b      	bne.n	800ba50 <__any_on+0x3e>
 800ba38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d803      	bhi.n	800ba48 <__any_on+0x36>
 800ba40:	2000      	movs	r0, #0
 800ba42:	bd10      	pop	{r4, pc}
 800ba44:	4603      	mov	r3, r0
 800ba46:	e7f7      	b.n	800ba38 <__any_on+0x26>
 800ba48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	d0f5      	beq.n	800ba3c <__any_on+0x2a>
 800ba50:	2001      	movs	r0, #1
 800ba52:	e7f6      	b.n	800ba42 <__any_on+0x30>

0800ba54 <__ascii_wctomb>:
 800ba54:	4603      	mov	r3, r0
 800ba56:	4608      	mov	r0, r1
 800ba58:	b141      	cbz	r1, 800ba6c <__ascii_wctomb+0x18>
 800ba5a:	2aff      	cmp	r2, #255	@ 0xff
 800ba5c:	d904      	bls.n	800ba68 <__ascii_wctomb+0x14>
 800ba5e:	228a      	movs	r2, #138	@ 0x8a
 800ba60:	601a      	str	r2, [r3, #0]
 800ba62:	f04f 30ff 	mov.w	r0, #4294967295
 800ba66:	4770      	bx	lr
 800ba68:	700a      	strb	r2, [r1, #0]
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	4770      	bx	lr

0800ba6e <__ssputs_r>:
 800ba6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba72:	688e      	ldr	r6, [r1, #8]
 800ba74:	461f      	mov	r7, r3
 800ba76:	42be      	cmp	r6, r7
 800ba78:	680b      	ldr	r3, [r1, #0]
 800ba7a:	4682      	mov	sl, r0
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	4690      	mov	r8, r2
 800ba80:	d82d      	bhi.n	800bade <__ssputs_r+0x70>
 800ba82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba86:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba8a:	d026      	beq.n	800bada <__ssputs_r+0x6c>
 800ba8c:	6965      	ldr	r5, [r4, #20]
 800ba8e:	6909      	ldr	r1, [r1, #16]
 800ba90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba94:	eba3 0901 	sub.w	r9, r3, r1
 800ba98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba9c:	1c7b      	adds	r3, r7, #1
 800ba9e:	444b      	add	r3, r9
 800baa0:	106d      	asrs	r5, r5, #1
 800baa2:	429d      	cmp	r5, r3
 800baa4:	bf38      	it	cc
 800baa6:	461d      	movcc	r5, r3
 800baa8:	0553      	lsls	r3, r2, #21
 800baaa:	d527      	bpl.n	800bafc <__ssputs_r+0x8e>
 800baac:	4629      	mov	r1, r5
 800baae:	f7ff fa81 	bl	800afb4 <_malloc_r>
 800bab2:	4606      	mov	r6, r0
 800bab4:	b360      	cbz	r0, 800bb10 <__ssputs_r+0xa2>
 800bab6:	6921      	ldr	r1, [r4, #16]
 800bab8:	464a      	mov	r2, r9
 800baba:	f7fe febc 	bl	800a836 <memcpy>
 800babe:	89a3      	ldrh	r3, [r4, #12]
 800bac0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bac8:	81a3      	strh	r3, [r4, #12]
 800baca:	6126      	str	r6, [r4, #16]
 800bacc:	6165      	str	r5, [r4, #20]
 800bace:	444e      	add	r6, r9
 800bad0:	eba5 0509 	sub.w	r5, r5, r9
 800bad4:	6026      	str	r6, [r4, #0]
 800bad6:	60a5      	str	r5, [r4, #8]
 800bad8:	463e      	mov	r6, r7
 800bada:	42be      	cmp	r6, r7
 800badc:	d900      	bls.n	800bae0 <__ssputs_r+0x72>
 800bade:	463e      	mov	r6, r7
 800bae0:	6820      	ldr	r0, [r4, #0]
 800bae2:	4632      	mov	r2, r6
 800bae4:	4641      	mov	r1, r8
 800bae6:	f000 fb53 	bl	800c190 <memmove>
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	1b9b      	subs	r3, r3, r6
 800baee:	60a3      	str	r3, [r4, #8]
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	4433      	add	r3, r6
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	2000      	movs	r0, #0
 800baf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafc:	462a      	mov	r2, r5
 800bafe:	f000 fbab 	bl	800c258 <_realloc_r>
 800bb02:	4606      	mov	r6, r0
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d1e0      	bne.n	800baca <__ssputs_r+0x5c>
 800bb08:	6921      	ldr	r1, [r4, #16]
 800bb0a:	4650      	mov	r0, sl
 800bb0c:	f7fe feac 	bl	800a868 <_free_r>
 800bb10:	230c      	movs	r3, #12
 800bb12:	f8ca 3000 	str.w	r3, [sl]
 800bb16:	89a3      	ldrh	r3, [r4, #12]
 800bb18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb1c:	81a3      	strh	r3, [r4, #12]
 800bb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb22:	e7e9      	b.n	800baf8 <__ssputs_r+0x8a>

0800bb24 <_svfiprintf_r>:
 800bb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	4698      	mov	r8, r3
 800bb2a:	898b      	ldrh	r3, [r1, #12]
 800bb2c:	061b      	lsls	r3, r3, #24
 800bb2e:	b09d      	sub	sp, #116	@ 0x74
 800bb30:	4607      	mov	r7, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	4614      	mov	r4, r2
 800bb36:	d510      	bpl.n	800bb5a <_svfiprintf_r+0x36>
 800bb38:	690b      	ldr	r3, [r1, #16]
 800bb3a:	b973      	cbnz	r3, 800bb5a <_svfiprintf_r+0x36>
 800bb3c:	2140      	movs	r1, #64	@ 0x40
 800bb3e:	f7ff fa39 	bl	800afb4 <_malloc_r>
 800bb42:	6028      	str	r0, [r5, #0]
 800bb44:	6128      	str	r0, [r5, #16]
 800bb46:	b930      	cbnz	r0, 800bb56 <_svfiprintf_r+0x32>
 800bb48:	230c      	movs	r3, #12
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb50:	b01d      	add	sp, #116	@ 0x74
 800bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb56:	2340      	movs	r3, #64	@ 0x40
 800bb58:	616b      	str	r3, [r5, #20]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb5e:	2320      	movs	r3, #32
 800bb60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb64:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb68:	2330      	movs	r3, #48	@ 0x30
 800bb6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd08 <_svfiprintf_r+0x1e4>
 800bb6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb72:	f04f 0901 	mov.w	r9, #1
 800bb76:	4623      	mov	r3, r4
 800bb78:	469a      	mov	sl, r3
 800bb7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb7e:	b10a      	cbz	r2, 800bb84 <_svfiprintf_r+0x60>
 800bb80:	2a25      	cmp	r2, #37	@ 0x25
 800bb82:	d1f9      	bne.n	800bb78 <_svfiprintf_r+0x54>
 800bb84:	ebba 0b04 	subs.w	fp, sl, r4
 800bb88:	d00b      	beq.n	800bba2 <_svfiprintf_r+0x7e>
 800bb8a:	465b      	mov	r3, fp
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4638      	mov	r0, r7
 800bb92:	f7ff ff6c 	bl	800ba6e <__ssputs_r>
 800bb96:	3001      	adds	r0, #1
 800bb98:	f000 80a7 	beq.w	800bcea <_svfiprintf_r+0x1c6>
 800bb9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb9e:	445a      	add	r2, fp
 800bba0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bba2:	f89a 3000 	ldrb.w	r3, [sl]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 809f 	beq.w	800bcea <_svfiprintf_r+0x1c6>
 800bbac:	2300      	movs	r3, #0
 800bbae:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbb6:	f10a 0a01 	add.w	sl, sl, #1
 800bbba:	9304      	str	r3, [sp, #16]
 800bbbc:	9307      	str	r3, [sp, #28]
 800bbbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbc4:	4654      	mov	r4, sl
 800bbc6:	2205      	movs	r2, #5
 800bbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbcc:	484e      	ldr	r0, [pc, #312]	@ (800bd08 <_svfiprintf_r+0x1e4>)
 800bbce:	f7f4 fb27 	bl	8000220 <memchr>
 800bbd2:	9a04      	ldr	r2, [sp, #16]
 800bbd4:	b9d8      	cbnz	r0, 800bc0e <_svfiprintf_r+0xea>
 800bbd6:	06d0      	lsls	r0, r2, #27
 800bbd8:	bf44      	itt	mi
 800bbda:	2320      	movmi	r3, #32
 800bbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbe0:	0711      	lsls	r1, r2, #28
 800bbe2:	bf44      	itt	mi
 800bbe4:	232b      	movmi	r3, #43	@ 0x2b
 800bbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbea:	f89a 3000 	ldrb.w	r3, [sl]
 800bbee:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbf0:	d015      	beq.n	800bc1e <_svfiprintf_r+0xfa>
 800bbf2:	9a07      	ldr	r2, [sp, #28]
 800bbf4:	4654      	mov	r4, sl
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	f04f 0c0a 	mov.w	ip, #10
 800bbfc:	4621      	mov	r1, r4
 800bbfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc02:	3b30      	subs	r3, #48	@ 0x30
 800bc04:	2b09      	cmp	r3, #9
 800bc06:	d94b      	bls.n	800bca0 <_svfiprintf_r+0x17c>
 800bc08:	b1b0      	cbz	r0, 800bc38 <_svfiprintf_r+0x114>
 800bc0a:	9207      	str	r2, [sp, #28]
 800bc0c:	e014      	b.n	800bc38 <_svfiprintf_r+0x114>
 800bc0e:	eba0 0308 	sub.w	r3, r0, r8
 800bc12:	fa09 f303 	lsl.w	r3, r9, r3
 800bc16:	4313      	orrs	r3, r2
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	46a2      	mov	sl, r4
 800bc1c:	e7d2      	b.n	800bbc4 <_svfiprintf_r+0xa0>
 800bc1e:	9b03      	ldr	r3, [sp, #12]
 800bc20:	1d19      	adds	r1, r3, #4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	9103      	str	r1, [sp, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	bfbb      	ittet	lt
 800bc2a:	425b      	neglt	r3, r3
 800bc2c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc30:	9307      	strge	r3, [sp, #28]
 800bc32:	9307      	strlt	r3, [sp, #28]
 800bc34:	bfb8      	it	lt
 800bc36:	9204      	strlt	r2, [sp, #16]
 800bc38:	7823      	ldrb	r3, [r4, #0]
 800bc3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc3c:	d10a      	bne.n	800bc54 <_svfiprintf_r+0x130>
 800bc3e:	7863      	ldrb	r3, [r4, #1]
 800bc40:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc42:	d132      	bne.n	800bcaa <_svfiprintf_r+0x186>
 800bc44:	9b03      	ldr	r3, [sp, #12]
 800bc46:	1d1a      	adds	r2, r3, #4
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	9203      	str	r2, [sp, #12]
 800bc4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc50:	3402      	adds	r4, #2
 800bc52:	9305      	str	r3, [sp, #20]
 800bc54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd18 <_svfiprintf_r+0x1f4>
 800bc58:	7821      	ldrb	r1, [r4, #0]
 800bc5a:	2203      	movs	r2, #3
 800bc5c:	4650      	mov	r0, sl
 800bc5e:	f7f4 fadf 	bl	8000220 <memchr>
 800bc62:	b138      	cbz	r0, 800bc74 <_svfiprintf_r+0x150>
 800bc64:	9b04      	ldr	r3, [sp, #16]
 800bc66:	eba0 000a 	sub.w	r0, r0, sl
 800bc6a:	2240      	movs	r2, #64	@ 0x40
 800bc6c:	4082      	lsls	r2, r0
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	3401      	adds	r4, #1
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc78:	4824      	ldr	r0, [pc, #144]	@ (800bd0c <_svfiprintf_r+0x1e8>)
 800bc7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc7e:	2206      	movs	r2, #6
 800bc80:	f7f4 face 	bl	8000220 <memchr>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d036      	beq.n	800bcf6 <_svfiprintf_r+0x1d2>
 800bc88:	4b21      	ldr	r3, [pc, #132]	@ (800bd10 <_svfiprintf_r+0x1ec>)
 800bc8a:	bb1b      	cbnz	r3, 800bcd4 <_svfiprintf_r+0x1b0>
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	3307      	adds	r3, #7
 800bc90:	f023 0307 	bic.w	r3, r3, #7
 800bc94:	3308      	adds	r3, #8
 800bc96:	9303      	str	r3, [sp, #12]
 800bc98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc9a:	4433      	add	r3, r6
 800bc9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc9e:	e76a      	b.n	800bb76 <_svfiprintf_r+0x52>
 800bca0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bca4:	460c      	mov	r4, r1
 800bca6:	2001      	movs	r0, #1
 800bca8:	e7a8      	b.n	800bbfc <_svfiprintf_r+0xd8>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	3401      	adds	r4, #1
 800bcae:	9305      	str	r3, [sp, #20]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f04f 0c0a 	mov.w	ip, #10
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcbc:	3a30      	subs	r2, #48	@ 0x30
 800bcbe:	2a09      	cmp	r2, #9
 800bcc0:	d903      	bls.n	800bcca <_svfiprintf_r+0x1a6>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0c6      	beq.n	800bc54 <_svfiprintf_r+0x130>
 800bcc6:	9105      	str	r1, [sp, #20]
 800bcc8:	e7c4      	b.n	800bc54 <_svfiprintf_r+0x130>
 800bcca:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcce:	4604      	mov	r4, r0
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e7f0      	b.n	800bcb6 <_svfiprintf_r+0x192>
 800bcd4:	ab03      	add	r3, sp, #12
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	462a      	mov	r2, r5
 800bcda:	4b0e      	ldr	r3, [pc, #56]	@ (800bd14 <_svfiprintf_r+0x1f0>)
 800bcdc:	a904      	add	r1, sp, #16
 800bcde:	4638      	mov	r0, r7
 800bce0:	f3af 8000 	nop.w
 800bce4:	1c42      	adds	r2, r0, #1
 800bce6:	4606      	mov	r6, r0
 800bce8:	d1d6      	bne.n	800bc98 <_svfiprintf_r+0x174>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	065b      	lsls	r3, r3, #25
 800bcee:	f53f af2d 	bmi.w	800bb4c <_svfiprintf_r+0x28>
 800bcf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcf4:	e72c      	b.n	800bb50 <_svfiprintf_r+0x2c>
 800bcf6:	ab03      	add	r3, sp, #12
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	462a      	mov	r2, r5
 800bcfc:	4b05      	ldr	r3, [pc, #20]	@ (800bd14 <_svfiprintf_r+0x1f0>)
 800bcfe:	a904      	add	r1, sp, #16
 800bd00:	4638      	mov	r0, r7
 800bd02:	f000 f879 	bl	800bdf8 <_printf_i>
 800bd06:	e7ed      	b.n	800bce4 <_svfiprintf_r+0x1c0>
 800bd08:	0800dcd1 	.word	0x0800dcd1
 800bd0c:	0800dcdb 	.word	0x0800dcdb
 800bd10:	00000000 	.word	0x00000000
 800bd14:	0800ba6f 	.word	0x0800ba6f
 800bd18:	0800dcd7 	.word	0x0800dcd7

0800bd1c <_printf_common>:
 800bd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd20:	4616      	mov	r6, r2
 800bd22:	4698      	mov	r8, r3
 800bd24:	688a      	ldr	r2, [r1, #8]
 800bd26:	690b      	ldr	r3, [r1, #16]
 800bd28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	bfb8      	it	lt
 800bd30:	4613      	movlt	r3, r2
 800bd32:	6033      	str	r3, [r6, #0]
 800bd34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd38:	4607      	mov	r7, r0
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	b10a      	cbz	r2, 800bd42 <_printf_common+0x26>
 800bd3e:	3301      	adds	r3, #1
 800bd40:	6033      	str	r3, [r6, #0]
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	0699      	lsls	r1, r3, #26
 800bd46:	bf42      	ittt	mi
 800bd48:	6833      	ldrmi	r3, [r6, #0]
 800bd4a:	3302      	addmi	r3, #2
 800bd4c:	6033      	strmi	r3, [r6, #0]
 800bd4e:	6825      	ldr	r5, [r4, #0]
 800bd50:	f015 0506 	ands.w	r5, r5, #6
 800bd54:	d106      	bne.n	800bd64 <_printf_common+0x48>
 800bd56:	f104 0a19 	add.w	sl, r4, #25
 800bd5a:	68e3      	ldr	r3, [r4, #12]
 800bd5c:	6832      	ldr	r2, [r6, #0]
 800bd5e:	1a9b      	subs	r3, r3, r2
 800bd60:	42ab      	cmp	r3, r5
 800bd62:	dc26      	bgt.n	800bdb2 <_printf_common+0x96>
 800bd64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd68:	6822      	ldr	r2, [r4, #0]
 800bd6a:	3b00      	subs	r3, #0
 800bd6c:	bf18      	it	ne
 800bd6e:	2301      	movne	r3, #1
 800bd70:	0692      	lsls	r2, r2, #26
 800bd72:	d42b      	bmi.n	800bdcc <_printf_common+0xb0>
 800bd74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd78:	4641      	mov	r1, r8
 800bd7a:	4638      	mov	r0, r7
 800bd7c:	47c8      	blx	r9
 800bd7e:	3001      	adds	r0, #1
 800bd80:	d01e      	beq.n	800bdc0 <_printf_common+0xa4>
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	6922      	ldr	r2, [r4, #16]
 800bd86:	f003 0306 	and.w	r3, r3, #6
 800bd8a:	2b04      	cmp	r3, #4
 800bd8c:	bf02      	ittt	eq
 800bd8e:	68e5      	ldreq	r5, [r4, #12]
 800bd90:	6833      	ldreq	r3, [r6, #0]
 800bd92:	1aed      	subeq	r5, r5, r3
 800bd94:	68a3      	ldr	r3, [r4, #8]
 800bd96:	bf0c      	ite	eq
 800bd98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd9c:	2500      	movne	r5, #0
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	bfc4      	itt	gt
 800bda2:	1a9b      	subgt	r3, r3, r2
 800bda4:	18ed      	addgt	r5, r5, r3
 800bda6:	2600      	movs	r6, #0
 800bda8:	341a      	adds	r4, #26
 800bdaa:	42b5      	cmp	r5, r6
 800bdac:	d11a      	bne.n	800bde4 <_printf_common+0xc8>
 800bdae:	2000      	movs	r0, #0
 800bdb0:	e008      	b.n	800bdc4 <_printf_common+0xa8>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	4641      	mov	r1, r8
 800bdb8:	4638      	mov	r0, r7
 800bdba:	47c8      	blx	r9
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d103      	bne.n	800bdc8 <_printf_common+0xac>
 800bdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc8:	3501      	adds	r5, #1
 800bdca:	e7c6      	b.n	800bd5a <_printf_common+0x3e>
 800bdcc:	18e1      	adds	r1, r4, r3
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	2030      	movs	r0, #48	@ 0x30
 800bdd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdd6:	4422      	add	r2, r4
 800bdd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bde0:	3302      	adds	r3, #2
 800bde2:	e7c7      	b.n	800bd74 <_printf_common+0x58>
 800bde4:	2301      	movs	r3, #1
 800bde6:	4622      	mov	r2, r4
 800bde8:	4641      	mov	r1, r8
 800bdea:	4638      	mov	r0, r7
 800bdec:	47c8      	blx	r9
 800bdee:	3001      	adds	r0, #1
 800bdf0:	d0e6      	beq.n	800bdc0 <_printf_common+0xa4>
 800bdf2:	3601      	adds	r6, #1
 800bdf4:	e7d9      	b.n	800bdaa <_printf_common+0x8e>
	...

0800bdf8 <_printf_i>:
 800bdf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdfc:	7e0f      	ldrb	r7, [r1, #24]
 800bdfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be00:	2f78      	cmp	r7, #120	@ 0x78
 800be02:	4691      	mov	r9, r2
 800be04:	4680      	mov	r8, r0
 800be06:	460c      	mov	r4, r1
 800be08:	469a      	mov	sl, r3
 800be0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be0e:	d807      	bhi.n	800be20 <_printf_i+0x28>
 800be10:	2f62      	cmp	r7, #98	@ 0x62
 800be12:	d80a      	bhi.n	800be2a <_printf_i+0x32>
 800be14:	2f00      	cmp	r7, #0
 800be16:	f000 80d2 	beq.w	800bfbe <_printf_i+0x1c6>
 800be1a:	2f58      	cmp	r7, #88	@ 0x58
 800be1c:	f000 80b9 	beq.w	800bf92 <_printf_i+0x19a>
 800be20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be28:	e03a      	b.n	800bea0 <_printf_i+0xa8>
 800be2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be2e:	2b15      	cmp	r3, #21
 800be30:	d8f6      	bhi.n	800be20 <_printf_i+0x28>
 800be32:	a101      	add	r1, pc, #4	@ (adr r1, 800be38 <_printf_i+0x40>)
 800be34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be38:	0800be91 	.word	0x0800be91
 800be3c:	0800bea5 	.word	0x0800bea5
 800be40:	0800be21 	.word	0x0800be21
 800be44:	0800be21 	.word	0x0800be21
 800be48:	0800be21 	.word	0x0800be21
 800be4c:	0800be21 	.word	0x0800be21
 800be50:	0800bea5 	.word	0x0800bea5
 800be54:	0800be21 	.word	0x0800be21
 800be58:	0800be21 	.word	0x0800be21
 800be5c:	0800be21 	.word	0x0800be21
 800be60:	0800be21 	.word	0x0800be21
 800be64:	0800bfa5 	.word	0x0800bfa5
 800be68:	0800becf 	.word	0x0800becf
 800be6c:	0800bf5f 	.word	0x0800bf5f
 800be70:	0800be21 	.word	0x0800be21
 800be74:	0800be21 	.word	0x0800be21
 800be78:	0800bfc7 	.word	0x0800bfc7
 800be7c:	0800be21 	.word	0x0800be21
 800be80:	0800becf 	.word	0x0800becf
 800be84:	0800be21 	.word	0x0800be21
 800be88:	0800be21 	.word	0x0800be21
 800be8c:	0800bf67 	.word	0x0800bf67
 800be90:	6833      	ldr	r3, [r6, #0]
 800be92:	1d1a      	adds	r2, r3, #4
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	6032      	str	r2, [r6, #0]
 800be98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bea0:	2301      	movs	r3, #1
 800bea2:	e09d      	b.n	800bfe0 <_printf_i+0x1e8>
 800bea4:	6833      	ldr	r3, [r6, #0]
 800bea6:	6820      	ldr	r0, [r4, #0]
 800bea8:	1d19      	adds	r1, r3, #4
 800beaa:	6031      	str	r1, [r6, #0]
 800beac:	0606      	lsls	r6, r0, #24
 800beae:	d501      	bpl.n	800beb4 <_printf_i+0xbc>
 800beb0:	681d      	ldr	r5, [r3, #0]
 800beb2:	e003      	b.n	800bebc <_printf_i+0xc4>
 800beb4:	0645      	lsls	r5, r0, #25
 800beb6:	d5fb      	bpl.n	800beb0 <_printf_i+0xb8>
 800beb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bebc:	2d00      	cmp	r5, #0
 800bebe:	da03      	bge.n	800bec8 <_printf_i+0xd0>
 800bec0:	232d      	movs	r3, #45	@ 0x2d
 800bec2:	426d      	negs	r5, r5
 800bec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bec8:	4859      	ldr	r0, [pc, #356]	@ (800c030 <_printf_i+0x238>)
 800beca:	230a      	movs	r3, #10
 800becc:	e011      	b.n	800bef2 <_printf_i+0xfa>
 800bece:	6821      	ldr	r1, [r4, #0]
 800bed0:	6833      	ldr	r3, [r6, #0]
 800bed2:	0608      	lsls	r0, r1, #24
 800bed4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bed8:	d402      	bmi.n	800bee0 <_printf_i+0xe8>
 800beda:	0649      	lsls	r1, r1, #25
 800bedc:	bf48      	it	mi
 800bede:	b2ad      	uxthmi	r5, r5
 800bee0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bee2:	4853      	ldr	r0, [pc, #332]	@ (800c030 <_printf_i+0x238>)
 800bee4:	6033      	str	r3, [r6, #0]
 800bee6:	bf14      	ite	ne
 800bee8:	230a      	movne	r3, #10
 800beea:	2308      	moveq	r3, #8
 800beec:	2100      	movs	r1, #0
 800beee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bef2:	6866      	ldr	r6, [r4, #4]
 800bef4:	60a6      	str	r6, [r4, #8]
 800bef6:	2e00      	cmp	r6, #0
 800bef8:	bfa2      	ittt	ge
 800befa:	6821      	ldrge	r1, [r4, #0]
 800befc:	f021 0104 	bicge.w	r1, r1, #4
 800bf00:	6021      	strge	r1, [r4, #0]
 800bf02:	b90d      	cbnz	r5, 800bf08 <_printf_i+0x110>
 800bf04:	2e00      	cmp	r6, #0
 800bf06:	d04b      	beq.n	800bfa0 <_printf_i+0x1a8>
 800bf08:	4616      	mov	r6, r2
 800bf0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf0e:	fb03 5711 	mls	r7, r3, r1, r5
 800bf12:	5dc7      	ldrb	r7, [r0, r7]
 800bf14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf18:	462f      	mov	r7, r5
 800bf1a:	42bb      	cmp	r3, r7
 800bf1c:	460d      	mov	r5, r1
 800bf1e:	d9f4      	bls.n	800bf0a <_printf_i+0x112>
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d10b      	bne.n	800bf3c <_printf_i+0x144>
 800bf24:	6823      	ldr	r3, [r4, #0]
 800bf26:	07df      	lsls	r7, r3, #31
 800bf28:	d508      	bpl.n	800bf3c <_printf_i+0x144>
 800bf2a:	6923      	ldr	r3, [r4, #16]
 800bf2c:	6861      	ldr	r1, [r4, #4]
 800bf2e:	4299      	cmp	r1, r3
 800bf30:	bfde      	ittt	le
 800bf32:	2330      	movle	r3, #48	@ 0x30
 800bf34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf3c:	1b92      	subs	r2, r2, r6
 800bf3e:	6122      	str	r2, [r4, #16]
 800bf40:	f8cd a000 	str.w	sl, [sp]
 800bf44:	464b      	mov	r3, r9
 800bf46:	aa03      	add	r2, sp, #12
 800bf48:	4621      	mov	r1, r4
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	f7ff fee6 	bl	800bd1c <_printf_common>
 800bf50:	3001      	adds	r0, #1
 800bf52:	d14a      	bne.n	800bfea <_printf_i+0x1f2>
 800bf54:	f04f 30ff 	mov.w	r0, #4294967295
 800bf58:	b004      	add	sp, #16
 800bf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	f043 0320 	orr.w	r3, r3, #32
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	4833      	ldr	r0, [pc, #204]	@ (800c034 <_printf_i+0x23c>)
 800bf68:	2778      	movs	r7, #120	@ 0x78
 800bf6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	6831      	ldr	r1, [r6, #0]
 800bf72:	061f      	lsls	r7, r3, #24
 800bf74:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf78:	d402      	bmi.n	800bf80 <_printf_i+0x188>
 800bf7a:	065f      	lsls	r7, r3, #25
 800bf7c:	bf48      	it	mi
 800bf7e:	b2ad      	uxthmi	r5, r5
 800bf80:	6031      	str	r1, [r6, #0]
 800bf82:	07d9      	lsls	r1, r3, #31
 800bf84:	bf44      	itt	mi
 800bf86:	f043 0320 	orrmi.w	r3, r3, #32
 800bf8a:	6023      	strmi	r3, [r4, #0]
 800bf8c:	b11d      	cbz	r5, 800bf96 <_printf_i+0x19e>
 800bf8e:	2310      	movs	r3, #16
 800bf90:	e7ac      	b.n	800beec <_printf_i+0xf4>
 800bf92:	4827      	ldr	r0, [pc, #156]	@ (800c030 <_printf_i+0x238>)
 800bf94:	e7e9      	b.n	800bf6a <_printf_i+0x172>
 800bf96:	6823      	ldr	r3, [r4, #0]
 800bf98:	f023 0320 	bic.w	r3, r3, #32
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	e7f6      	b.n	800bf8e <_printf_i+0x196>
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	e7bd      	b.n	800bf20 <_printf_i+0x128>
 800bfa4:	6833      	ldr	r3, [r6, #0]
 800bfa6:	6825      	ldr	r5, [r4, #0]
 800bfa8:	6961      	ldr	r1, [r4, #20]
 800bfaa:	1d18      	adds	r0, r3, #4
 800bfac:	6030      	str	r0, [r6, #0]
 800bfae:	062e      	lsls	r6, r5, #24
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	d501      	bpl.n	800bfb8 <_printf_i+0x1c0>
 800bfb4:	6019      	str	r1, [r3, #0]
 800bfb6:	e002      	b.n	800bfbe <_printf_i+0x1c6>
 800bfb8:	0668      	lsls	r0, r5, #25
 800bfba:	d5fb      	bpl.n	800bfb4 <_printf_i+0x1bc>
 800bfbc:	8019      	strh	r1, [r3, #0]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	6123      	str	r3, [r4, #16]
 800bfc2:	4616      	mov	r6, r2
 800bfc4:	e7bc      	b.n	800bf40 <_printf_i+0x148>
 800bfc6:	6833      	ldr	r3, [r6, #0]
 800bfc8:	1d1a      	adds	r2, r3, #4
 800bfca:	6032      	str	r2, [r6, #0]
 800bfcc:	681e      	ldr	r6, [r3, #0]
 800bfce:	6862      	ldr	r2, [r4, #4]
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	f7f4 f924 	bl	8000220 <memchr>
 800bfd8:	b108      	cbz	r0, 800bfde <_printf_i+0x1e6>
 800bfda:	1b80      	subs	r0, r0, r6
 800bfdc:	6060      	str	r0, [r4, #4]
 800bfde:	6863      	ldr	r3, [r4, #4]
 800bfe0:	6123      	str	r3, [r4, #16]
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfe8:	e7aa      	b.n	800bf40 <_printf_i+0x148>
 800bfea:	6923      	ldr	r3, [r4, #16]
 800bfec:	4632      	mov	r2, r6
 800bfee:	4649      	mov	r1, r9
 800bff0:	4640      	mov	r0, r8
 800bff2:	47d0      	blx	sl
 800bff4:	3001      	adds	r0, #1
 800bff6:	d0ad      	beq.n	800bf54 <_printf_i+0x15c>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	079b      	lsls	r3, r3, #30
 800bffc:	d413      	bmi.n	800c026 <_printf_i+0x22e>
 800bffe:	68e0      	ldr	r0, [r4, #12]
 800c000:	9b03      	ldr	r3, [sp, #12]
 800c002:	4298      	cmp	r0, r3
 800c004:	bfb8      	it	lt
 800c006:	4618      	movlt	r0, r3
 800c008:	e7a6      	b.n	800bf58 <_printf_i+0x160>
 800c00a:	2301      	movs	r3, #1
 800c00c:	4632      	mov	r2, r6
 800c00e:	4649      	mov	r1, r9
 800c010:	4640      	mov	r0, r8
 800c012:	47d0      	blx	sl
 800c014:	3001      	adds	r0, #1
 800c016:	d09d      	beq.n	800bf54 <_printf_i+0x15c>
 800c018:	3501      	adds	r5, #1
 800c01a:	68e3      	ldr	r3, [r4, #12]
 800c01c:	9903      	ldr	r1, [sp, #12]
 800c01e:	1a5b      	subs	r3, r3, r1
 800c020:	42ab      	cmp	r3, r5
 800c022:	dcf2      	bgt.n	800c00a <_printf_i+0x212>
 800c024:	e7eb      	b.n	800bffe <_printf_i+0x206>
 800c026:	2500      	movs	r5, #0
 800c028:	f104 0619 	add.w	r6, r4, #25
 800c02c:	e7f5      	b.n	800c01a <_printf_i+0x222>
 800c02e:	bf00      	nop
 800c030:	0800dce2 	.word	0x0800dce2
 800c034:	0800dcf3 	.word	0x0800dcf3

0800c038 <__sflush_r>:
 800c038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c040:	0716      	lsls	r6, r2, #28
 800c042:	4605      	mov	r5, r0
 800c044:	460c      	mov	r4, r1
 800c046:	d454      	bmi.n	800c0f2 <__sflush_r+0xba>
 800c048:	684b      	ldr	r3, [r1, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dc02      	bgt.n	800c054 <__sflush_r+0x1c>
 800c04e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c050:	2b00      	cmp	r3, #0
 800c052:	dd48      	ble.n	800c0e6 <__sflush_r+0xae>
 800c054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c056:	2e00      	cmp	r6, #0
 800c058:	d045      	beq.n	800c0e6 <__sflush_r+0xae>
 800c05a:	2300      	movs	r3, #0
 800c05c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c060:	682f      	ldr	r7, [r5, #0]
 800c062:	6a21      	ldr	r1, [r4, #32]
 800c064:	602b      	str	r3, [r5, #0]
 800c066:	d030      	beq.n	800c0ca <__sflush_r+0x92>
 800c068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	0759      	lsls	r1, r3, #29
 800c06e:	d505      	bpl.n	800c07c <__sflush_r+0x44>
 800c070:	6863      	ldr	r3, [r4, #4]
 800c072:	1ad2      	subs	r2, r2, r3
 800c074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c076:	b10b      	cbz	r3, 800c07c <__sflush_r+0x44>
 800c078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c07a:	1ad2      	subs	r2, r2, r3
 800c07c:	2300      	movs	r3, #0
 800c07e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c080:	6a21      	ldr	r1, [r4, #32]
 800c082:	4628      	mov	r0, r5
 800c084:	47b0      	blx	r6
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	d106      	bne.n	800c09a <__sflush_r+0x62>
 800c08c:	6829      	ldr	r1, [r5, #0]
 800c08e:	291d      	cmp	r1, #29
 800c090:	d82b      	bhi.n	800c0ea <__sflush_r+0xb2>
 800c092:	4a2a      	ldr	r2, [pc, #168]	@ (800c13c <__sflush_r+0x104>)
 800c094:	410a      	asrs	r2, r1
 800c096:	07d6      	lsls	r6, r2, #31
 800c098:	d427      	bmi.n	800c0ea <__sflush_r+0xb2>
 800c09a:	2200      	movs	r2, #0
 800c09c:	6062      	str	r2, [r4, #4]
 800c09e:	04d9      	lsls	r1, r3, #19
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	6022      	str	r2, [r4, #0]
 800c0a4:	d504      	bpl.n	800c0b0 <__sflush_r+0x78>
 800c0a6:	1c42      	adds	r2, r0, #1
 800c0a8:	d101      	bne.n	800c0ae <__sflush_r+0x76>
 800c0aa:	682b      	ldr	r3, [r5, #0]
 800c0ac:	b903      	cbnz	r3, 800c0b0 <__sflush_r+0x78>
 800c0ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0b2:	602f      	str	r7, [r5, #0]
 800c0b4:	b1b9      	cbz	r1, 800c0e6 <__sflush_r+0xae>
 800c0b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0ba:	4299      	cmp	r1, r3
 800c0bc:	d002      	beq.n	800c0c4 <__sflush_r+0x8c>
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f7fe fbd2 	bl	800a868 <_free_r>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0c8:	e00d      	b.n	800c0e6 <__sflush_r+0xae>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	47b0      	blx	r6
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	1c50      	adds	r0, r2, #1
 800c0d4:	d1c9      	bne.n	800c06a <__sflush_r+0x32>
 800c0d6:	682b      	ldr	r3, [r5, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d0c6      	beq.n	800c06a <__sflush_r+0x32>
 800c0dc:	2b1d      	cmp	r3, #29
 800c0de:	d001      	beq.n	800c0e4 <__sflush_r+0xac>
 800c0e0:	2b16      	cmp	r3, #22
 800c0e2:	d11e      	bne.n	800c122 <__sflush_r+0xea>
 800c0e4:	602f      	str	r7, [r5, #0]
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e022      	b.n	800c130 <__sflush_r+0xf8>
 800c0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0ee:	b21b      	sxth	r3, r3
 800c0f0:	e01b      	b.n	800c12a <__sflush_r+0xf2>
 800c0f2:	690f      	ldr	r7, [r1, #16]
 800c0f4:	2f00      	cmp	r7, #0
 800c0f6:	d0f6      	beq.n	800c0e6 <__sflush_r+0xae>
 800c0f8:	0793      	lsls	r3, r2, #30
 800c0fa:	680e      	ldr	r6, [r1, #0]
 800c0fc:	bf08      	it	eq
 800c0fe:	694b      	ldreq	r3, [r1, #20]
 800c100:	600f      	str	r7, [r1, #0]
 800c102:	bf18      	it	ne
 800c104:	2300      	movne	r3, #0
 800c106:	eba6 0807 	sub.w	r8, r6, r7
 800c10a:	608b      	str	r3, [r1, #8]
 800c10c:	f1b8 0f00 	cmp.w	r8, #0
 800c110:	dde9      	ble.n	800c0e6 <__sflush_r+0xae>
 800c112:	6a21      	ldr	r1, [r4, #32]
 800c114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c116:	4643      	mov	r3, r8
 800c118:	463a      	mov	r2, r7
 800c11a:	4628      	mov	r0, r5
 800c11c:	47b0      	blx	r6
 800c11e:	2800      	cmp	r0, #0
 800c120:	dc08      	bgt.n	800c134 <__sflush_r+0xfc>
 800c122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295
 800c130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c134:	4407      	add	r7, r0
 800c136:	eba8 0800 	sub.w	r8, r8, r0
 800c13a:	e7e7      	b.n	800c10c <__sflush_r+0xd4>
 800c13c:	dfbffffe 	.word	0xdfbffffe

0800c140 <_fflush_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	690b      	ldr	r3, [r1, #16]
 800c144:	4605      	mov	r5, r0
 800c146:	460c      	mov	r4, r1
 800c148:	b913      	cbnz	r3, 800c150 <_fflush_r+0x10>
 800c14a:	2500      	movs	r5, #0
 800c14c:	4628      	mov	r0, r5
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	b118      	cbz	r0, 800c15a <_fflush_r+0x1a>
 800c152:	6a03      	ldr	r3, [r0, #32]
 800c154:	b90b      	cbnz	r3, 800c15a <_fflush_r+0x1a>
 800c156:	f7fe fa47 	bl	800a5e8 <__sinit>
 800c15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0f3      	beq.n	800c14a <_fflush_r+0xa>
 800c162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c164:	07d0      	lsls	r0, r2, #31
 800c166:	d404      	bmi.n	800c172 <_fflush_r+0x32>
 800c168:	0599      	lsls	r1, r3, #22
 800c16a:	d402      	bmi.n	800c172 <_fflush_r+0x32>
 800c16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c16e:	f7fe fb60 	bl	800a832 <__retarget_lock_acquire_recursive>
 800c172:	4628      	mov	r0, r5
 800c174:	4621      	mov	r1, r4
 800c176:	f7ff ff5f 	bl	800c038 <__sflush_r>
 800c17a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c17c:	07da      	lsls	r2, r3, #31
 800c17e:	4605      	mov	r5, r0
 800c180:	d4e4      	bmi.n	800c14c <_fflush_r+0xc>
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	059b      	lsls	r3, r3, #22
 800c186:	d4e1      	bmi.n	800c14c <_fflush_r+0xc>
 800c188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c18a:	f7fe fb53 	bl	800a834 <__retarget_lock_release_recursive>
 800c18e:	e7dd      	b.n	800c14c <_fflush_r+0xc>

0800c190 <memmove>:
 800c190:	4288      	cmp	r0, r1
 800c192:	b510      	push	{r4, lr}
 800c194:	eb01 0402 	add.w	r4, r1, r2
 800c198:	d902      	bls.n	800c1a0 <memmove+0x10>
 800c19a:	4284      	cmp	r4, r0
 800c19c:	4623      	mov	r3, r4
 800c19e:	d807      	bhi.n	800c1b0 <memmove+0x20>
 800c1a0:	1e43      	subs	r3, r0, #1
 800c1a2:	42a1      	cmp	r1, r4
 800c1a4:	d008      	beq.n	800c1b8 <memmove+0x28>
 800c1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1ae:	e7f8      	b.n	800c1a2 <memmove+0x12>
 800c1b0:	4402      	add	r2, r0
 800c1b2:	4601      	mov	r1, r0
 800c1b4:	428a      	cmp	r2, r1
 800c1b6:	d100      	bne.n	800c1ba <memmove+0x2a>
 800c1b8:	bd10      	pop	{r4, pc}
 800c1ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1c2:	e7f7      	b.n	800c1b4 <memmove+0x24>

0800c1c4 <_sbrk_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d06      	ldr	r5, [pc, #24]	@ (800c1e0 <_sbrk_r+0x1c>)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	602b      	str	r3, [r5, #0]
 800c1d0:	f7f6 fd22 	bl	8002c18 <_sbrk>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_sbrk_r+0x1a>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_sbrk_r+0x1a>
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	20001384 	.word	0x20001384

0800c1e4 <__assert_func>:
 800c1e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1e6:	4614      	mov	r4, r2
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4b09      	ldr	r3, [pc, #36]	@ (800c210 <__assert_func+0x2c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	68d8      	ldr	r0, [r3, #12]
 800c1f2:	b954      	cbnz	r4, 800c20a <__assert_func+0x26>
 800c1f4:	4b07      	ldr	r3, [pc, #28]	@ (800c214 <__assert_func+0x30>)
 800c1f6:	461c      	mov	r4, r3
 800c1f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1fc:	9100      	str	r1, [sp, #0]
 800c1fe:	462b      	mov	r3, r5
 800c200:	4905      	ldr	r1, [pc, #20]	@ (800c218 <__assert_func+0x34>)
 800c202:	f000 f857 	bl	800c2b4 <fiprintf>
 800c206:	f000 f867 	bl	800c2d8 <abort>
 800c20a:	4b04      	ldr	r3, [pc, #16]	@ (800c21c <__assert_func+0x38>)
 800c20c:	e7f4      	b.n	800c1f8 <__assert_func+0x14>
 800c20e:	bf00      	nop
 800c210:	20000190 	.word	0x20000190
 800c214:	0800dd3f 	.word	0x0800dd3f
 800c218:	0800dd11 	.word	0x0800dd11
 800c21c:	0800dd04 	.word	0x0800dd04

0800c220 <_calloc_r>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	fba1 5402 	umull	r5, r4, r1, r2
 800c226:	b93c      	cbnz	r4, 800c238 <_calloc_r+0x18>
 800c228:	4629      	mov	r1, r5
 800c22a:	f7fe fec3 	bl	800afb4 <_malloc_r>
 800c22e:	4606      	mov	r6, r0
 800c230:	b928      	cbnz	r0, 800c23e <_calloc_r+0x1e>
 800c232:	2600      	movs	r6, #0
 800c234:	4630      	mov	r0, r6
 800c236:	bd70      	pop	{r4, r5, r6, pc}
 800c238:	220c      	movs	r2, #12
 800c23a:	6002      	str	r2, [r0, #0]
 800c23c:	e7f9      	b.n	800c232 <_calloc_r+0x12>
 800c23e:	462a      	mov	r2, r5
 800c240:	4621      	mov	r1, r4
 800c242:	f7fe fa6a 	bl	800a71a <memset>
 800c246:	e7f5      	b.n	800c234 <_calloc_r+0x14>

0800c248 <malloc>:
 800c248:	4b02      	ldr	r3, [pc, #8]	@ (800c254 <malloc+0xc>)
 800c24a:	4601      	mov	r1, r0
 800c24c:	6818      	ldr	r0, [r3, #0]
 800c24e:	f7fe beb1 	b.w	800afb4 <_malloc_r>
 800c252:	bf00      	nop
 800c254:	20000190 	.word	0x20000190

0800c258 <_realloc_r>:
 800c258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25c:	4680      	mov	r8, r0
 800c25e:	4615      	mov	r5, r2
 800c260:	460c      	mov	r4, r1
 800c262:	b921      	cbnz	r1, 800c26e <_realloc_r+0x16>
 800c264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c268:	4611      	mov	r1, r2
 800c26a:	f7fe bea3 	b.w	800afb4 <_malloc_r>
 800c26e:	b92a      	cbnz	r2, 800c27c <_realloc_r+0x24>
 800c270:	f7fe fafa 	bl	800a868 <_free_r>
 800c274:	2400      	movs	r4, #0
 800c276:	4620      	mov	r0, r4
 800c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27c:	f000 f833 	bl	800c2e6 <_malloc_usable_size_r>
 800c280:	4285      	cmp	r5, r0
 800c282:	4606      	mov	r6, r0
 800c284:	d802      	bhi.n	800c28c <_realloc_r+0x34>
 800c286:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c28a:	d8f4      	bhi.n	800c276 <_realloc_r+0x1e>
 800c28c:	4629      	mov	r1, r5
 800c28e:	4640      	mov	r0, r8
 800c290:	f7fe fe90 	bl	800afb4 <_malloc_r>
 800c294:	4607      	mov	r7, r0
 800c296:	2800      	cmp	r0, #0
 800c298:	d0ec      	beq.n	800c274 <_realloc_r+0x1c>
 800c29a:	42b5      	cmp	r5, r6
 800c29c:	462a      	mov	r2, r5
 800c29e:	4621      	mov	r1, r4
 800c2a0:	bf28      	it	cs
 800c2a2:	4632      	movcs	r2, r6
 800c2a4:	f7fe fac7 	bl	800a836 <memcpy>
 800c2a8:	4621      	mov	r1, r4
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	f7fe fadc 	bl	800a868 <_free_r>
 800c2b0:	463c      	mov	r4, r7
 800c2b2:	e7e0      	b.n	800c276 <_realloc_r+0x1e>

0800c2b4 <fiprintf>:
 800c2b4:	b40e      	push	{r1, r2, r3}
 800c2b6:	b503      	push	{r0, r1, lr}
 800c2b8:	4601      	mov	r1, r0
 800c2ba:	ab03      	add	r3, sp, #12
 800c2bc:	4805      	ldr	r0, [pc, #20]	@ (800c2d4 <fiprintf+0x20>)
 800c2be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c2:	6800      	ldr	r0, [r0, #0]
 800c2c4:	9301      	str	r3, [sp, #4]
 800c2c6:	f000 f83f 	bl	800c348 <_vfiprintf_r>
 800c2ca:	b002      	add	sp, #8
 800c2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2d0:	b003      	add	sp, #12
 800c2d2:	4770      	bx	lr
 800c2d4:	20000190 	.word	0x20000190

0800c2d8 <abort>:
 800c2d8:	b508      	push	{r3, lr}
 800c2da:	2006      	movs	r0, #6
 800c2dc:	f000 fa08 	bl	800c6f0 <raise>
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	f7f6 fc21 	bl	8002b28 <_exit>

0800c2e6 <_malloc_usable_size_r>:
 800c2e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ea:	1f18      	subs	r0, r3, #4
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	bfbc      	itt	lt
 800c2f0:	580b      	ldrlt	r3, [r1, r0]
 800c2f2:	18c0      	addlt	r0, r0, r3
 800c2f4:	4770      	bx	lr

0800c2f6 <__sfputc_r>:
 800c2f6:	6893      	ldr	r3, [r2, #8]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	b410      	push	{r4}
 800c2fe:	6093      	str	r3, [r2, #8]
 800c300:	da08      	bge.n	800c314 <__sfputc_r+0x1e>
 800c302:	6994      	ldr	r4, [r2, #24]
 800c304:	42a3      	cmp	r3, r4
 800c306:	db01      	blt.n	800c30c <__sfputc_r+0x16>
 800c308:	290a      	cmp	r1, #10
 800c30a:	d103      	bne.n	800c314 <__sfputc_r+0x1e>
 800c30c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c310:	f000 b932 	b.w	800c578 <__swbuf_r>
 800c314:	6813      	ldr	r3, [r2, #0]
 800c316:	1c58      	adds	r0, r3, #1
 800c318:	6010      	str	r0, [r2, #0]
 800c31a:	7019      	strb	r1, [r3, #0]
 800c31c:	4608      	mov	r0, r1
 800c31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <__sfputs_r>:
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	4606      	mov	r6, r0
 800c328:	460f      	mov	r7, r1
 800c32a:	4614      	mov	r4, r2
 800c32c:	18d5      	adds	r5, r2, r3
 800c32e:	42ac      	cmp	r4, r5
 800c330:	d101      	bne.n	800c336 <__sfputs_r+0x12>
 800c332:	2000      	movs	r0, #0
 800c334:	e007      	b.n	800c346 <__sfputs_r+0x22>
 800c336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c33a:	463a      	mov	r2, r7
 800c33c:	4630      	mov	r0, r6
 800c33e:	f7ff ffda 	bl	800c2f6 <__sfputc_r>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	d1f3      	bne.n	800c32e <__sfputs_r+0xa>
 800c346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c348 <_vfiprintf_r>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	460d      	mov	r5, r1
 800c34e:	b09d      	sub	sp, #116	@ 0x74
 800c350:	4614      	mov	r4, r2
 800c352:	4698      	mov	r8, r3
 800c354:	4606      	mov	r6, r0
 800c356:	b118      	cbz	r0, 800c360 <_vfiprintf_r+0x18>
 800c358:	6a03      	ldr	r3, [r0, #32]
 800c35a:	b90b      	cbnz	r3, 800c360 <_vfiprintf_r+0x18>
 800c35c:	f7fe f944 	bl	800a5e8 <__sinit>
 800c360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c362:	07d9      	lsls	r1, r3, #31
 800c364:	d405      	bmi.n	800c372 <_vfiprintf_r+0x2a>
 800c366:	89ab      	ldrh	r3, [r5, #12]
 800c368:	059a      	lsls	r2, r3, #22
 800c36a:	d402      	bmi.n	800c372 <_vfiprintf_r+0x2a>
 800c36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c36e:	f7fe fa60 	bl	800a832 <__retarget_lock_acquire_recursive>
 800c372:	89ab      	ldrh	r3, [r5, #12]
 800c374:	071b      	lsls	r3, r3, #28
 800c376:	d501      	bpl.n	800c37c <_vfiprintf_r+0x34>
 800c378:	692b      	ldr	r3, [r5, #16]
 800c37a:	b99b      	cbnz	r3, 800c3a4 <_vfiprintf_r+0x5c>
 800c37c:	4629      	mov	r1, r5
 800c37e:	4630      	mov	r0, r6
 800c380:	f000 f938 	bl	800c5f4 <__swsetup_r>
 800c384:	b170      	cbz	r0, 800c3a4 <_vfiprintf_r+0x5c>
 800c386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c388:	07dc      	lsls	r4, r3, #31
 800c38a:	d504      	bpl.n	800c396 <_vfiprintf_r+0x4e>
 800c38c:	f04f 30ff 	mov.w	r0, #4294967295
 800c390:	b01d      	add	sp, #116	@ 0x74
 800c392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c396:	89ab      	ldrh	r3, [r5, #12]
 800c398:	0598      	lsls	r0, r3, #22
 800c39a:	d4f7      	bmi.n	800c38c <_vfiprintf_r+0x44>
 800c39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c39e:	f7fe fa49 	bl	800a834 <__retarget_lock_release_recursive>
 800c3a2:	e7f3      	b.n	800c38c <_vfiprintf_r+0x44>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3a8:	2320      	movs	r3, #32
 800c3aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3b2:	2330      	movs	r3, #48	@ 0x30
 800c3b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c564 <_vfiprintf_r+0x21c>
 800c3b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3bc:	f04f 0901 	mov.w	r9, #1
 800c3c0:	4623      	mov	r3, r4
 800c3c2:	469a      	mov	sl, r3
 800c3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3c8:	b10a      	cbz	r2, 800c3ce <_vfiprintf_r+0x86>
 800c3ca:	2a25      	cmp	r2, #37	@ 0x25
 800c3cc:	d1f9      	bne.n	800c3c2 <_vfiprintf_r+0x7a>
 800c3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c3d2:	d00b      	beq.n	800c3ec <_vfiprintf_r+0xa4>
 800c3d4:	465b      	mov	r3, fp
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f7ff ffa2 	bl	800c324 <__sfputs_r>
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f000 80a7 	beq.w	800c534 <_vfiprintf_r+0x1ec>
 800c3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3e8:	445a      	add	r2, fp
 800c3ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 809f 	beq.w	800c534 <_vfiprintf_r+0x1ec>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c400:	f10a 0a01 	add.w	sl, sl, #1
 800c404:	9304      	str	r3, [sp, #16]
 800c406:	9307      	str	r3, [sp, #28]
 800c408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c40c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c40e:	4654      	mov	r4, sl
 800c410:	2205      	movs	r2, #5
 800c412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c416:	4853      	ldr	r0, [pc, #332]	@ (800c564 <_vfiprintf_r+0x21c>)
 800c418:	f7f3 ff02 	bl	8000220 <memchr>
 800c41c:	9a04      	ldr	r2, [sp, #16]
 800c41e:	b9d8      	cbnz	r0, 800c458 <_vfiprintf_r+0x110>
 800c420:	06d1      	lsls	r1, r2, #27
 800c422:	bf44      	itt	mi
 800c424:	2320      	movmi	r3, #32
 800c426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c42a:	0713      	lsls	r3, r2, #28
 800c42c:	bf44      	itt	mi
 800c42e:	232b      	movmi	r3, #43	@ 0x2b
 800c430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c434:	f89a 3000 	ldrb.w	r3, [sl]
 800c438:	2b2a      	cmp	r3, #42	@ 0x2a
 800c43a:	d015      	beq.n	800c468 <_vfiprintf_r+0x120>
 800c43c:	9a07      	ldr	r2, [sp, #28]
 800c43e:	4654      	mov	r4, sl
 800c440:	2000      	movs	r0, #0
 800c442:	f04f 0c0a 	mov.w	ip, #10
 800c446:	4621      	mov	r1, r4
 800c448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c44c:	3b30      	subs	r3, #48	@ 0x30
 800c44e:	2b09      	cmp	r3, #9
 800c450:	d94b      	bls.n	800c4ea <_vfiprintf_r+0x1a2>
 800c452:	b1b0      	cbz	r0, 800c482 <_vfiprintf_r+0x13a>
 800c454:	9207      	str	r2, [sp, #28]
 800c456:	e014      	b.n	800c482 <_vfiprintf_r+0x13a>
 800c458:	eba0 0308 	sub.w	r3, r0, r8
 800c45c:	fa09 f303 	lsl.w	r3, r9, r3
 800c460:	4313      	orrs	r3, r2
 800c462:	9304      	str	r3, [sp, #16]
 800c464:	46a2      	mov	sl, r4
 800c466:	e7d2      	b.n	800c40e <_vfiprintf_r+0xc6>
 800c468:	9b03      	ldr	r3, [sp, #12]
 800c46a:	1d19      	adds	r1, r3, #4
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	9103      	str	r1, [sp, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	bfbb      	ittet	lt
 800c474:	425b      	neglt	r3, r3
 800c476:	f042 0202 	orrlt.w	r2, r2, #2
 800c47a:	9307      	strge	r3, [sp, #28]
 800c47c:	9307      	strlt	r3, [sp, #28]
 800c47e:	bfb8      	it	lt
 800c480:	9204      	strlt	r2, [sp, #16]
 800c482:	7823      	ldrb	r3, [r4, #0]
 800c484:	2b2e      	cmp	r3, #46	@ 0x2e
 800c486:	d10a      	bne.n	800c49e <_vfiprintf_r+0x156>
 800c488:	7863      	ldrb	r3, [r4, #1]
 800c48a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c48c:	d132      	bne.n	800c4f4 <_vfiprintf_r+0x1ac>
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	1d1a      	adds	r2, r3, #4
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	9203      	str	r2, [sp, #12]
 800c496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c49a:	3402      	adds	r4, #2
 800c49c:	9305      	str	r3, [sp, #20]
 800c49e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c574 <_vfiprintf_r+0x22c>
 800c4a2:	7821      	ldrb	r1, [r4, #0]
 800c4a4:	2203      	movs	r2, #3
 800c4a6:	4650      	mov	r0, sl
 800c4a8:	f7f3 feba 	bl	8000220 <memchr>
 800c4ac:	b138      	cbz	r0, 800c4be <_vfiprintf_r+0x176>
 800c4ae:	9b04      	ldr	r3, [sp, #16]
 800c4b0:	eba0 000a 	sub.w	r0, r0, sl
 800c4b4:	2240      	movs	r2, #64	@ 0x40
 800c4b6:	4082      	lsls	r2, r0
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	3401      	adds	r4, #1
 800c4bc:	9304      	str	r3, [sp, #16]
 800c4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c2:	4829      	ldr	r0, [pc, #164]	@ (800c568 <_vfiprintf_r+0x220>)
 800c4c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4c8:	2206      	movs	r2, #6
 800c4ca:	f7f3 fea9 	bl	8000220 <memchr>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d03f      	beq.n	800c552 <_vfiprintf_r+0x20a>
 800c4d2:	4b26      	ldr	r3, [pc, #152]	@ (800c56c <_vfiprintf_r+0x224>)
 800c4d4:	bb1b      	cbnz	r3, 800c51e <_vfiprintf_r+0x1d6>
 800c4d6:	9b03      	ldr	r3, [sp, #12]
 800c4d8:	3307      	adds	r3, #7
 800c4da:	f023 0307 	bic.w	r3, r3, #7
 800c4de:	3308      	adds	r3, #8
 800c4e0:	9303      	str	r3, [sp, #12]
 800c4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e4:	443b      	add	r3, r7
 800c4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4e8:	e76a      	b.n	800c3c0 <_vfiprintf_r+0x78>
 800c4ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	2001      	movs	r0, #1
 800c4f2:	e7a8      	b.n	800c446 <_vfiprintf_r+0xfe>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	3401      	adds	r4, #1
 800c4f8:	9305      	str	r3, [sp, #20]
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	f04f 0c0a 	mov.w	ip, #10
 800c500:	4620      	mov	r0, r4
 800c502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c506:	3a30      	subs	r2, #48	@ 0x30
 800c508:	2a09      	cmp	r2, #9
 800c50a:	d903      	bls.n	800c514 <_vfiprintf_r+0x1cc>
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d0c6      	beq.n	800c49e <_vfiprintf_r+0x156>
 800c510:	9105      	str	r1, [sp, #20]
 800c512:	e7c4      	b.n	800c49e <_vfiprintf_r+0x156>
 800c514:	fb0c 2101 	mla	r1, ip, r1, r2
 800c518:	4604      	mov	r4, r0
 800c51a:	2301      	movs	r3, #1
 800c51c:	e7f0      	b.n	800c500 <_vfiprintf_r+0x1b8>
 800c51e:	ab03      	add	r3, sp, #12
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	462a      	mov	r2, r5
 800c524:	4b12      	ldr	r3, [pc, #72]	@ (800c570 <_vfiprintf_r+0x228>)
 800c526:	a904      	add	r1, sp, #16
 800c528:	4630      	mov	r0, r6
 800c52a:	f3af 8000 	nop.w
 800c52e:	4607      	mov	r7, r0
 800c530:	1c78      	adds	r0, r7, #1
 800c532:	d1d6      	bne.n	800c4e2 <_vfiprintf_r+0x19a>
 800c534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c536:	07d9      	lsls	r1, r3, #31
 800c538:	d405      	bmi.n	800c546 <_vfiprintf_r+0x1fe>
 800c53a:	89ab      	ldrh	r3, [r5, #12]
 800c53c:	059a      	lsls	r2, r3, #22
 800c53e:	d402      	bmi.n	800c546 <_vfiprintf_r+0x1fe>
 800c540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c542:	f7fe f977 	bl	800a834 <__retarget_lock_release_recursive>
 800c546:	89ab      	ldrh	r3, [r5, #12]
 800c548:	065b      	lsls	r3, r3, #25
 800c54a:	f53f af1f 	bmi.w	800c38c <_vfiprintf_r+0x44>
 800c54e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c550:	e71e      	b.n	800c390 <_vfiprintf_r+0x48>
 800c552:	ab03      	add	r3, sp, #12
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	462a      	mov	r2, r5
 800c558:	4b05      	ldr	r3, [pc, #20]	@ (800c570 <_vfiprintf_r+0x228>)
 800c55a:	a904      	add	r1, sp, #16
 800c55c:	4630      	mov	r0, r6
 800c55e:	f7ff fc4b 	bl	800bdf8 <_printf_i>
 800c562:	e7e4      	b.n	800c52e <_vfiprintf_r+0x1e6>
 800c564:	0800dcd1 	.word	0x0800dcd1
 800c568:	0800dcdb 	.word	0x0800dcdb
 800c56c:	00000000 	.word	0x00000000
 800c570:	0800c325 	.word	0x0800c325
 800c574:	0800dcd7 	.word	0x0800dcd7

0800c578 <__swbuf_r>:
 800c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57a:	460e      	mov	r6, r1
 800c57c:	4614      	mov	r4, r2
 800c57e:	4605      	mov	r5, r0
 800c580:	b118      	cbz	r0, 800c58a <__swbuf_r+0x12>
 800c582:	6a03      	ldr	r3, [r0, #32]
 800c584:	b90b      	cbnz	r3, 800c58a <__swbuf_r+0x12>
 800c586:	f7fe f82f 	bl	800a5e8 <__sinit>
 800c58a:	69a3      	ldr	r3, [r4, #24]
 800c58c:	60a3      	str	r3, [r4, #8]
 800c58e:	89a3      	ldrh	r3, [r4, #12]
 800c590:	071a      	lsls	r2, r3, #28
 800c592:	d501      	bpl.n	800c598 <__swbuf_r+0x20>
 800c594:	6923      	ldr	r3, [r4, #16]
 800c596:	b943      	cbnz	r3, 800c5aa <__swbuf_r+0x32>
 800c598:	4621      	mov	r1, r4
 800c59a:	4628      	mov	r0, r5
 800c59c:	f000 f82a 	bl	800c5f4 <__swsetup_r>
 800c5a0:	b118      	cbz	r0, 800c5aa <__swbuf_r+0x32>
 800c5a2:	f04f 37ff 	mov.w	r7, #4294967295
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	6922      	ldr	r2, [r4, #16]
 800c5ae:	1a98      	subs	r0, r3, r2
 800c5b0:	6963      	ldr	r3, [r4, #20]
 800c5b2:	b2f6      	uxtb	r6, r6
 800c5b4:	4283      	cmp	r3, r0
 800c5b6:	4637      	mov	r7, r6
 800c5b8:	dc05      	bgt.n	800c5c6 <__swbuf_r+0x4e>
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f7ff fdbf 	bl	800c140 <_fflush_r>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d1ed      	bne.n	800c5a2 <__swbuf_r+0x2a>
 800c5c6:	68a3      	ldr	r3, [r4, #8]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	60a3      	str	r3, [r4, #8]
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	6022      	str	r2, [r4, #0]
 800c5d2:	701e      	strb	r6, [r3, #0]
 800c5d4:	6962      	ldr	r2, [r4, #20]
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d004      	beq.n	800c5e6 <__swbuf_r+0x6e>
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	07db      	lsls	r3, r3, #31
 800c5e0:	d5e1      	bpl.n	800c5a6 <__swbuf_r+0x2e>
 800c5e2:	2e0a      	cmp	r6, #10
 800c5e4:	d1df      	bne.n	800c5a6 <__swbuf_r+0x2e>
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	f7ff fda9 	bl	800c140 <_fflush_r>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d0d9      	beq.n	800c5a6 <__swbuf_r+0x2e>
 800c5f2:	e7d6      	b.n	800c5a2 <__swbuf_r+0x2a>

0800c5f4 <__swsetup_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	4b29      	ldr	r3, [pc, #164]	@ (800c69c <__swsetup_r+0xa8>)
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	6818      	ldr	r0, [r3, #0]
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	b118      	cbz	r0, 800c608 <__swsetup_r+0x14>
 800c600:	6a03      	ldr	r3, [r0, #32]
 800c602:	b90b      	cbnz	r3, 800c608 <__swsetup_r+0x14>
 800c604:	f7fd fff0 	bl	800a5e8 <__sinit>
 800c608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c60c:	0719      	lsls	r1, r3, #28
 800c60e:	d422      	bmi.n	800c656 <__swsetup_r+0x62>
 800c610:	06da      	lsls	r2, r3, #27
 800c612:	d407      	bmi.n	800c624 <__swsetup_r+0x30>
 800c614:	2209      	movs	r2, #9
 800c616:	602a      	str	r2, [r5, #0]
 800c618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c61c:	81a3      	strh	r3, [r4, #12]
 800c61e:	f04f 30ff 	mov.w	r0, #4294967295
 800c622:	e033      	b.n	800c68c <__swsetup_r+0x98>
 800c624:	0758      	lsls	r0, r3, #29
 800c626:	d512      	bpl.n	800c64e <__swsetup_r+0x5a>
 800c628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c62a:	b141      	cbz	r1, 800c63e <__swsetup_r+0x4a>
 800c62c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c630:	4299      	cmp	r1, r3
 800c632:	d002      	beq.n	800c63a <__swsetup_r+0x46>
 800c634:	4628      	mov	r0, r5
 800c636:	f7fe f917 	bl	800a868 <_free_r>
 800c63a:	2300      	movs	r3, #0
 800c63c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c63e:	89a3      	ldrh	r3, [r4, #12]
 800c640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c644:	81a3      	strh	r3, [r4, #12]
 800c646:	2300      	movs	r3, #0
 800c648:	6063      	str	r3, [r4, #4]
 800c64a:	6923      	ldr	r3, [r4, #16]
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	89a3      	ldrh	r3, [r4, #12]
 800c650:	f043 0308 	orr.w	r3, r3, #8
 800c654:	81a3      	strh	r3, [r4, #12]
 800c656:	6923      	ldr	r3, [r4, #16]
 800c658:	b94b      	cbnz	r3, 800c66e <__swsetup_r+0x7a>
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c664:	d003      	beq.n	800c66e <__swsetup_r+0x7a>
 800c666:	4621      	mov	r1, r4
 800c668:	4628      	mov	r0, r5
 800c66a:	f000 f883 	bl	800c774 <__smakebuf_r>
 800c66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c672:	f013 0201 	ands.w	r2, r3, #1
 800c676:	d00a      	beq.n	800c68e <__swsetup_r+0x9a>
 800c678:	2200      	movs	r2, #0
 800c67a:	60a2      	str	r2, [r4, #8]
 800c67c:	6962      	ldr	r2, [r4, #20]
 800c67e:	4252      	negs	r2, r2
 800c680:	61a2      	str	r2, [r4, #24]
 800c682:	6922      	ldr	r2, [r4, #16]
 800c684:	b942      	cbnz	r2, 800c698 <__swsetup_r+0xa4>
 800c686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c68a:	d1c5      	bne.n	800c618 <__swsetup_r+0x24>
 800c68c:	bd38      	pop	{r3, r4, r5, pc}
 800c68e:	0799      	lsls	r1, r3, #30
 800c690:	bf58      	it	pl
 800c692:	6962      	ldrpl	r2, [r4, #20]
 800c694:	60a2      	str	r2, [r4, #8]
 800c696:	e7f4      	b.n	800c682 <__swsetup_r+0x8e>
 800c698:	2000      	movs	r0, #0
 800c69a:	e7f7      	b.n	800c68c <__swsetup_r+0x98>
 800c69c:	20000190 	.word	0x20000190

0800c6a0 <_raise_r>:
 800c6a0:	291f      	cmp	r1, #31
 800c6a2:	b538      	push	{r3, r4, r5, lr}
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	d904      	bls.n	800c6b4 <_raise_r+0x14>
 800c6aa:	2316      	movs	r3, #22
 800c6ac:	6003      	str	r3, [r0, #0]
 800c6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6b6:	b112      	cbz	r2, 800c6be <_raise_r+0x1e>
 800c6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6bc:	b94b      	cbnz	r3, 800c6d2 <_raise_r+0x32>
 800c6be:	4628      	mov	r0, r5
 800c6c0:	f000 f830 	bl	800c724 <_getpid_r>
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ce:	f000 b817 	b.w	800c700 <_kill_r>
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d00a      	beq.n	800c6ec <_raise_r+0x4c>
 800c6d6:	1c59      	adds	r1, r3, #1
 800c6d8:	d103      	bne.n	800c6e2 <_raise_r+0x42>
 800c6da:	2316      	movs	r3, #22
 800c6dc:	6003      	str	r3, [r0, #0]
 800c6de:	2001      	movs	r0, #1
 800c6e0:	e7e7      	b.n	800c6b2 <_raise_r+0x12>
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	4798      	blx	r3
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e7e0      	b.n	800c6b2 <_raise_r+0x12>

0800c6f0 <raise>:
 800c6f0:	4b02      	ldr	r3, [pc, #8]	@ (800c6fc <raise+0xc>)
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	6818      	ldr	r0, [r3, #0]
 800c6f6:	f7ff bfd3 	b.w	800c6a0 <_raise_r>
 800c6fa:	bf00      	nop
 800c6fc:	20000190 	.word	0x20000190

0800c700 <_kill_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d07      	ldr	r5, [pc, #28]	@ (800c720 <_kill_r+0x20>)
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	602b      	str	r3, [r5, #0]
 800c70e:	f7f6 f9fb 	bl	8002b08 <_kill>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	d102      	bne.n	800c71c <_kill_r+0x1c>
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	b103      	cbz	r3, 800c71c <_kill_r+0x1c>
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	bd38      	pop	{r3, r4, r5, pc}
 800c71e:	bf00      	nop
 800c720:	20001384 	.word	0x20001384

0800c724 <_getpid_r>:
 800c724:	f7f6 b9e8 	b.w	8002af8 <_getpid>

0800c728 <__swhatbuf_r>:
 800c728:	b570      	push	{r4, r5, r6, lr}
 800c72a:	460c      	mov	r4, r1
 800c72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c730:	2900      	cmp	r1, #0
 800c732:	b096      	sub	sp, #88	@ 0x58
 800c734:	4615      	mov	r5, r2
 800c736:	461e      	mov	r6, r3
 800c738:	da0d      	bge.n	800c756 <__swhatbuf_r+0x2e>
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c740:	f04f 0100 	mov.w	r1, #0
 800c744:	bf14      	ite	ne
 800c746:	2340      	movne	r3, #64	@ 0x40
 800c748:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c74c:	2000      	movs	r0, #0
 800c74e:	6031      	str	r1, [r6, #0]
 800c750:	602b      	str	r3, [r5, #0]
 800c752:	b016      	add	sp, #88	@ 0x58
 800c754:	bd70      	pop	{r4, r5, r6, pc}
 800c756:	466a      	mov	r2, sp
 800c758:	f000 f848 	bl	800c7ec <_fstat_r>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	dbec      	blt.n	800c73a <__swhatbuf_r+0x12>
 800c760:	9901      	ldr	r1, [sp, #4]
 800c762:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c766:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c76a:	4259      	negs	r1, r3
 800c76c:	4159      	adcs	r1, r3
 800c76e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c772:	e7eb      	b.n	800c74c <__swhatbuf_r+0x24>

0800c774 <__smakebuf_r>:
 800c774:	898b      	ldrh	r3, [r1, #12]
 800c776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c778:	079d      	lsls	r5, r3, #30
 800c77a:	4606      	mov	r6, r0
 800c77c:	460c      	mov	r4, r1
 800c77e:	d507      	bpl.n	800c790 <__smakebuf_r+0x1c>
 800c780:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	6123      	str	r3, [r4, #16]
 800c788:	2301      	movs	r3, #1
 800c78a:	6163      	str	r3, [r4, #20]
 800c78c:	b003      	add	sp, #12
 800c78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c790:	ab01      	add	r3, sp, #4
 800c792:	466a      	mov	r2, sp
 800c794:	f7ff ffc8 	bl	800c728 <__swhatbuf_r>
 800c798:	9f00      	ldr	r7, [sp, #0]
 800c79a:	4605      	mov	r5, r0
 800c79c:	4639      	mov	r1, r7
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f7fe fc08 	bl	800afb4 <_malloc_r>
 800c7a4:	b948      	cbnz	r0, 800c7ba <__smakebuf_r+0x46>
 800c7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7aa:	059a      	lsls	r2, r3, #22
 800c7ac:	d4ee      	bmi.n	800c78c <__smakebuf_r+0x18>
 800c7ae:	f023 0303 	bic.w	r3, r3, #3
 800c7b2:	f043 0302 	orr.w	r3, r3, #2
 800c7b6:	81a3      	strh	r3, [r4, #12]
 800c7b8:	e7e2      	b.n	800c780 <__smakebuf_r+0xc>
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	6020      	str	r0, [r4, #0]
 800c7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7c2:	81a3      	strh	r3, [r4, #12]
 800c7c4:	9b01      	ldr	r3, [sp, #4]
 800c7c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c7ca:	b15b      	cbz	r3, 800c7e4 <__smakebuf_r+0x70>
 800c7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f000 f81d 	bl	800c810 <_isatty_r>
 800c7d6:	b128      	cbz	r0, 800c7e4 <__smakebuf_r+0x70>
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	f023 0303 	bic.w	r3, r3, #3
 800c7de:	f043 0301 	orr.w	r3, r3, #1
 800c7e2:	81a3      	strh	r3, [r4, #12]
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	431d      	orrs	r5, r3
 800c7e8:	81a5      	strh	r5, [r4, #12]
 800c7ea:	e7cf      	b.n	800c78c <__smakebuf_r+0x18>

0800c7ec <_fstat_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d07      	ldr	r5, [pc, #28]	@ (800c80c <_fstat_r+0x20>)
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	602b      	str	r3, [r5, #0]
 800c7fa:	f7f6 f9e5 	bl	8002bc8 <_fstat>
 800c7fe:	1c43      	adds	r3, r0, #1
 800c800:	d102      	bne.n	800c808 <_fstat_r+0x1c>
 800c802:	682b      	ldr	r3, [r5, #0]
 800c804:	b103      	cbz	r3, 800c808 <_fstat_r+0x1c>
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	bd38      	pop	{r3, r4, r5, pc}
 800c80a:	bf00      	nop
 800c80c:	20001384 	.word	0x20001384

0800c810 <_isatty_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4d06      	ldr	r5, [pc, #24]	@ (800c82c <_isatty_r+0x1c>)
 800c814:	2300      	movs	r3, #0
 800c816:	4604      	mov	r4, r0
 800c818:	4608      	mov	r0, r1
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	f7f6 f9e4 	bl	8002be8 <_isatty>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_isatty_r+0x1a>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	b103      	cbz	r3, 800c82a <_isatty_r+0x1a>
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	20001384 	.word	0x20001384

0800c830 <sin>:
 800c830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c832:	ec53 2b10 	vmov	r2, r3, d0
 800c836:	4826      	ldr	r0, [pc, #152]	@ (800c8d0 <sin+0xa0>)
 800c838:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c83c:	4281      	cmp	r1, r0
 800c83e:	d807      	bhi.n	800c850 <sin+0x20>
 800c840:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c8c8 <sin+0x98>
 800c844:	2000      	movs	r0, #0
 800c846:	b005      	add	sp, #20
 800c848:	f85d eb04 	ldr.w	lr, [sp], #4
 800c84c:	f000 b90c 	b.w	800ca68 <__kernel_sin>
 800c850:	4820      	ldr	r0, [pc, #128]	@ (800c8d4 <sin+0xa4>)
 800c852:	4281      	cmp	r1, r0
 800c854:	d908      	bls.n	800c868 <sin+0x38>
 800c856:	4610      	mov	r0, r2
 800c858:	4619      	mov	r1, r3
 800c85a:	f7f3 fd35 	bl	80002c8 <__aeabi_dsub>
 800c85e:	ec41 0b10 	vmov	d0, r0, r1
 800c862:	b005      	add	sp, #20
 800c864:	f85d fb04 	ldr.w	pc, [sp], #4
 800c868:	4668      	mov	r0, sp
 800c86a:	f000 f9b9 	bl	800cbe0 <__ieee754_rem_pio2>
 800c86e:	f000 0003 	and.w	r0, r0, #3
 800c872:	2801      	cmp	r0, #1
 800c874:	d00c      	beq.n	800c890 <sin+0x60>
 800c876:	2802      	cmp	r0, #2
 800c878:	d011      	beq.n	800c89e <sin+0x6e>
 800c87a:	b9e8      	cbnz	r0, 800c8b8 <sin+0x88>
 800c87c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c880:	ed9d 0b00 	vldr	d0, [sp]
 800c884:	2001      	movs	r0, #1
 800c886:	f000 f8ef 	bl	800ca68 <__kernel_sin>
 800c88a:	ec51 0b10 	vmov	r0, r1, d0
 800c88e:	e7e6      	b.n	800c85e <sin+0x2e>
 800c890:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c894:	ed9d 0b00 	vldr	d0, [sp]
 800c898:	f000 f81e 	bl	800c8d8 <__kernel_cos>
 800c89c:	e7f5      	b.n	800c88a <sin+0x5a>
 800c89e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c8a2:	ed9d 0b00 	vldr	d0, [sp]
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	f000 f8de 	bl	800ca68 <__kernel_sin>
 800c8ac:	ec53 2b10 	vmov	r2, r3, d0
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c8b6:	e7d2      	b.n	800c85e <sin+0x2e>
 800c8b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c8bc:	ed9d 0b00 	vldr	d0, [sp]
 800c8c0:	f000 f80a 	bl	800c8d8 <__kernel_cos>
 800c8c4:	e7f2      	b.n	800c8ac <sin+0x7c>
 800c8c6:	bf00      	nop
	...
 800c8d0:	3fe921fb 	.word	0x3fe921fb
 800c8d4:	7fefffff 	.word	0x7fefffff

0800c8d8 <__kernel_cos>:
 800c8d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	ec57 6b10 	vmov	r6, r7, d0
 800c8e0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c8e4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c8e8:	ed8d 1b00 	vstr	d1, [sp]
 800c8ec:	d206      	bcs.n	800c8fc <__kernel_cos+0x24>
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	4639      	mov	r1, r7
 800c8f2:	f7f4 f93b 	bl	8000b6c <__aeabi_d2iz>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	f000 8088 	beq.w	800ca0c <__kernel_cos+0x134>
 800c8fc:	4632      	mov	r2, r6
 800c8fe:	463b      	mov	r3, r7
 800c900:	4630      	mov	r0, r6
 800c902:	4639      	mov	r1, r7
 800c904:	f7f3 fe98 	bl	8000638 <__aeabi_dmul>
 800c908:	4b51      	ldr	r3, [pc, #324]	@ (800ca50 <__kernel_cos+0x178>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	4604      	mov	r4, r0
 800c90e:	460d      	mov	r5, r1
 800c910:	f7f3 fe92 	bl	8000638 <__aeabi_dmul>
 800c914:	a340      	add	r3, pc, #256	@ (adr r3, 800ca18 <__kernel_cos+0x140>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	4682      	mov	sl, r0
 800c91c:	468b      	mov	fp, r1
 800c91e:	4620      	mov	r0, r4
 800c920:	4629      	mov	r1, r5
 800c922:	f7f3 fe89 	bl	8000638 <__aeabi_dmul>
 800c926:	a33e      	add	r3, pc, #248	@ (adr r3, 800ca20 <__kernel_cos+0x148>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f7f3 fcce 	bl	80002cc <__adddf3>
 800c930:	4622      	mov	r2, r4
 800c932:	462b      	mov	r3, r5
 800c934:	f7f3 fe80 	bl	8000638 <__aeabi_dmul>
 800c938:	a33b      	add	r3, pc, #236	@ (adr r3, 800ca28 <__kernel_cos+0x150>)
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	f7f3 fcc3 	bl	80002c8 <__aeabi_dsub>
 800c942:	4622      	mov	r2, r4
 800c944:	462b      	mov	r3, r5
 800c946:	f7f3 fe77 	bl	8000638 <__aeabi_dmul>
 800c94a:	a339      	add	r3, pc, #228	@ (adr r3, 800ca30 <__kernel_cos+0x158>)
 800c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c950:	f7f3 fcbc 	bl	80002cc <__adddf3>
 800c954:	4622      	mov	r2, r4
 800c956:	462b      	mov	r3, r5
 800c958:	f7f3 fe6e 	bl	8000638 <__aeabi_dmul>
 800c95c:	a336      	add	r3, pc, #216	@ (adr r3, 800ca38 <__kernel_cos+0x160>)
 800c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c962:	f7f3 fcb1 	bl	80002c8 <__aeabi_dsub>
 800c966:	4622      	mov	r2, r4
 800c968:	462b      	mov	r3, r5
 800c96a:	f7f3 fe65 	bl	8000638 <__aeabi_dmul>
 800c96e:	a334      	add	r3, pc, #208	@ (adr r3, 800ca40 <__kernel_cos+0x168>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	f7f3 fcaa 	bl	80002cc <__adddf3>
 800c978:	4622      	mov	r2, r4
 800c97a:	462b      	mov	r3, r5
 800c97c:	f7f3 fe5c 	bl	8000638 <__aeabi_dmul>
 800c980:	4622      	mov	r2, r4
 800c982:	462b      	mov	r3, r5
 800c984:	f7f3 fe58 	bl	8000638 <__aeabi_dmul>
 800c988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c98c:	4604      	mov	r4, r0
 800c98e:	460d      	mov	r5, r1
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	f7f3 fe50 	bl	8000638 <__aeabi_dmul>
 800c998:	460b      	mov	r3, r1
 800c99a:	4602      	mov	r2, r0
 800c99c:	4629      	mov	r1, r5
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f7f3 fc92 	bl	80002c8 <__aeabi_dsub>
 800c9a4:	4b2b      	ldr	r3, [pc, #172]	@ (800ca54 <__kernel_cos+0x17c>)
 800c9a6:	4598      	cmp	r8, r3
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	460f      	mov	r7, r1
 800c9ac:	d810      	bhi.n	800c9d0 <__kernel_cos+0xf8>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	4650      	mov	r0, sl
 800c9b4:	4659      	mov	r1, fp
 800c9b6:	f7f3 fc87 	bl	80002c8 <__aeabi_dsub>
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4926      	ldr	r1, [pc, #152]	@ (800ca58 <__kernel_cos+0x180>)
 800c9be:	4602      	mov	r2, r0
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	f7f3 fc81 	bl	80002c8 <__aeabi_dsub>
 800c9c6:	ec41 0b10 	vmov	d0, r0, r1
 800c9ca:	b003      	add	sp, #12
 800c9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d0:	4b22      	ldr	r3, [pc, #136]	@ (800ca5c <__kernel_cos+0x184>)
 800c9d2:	4921      	ldr	r1, [pc, #132]	@ (800ca58 <__kernel_cos+0x180>)
 800c9d4:	4598      	cmp	r8, r3
 800c9d6:	bf8c      	ite	hi
 800c9d8:	4d21      	ldrhi	r5, [pc, #132]	@ (800ca60 <__kernel_cos+0x188>)
 800c9da:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c9de:	2400      	movs	r4, #0
 800c9e0:	4622      	mov	r2, r4
 800c9e2:	462b      	mov	r3, r5
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	f7f3 fc6f 	bl	80002c8 <__aeabi_dsub>
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	4680      	mov	r8, r0
 800c9ee:	4689      	mov	r9, r1
 800c9f0:	462b      	mov	r3, r5
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	4659      	mov	r1, fp
 800c9f6:	f7f3 fc67 	bl	80002c8 <__aeabi_dsub>
 800c9fa:	4632      	mov	r2, r6
 800c9fc:	463b      	mov	r3, r7
 800c9fe:	f7f3 fc63 	bl	80002c8 <__aeabi_dsub>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4640      	mov	r0, r8
 800ca08:	4649      	mov	r1, r9
 800ca0a:	e7da      	b.n	800c9c2 <__kernel_cos+0xea>
 800ca0c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800ca48 <__kernel_cos+0x170>
 800ca10:	e7db      	b.n	800c9ca <__kernel_cos+0xf2>
 800ca12:	bf00      	nop
 800ca14:	f3af 8000 	nop.w
 800ca18:	be8838d4 	.word	0xbe8838d4
 800ca1c:	bda8fae9 	.word	0xbda8fae9
 800ca20:	bdb4b1c4 	.word	0xbdb4b1c4
 800ca24:	3e21ee9e 	.word	0x3e21ee9e
 800ca28:	809c52ad 	.word	0x809c52ad
 800ca2c:	3e927e4f 	.word	0x3e927e4f
 800ca30:	19cb1590 	.word	0x19cb1590
 800ca34:	3efa01a0 	.word	0x3efa01a0
 800ca38:	16c15177 	.word	0x16c15177
 800ca3c:	3f56c16c 	.word	0x3f56c16c
 800ca40:	5555554c 	.word	0x5555554c
 800ca44:	3fa55555 	.word	0x3fa55555
 800ca48:	00000000 	.word	0x00000000
 800ca4c:	3ff00000 	.word	0x3ff00000
 800ca50:	3fe00000 	.word	0x3fe00000
 800ca54:	3fd33332 	.word	0x3fd33332
 800ca58:	3ff00000 	.word	0x3ff00000
 800ca5c:	3fe90000 	.word	0x3fe90000
 800ca60:	3fd20000 	.word	0x3fd20000
 800ca64:	00000000 	.word	0x00000000

0800ca68 <__kernel_sin>:
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	ec55 4b10 	vmov	r4, r5, d0
 800ca70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ca74:	b085      	sub	sp, #20
 800ca76:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ca7a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ca7e:	4680      	mov	r8, r0
 800ca80:	d205      	bcs.n	800ca8e <__kernel_sin+0x26>
 800ca82:	4620      	mov	r0, r4
 800ca84:	4629      	mov	r1, r5
 800ca86:	f7f4 f871 	bl	8000b6c <__aeabi_d2iz>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d052      	beq.n	800cb34 <__kernel_sin+0xcc>
 800ca8e:	4622      	mov	r2, r4
 800ca90:	462b      	mov	r3, r5
 800ca92:	4620      	mov	r0, r4
 800ca94:	4629      	mov	r1, r5
 800ca96:	f7f3 fdcf 	bl	8000638 <__aeabi_dmul>
 800ca9a:	4682      	mov	sl, r0
 800ca9c:	468b      	mov	fp, r1
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4620      	mov	r0, r4
 800caa4:	4629      	mov	r1, r5
 800caa6:	f7f3 fdc7 	bl	8000638 <__aeabi_dmul>
 800caaa:	a342      	add	r3, pc, #264	@ (adr r3, 800cbb4 <__kernel_sin+0x14c>)
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	e9cd 0100 	strd	r0, r1, [sp]
 800cab4:	4650      	mov	r0, sl
 800cab6:	4659      	mov	r1, fp
 800cab8:	f7f3 fdbe 	bl	8000638 <__aeabi_dmul>
 800cabc:	a33f      	add	r3, pc, #252	@ (adr r3, 800cbbc <__kernel_sin+0x154>)
 800cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac2:	f7f3 fc01 	bl	80002c8 <__aeabi_dsub>
 800cac6:	4652      	mov	r2, sl
 800cac8:	465b      	mov	r3, fp
 800caca:	f7f3 fdb5 	bl	8000638 <__aeabi_dmul>
 800cace:	a33d      	add	r3, pc, #244	@ (adr r3, 800cbc4 <__kernel_sin+0x15c>)
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	f7f3 fbfa 	bl	80002cc <__adddf3>
 800cad8:	4652      	mov	r2, sl
 800cada:	465b      	mov	r3, fp
 800cadc:	f7f3 fdac 	bl	8000638 <__aeabi_dmul>
 800cae0:	a33a      	add	r3, pc, #232	@ (adr r3, 800cbcc <__kernel_sin+0x164>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	f7f3 fbef 	bl	80002c8 <__aeabi_dsub>
 800caea:	4652      	mov	r2, sl
 800caec:	465b      	mov	r3, fp
 800caee:	f7f3 fda3 	bl	8000638 <__aeabi_dmul>
 800caf2:	a338      	add	r3, pc, #224	@ (adr r3, 800cbd4 <__kernel_sin+0x16c>)
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	f7f3 fbe8 	bl	80002cc <__adddf3>
 800cafc:	4606      	mov	r6, r0
 800cafe:	460f      	mov	r7, r1
 800cb00:	f1b8 0f00 	cmp.w	r8, #0
 800cb04:	d11b      	bne.n	800cb3e <__kernel_sin+0xd6>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4650      	mov	r0, sl
 800cb0c:	4659      	mov	r1, fp
 800cb0e:	f7f3 fd93 	bl	8000638 <__aeabi_dmul>
 800cb12:	a325      	add	r3, pc, #148	@ (adr r3, 800cba8 <__kernel_sin+0x140>)
 800cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb18:	f7f3 fbd6 	bl	80002c8 <__aeabi_dsub>
 800cb1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb20:	f7f3 fd8a 	bl	8000638 <__aeabi_dmul>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4620      	mov	r0, r4
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	f7f3 fbce 	bl	80002cc <__adddf3>
 800cb30:	4604      	mov	r4, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	ec45 4b10 	vmov	d0, r4, r5
 800cb38:	b005      	add	sp, #20
 800cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb42:	4b1b      	ldr	r3, [pc, #108]	@ (800cbb0 <__kernel_sin+0x148>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	f7f3 fd77 	bl	8000638 <__aeabi_dmul>
 800cb4a:	4632      	mov	r2, r6
 800cb4c:	4680      	mov	r8, r0
 800cb4e:	4689      	mov	r9, r1
 800cb50:	463b      	mov	r3, r7
 800cb52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb56:	f7f3 fd6f 	bl	8000638 <__aeabi_dmul>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	4640      	mov	r0, r8
 800cb60:	4649      	mov	r1, r9
 800cb62:	f7f3 fbb1 	bl	80002c8 <__aeabi_dsub>
 800cb66:	4652      	mov	r2, sl
 800cb68:	465b      	mov	r3, fp
 800cb6a:	f7f3 fd65 	bl	8000638 <__aeabi_dmul>
 800cb6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb72:	f7f3 fba9 	bl	80002c8 <__aeabi_dsub>
 800cb76:	a30c      	add	r3, pc, #48	@ (adr r3, 800cba8 <__kernel_sin+0x140>)
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	4606      	mov	r6, r0
 800cb7e:	460f      	mov	r7, r1
 800cb80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb84:	f7f3 fd58 	bl	8000638 <__aeabi_dmul>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	4639      	mov	r1, r7
 800cb90:	f7f3 fb9c 	bl	80002cc <__adddf3>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4620      	mov	r0, r4
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	f7f3 fb94 	bl	80002c8 <__aeabi_dsub>
 800cba0:	e7c6      	b.n	800cb30 <__kernel_sin+0xc8>
 800cba2:	bf00      	nop
 800cba4:	f3af 8000 	nop.w
 800cba8:	55555549 	.word	0x55555549
 800cbac:	3fc55555 	.word	0x3fc55555
 800cbb0:	3fe00000 	.word	0x3fe00000
 800cbb4:	5acfd57c 	.word	0x5acfd57c
 800cbb8:	3de5d93a 	.word	0x3de5d93a
 800cbbc:	8a2b9ceb 	.word	0x8a2b9ceb
 800cbc0:	3e5ae5e6 	.word	0x3e5ae5e6
 800cbc4:	57b1fe7d 	.word	0x57b1fe7d
 800cbc8:	3ec71de3 	.word	0x3ec71de3
 800cbcc:	19c161d5 	.word	0x19c161d5
 800cbd0:	3f2a01a0 	.word	0x3f2a01a0
 800cbd4:	1110f8a6 	.word	0x1110f8a6
 800cbd8:	3f811111 	.word	0x3f811111
 800cbdc:	00000000 	.word	0x00000000

0800cbe0 <__ieee754_rem_pio2>:
 800cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	ec57 6b10 	vmov	r6, r7, d0
 800cbe8:	4bc5      	ldr	r3, [pc, #788]	@ (800cf00 <__ieee754_rem_pio2+0x320>)
 800cbea:	b08d      	sub	sp, #52	@ 0x34
 800cbec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cbf0:	4598      	cmp	r8, r3
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	9704      	str	r7, [sp, #16]
 800cbf6:	d807      	bhi.n	800cc08 <__ieee754_rem_pio2+0x28>
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	ed80 0b00 	vstr	d0, [r0]
 800cc00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cc04:	2500      	movs	r5, #0
 800cc06:	e028      	b.n	800cc5a <__ieee754_rem_pio2+0x7a>
 800cc08:	4bbe      	ldr	r3, [pc, #760]	@ (800cf04 <__ieee754_rem_pio2+0x324>)
 800cc0a:	4598      	cmp	r8, r3
 800cc0c:	d878      	bhi.n	800cd00 <__ieee754_rem_pio2+0x120>
 800cc0e:	9b04      	ldr	r3, [sp, #16]
 800cc10:	4dbd      	ldr	r5, [pc, #756]	@ (800cf08 <__ieee754_rem_pio2+0x328>)
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	4630      	mov	r0, r6
 800cc16:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cec8 <__ieee754_rem_pio2+0x2e8>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	dd38      	ble.n	800cc92 <__ieee754_rem_pio2+0xb2>
 800cc20:	f7f3 fb52 	bl	80002c8 <__aeabi_dsub>
 800cc24:	45a8      	cmp	r8, r5
 800cc26:	4606      	mov	r6, r0
 800cc28:	460f      	mov	r7, r1
 800cc2a:	d01a      	beq.n	800cc62 <__ieee754_rem_pio2+0x82>
 800cc2c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ced0 <__ieee754_rem_pio2+0x2f0>)
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	f7f3 fb49 	bl	80002c8 <__aeabi_dsub>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4680      	mov	r8, r0
 800cc3c:	4689      	mov	r9, r1
 800cc3e:	4630      	mov	r0, r6
 800cc40:	4639      	mov	r1, r7
 800cc42:	f7f3 fb41 	bl	80002c8 <__aeabi_dsub>
 800cc46:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ced0 <__ieee754_rem_pio2+0x2f0>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	f7f3 fb3c 	bl	80002c8 <__aeabi_dsub>
 800cc50:	e9c4 8900 	strd	r8, r9, [r4]
 800cc54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cc58:	2501      	movs	r5, #1
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	b00d      	add	sp, #52	@ 0x34
 800cc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc62:	a39d      	add	r3, pc, #628	@ (adr r3, 800ced8 <__ieee754_rem_pio2+0x2f8>)
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	f7f3 fb2e 	bl	80002c8 <__aeabi_dsub>
 800cc6c:	a39c      	add	r3, pc, #624	@ (adr r3, 800cee0 <__ieee754_rem_pio2+0x300>)
 800cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc72:	4606      	mov	r6, r0
 800cc74:	460f      	mov	r7, r1
 800cc76:	f7f3 fb27 	bl	80002c8 <__aeabi_dsub>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	4680      	mov	r8, r0
 800cc80:	4689      	mov	r9, r1
 800cc82:	4630      	mov	r0, r6
 800cc84:	4639      	mov	r1, r7
 800cc86:	f7f3 fb1f 	bl	80002c8 <__aeabi_dsub>
 800cc8a:	a395      	add	r3, pc, #596	@ (adr r3, 800cee0 <__ieee754_rem_pio2+0x300>)
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	e7dc      	b.n	800cc4c <__ieee754_rem_pio2+0x6c>
 800cc92:	f7f3 fb1b 	bl	80002cc <__adddf3>
 800cc96:	45a8      	cmp	r8, r5
 800cc98:	4606      	mov	r6, r0
 800cc9a:	460f      	mov	r7, r1
 800cc9c:	d018      	beq.n	800ccd0 <__ieee754_rem_pio2+0xf0>
 800cc9e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ced0 <__ieee754_rem_pio2+0x2f0>)
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	f7f3 fb12 	bl	80002cc <__adddf3>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4680      	mov	r8, r0
 800ccae:	4689      	mov	r9, r1
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	f7f3 fb08 	bl	80002c8 <__aeabi_dsub>
 800ccb8:	a385      	add	r3, pc, #532	@ (adr r3, 800ced0 <__ieee754_rem_pio2+0x2f0>)
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fb05 	bl	80002cc <__adddf3>
 800ccc2:	f04f 35ff 	mov.w	r5, #4294967295
 800ccc6:	e9c4 8900 	strd	r8, r9, [r4]
 800ccca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ccce:	e7c4      	b.n	800cc5a <__ieee754_rem_pio2+0x7a>
 800ccd0:	a381      	add	r3, pc, #516	@ (adr r3, 800ced8 <__ieee754_rem_pio2+0x2f8>)
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	f7f3 faf9 	bl	80002cc <__adddf3>
 800ccda:	a381      	add	r3, pc, #516	@ (adr r3, 800cee0 <__ieee754_rem_pio2+0x300>)
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	4606      	mov	r6, r0
 800cce2:	460f      	mov	r7, r1
 800cce4:	f7f3 faf2 	bl	80002cc <__adddf3>
 800cce8:	4602      	mov	r2, r0
 800ccea:	460b      	mov	r3, r1
 800ccec:	4680      	mov	r8, r0
 800ccee:	4689      	mov	r9, r1
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	f7f3 fae8 	bl	80002c8 <__aeabi_dsub>
 800ccf8:	a379      	add	r3, pc, #484	@ (adr r3, 800cee0 <__ieee754_rem_pio2+0x300>)
 800ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfe:	e7de      	b.n	800ccbe <__ieee754_rem_pio2+0xde>
 800cd00:	4b82      	ldr	r3, [pc, #520]	@ (800cf0c <__ieee754_rem_pio2+0x32c>)
 800cd02:	4598      	cmp	r8, r3
 800cd04:	f200 80d1 	bhi.w	800ceaa <__ieee754_rem_pio2+0x2ca>
 800cd08:	f000 f966 	bl	800cfd8 <fabs>
 800cd0c:	ec57 6b10 	vmov	r6, r7, d0
 800cd10:	a375      	add	r3, pc, #468	@ (adr r3, 800cee8 <__ieee754_rem_pio2+0x308>)
 800cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd16:	4630      	mov	r0, r6
 800cd18:	4639      	mov	r1, r7
 800cd1a:	f7f3 fc8d 	bl	8000638 <__aeabi_dmul>
 800cd1e:	4b7c      	ldr	r3, [pc, #496]	@ (800cf10 <__ieee754_rem_pio2+0x330>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	f7f3 fad3 	bl	80002cc <__adddf3>
 800cd26:	f7f3 ff21 	bl	8000b6c <__aeabi_d2iz>
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	f7f3 fc1a 	bl	8000564 <__aeabi_i2d>
 800cd30:	4602      	mov	r2, r0
 800cd32:	460b      	mov	r3, r1
 800cd34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd38:	a363      	add	r3, pc, #396	@ (adr r3, 800cec8 <__ieee754_rem_pio2+0x2e8>)
 800cd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3e:	f7f3 fc7b 	bl	8000638 <__aeabi_dmul>
 800cd42:	4602      	mov	r2, r0
 800cd44:	460b      	mov	r3, r1
 800cd46:	4630      	mov	r0, r6
 800cd48:	4639      	mov	r1, r7
 800cd4a:	f7f3 fabd 	bl	80002c8 <__aeabi_dsub>
 800cd4e:	a360      	add	r3, pc, #384	@ (adr r3, 800ced0 <__ieee754_rem_pio2+0x2f0>)
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	4682      	mov	sl, r0
 800cd56:	468b      	mov	fp, r1
 800cd58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd5c:	f7f3 fc6c 	bl	8000638 <__aeabi_dmul>
 800cd60:	2d1f      	cmp	r5, #31
 800cd62:	4606      	mov	r6, r0
 800cd64:	460f      	mov	r7, r1
 800cd66:	dc0c      	bgt.n	800cd82 <__ieee754_rem_pio2+0x1a2>
 800cd68:	4b6a      	ldr	r3, [pc, #424]	@ (800cf14 <__ieee754_rem_pio2+0x334>)
 800cd6a:	1e6a      	subs	r2, r5, #1
 800cd6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd70:	4543      	cmp	r3, r8
 800cd72:	d006      	beq.n	800cd82 <__ieee754_rem_pio2+0x1a2>
 800cd74:	4632      	mov	r2, r6
 800cd76:	463b      	mov	r3, r7
 800cd78:	4650      	mov	r0, sl
 800cd7a:	4659      	mov	r1, fp
 800cd7c:	f7f3 faa4 	bl	80002c8 <__aeabi_dsub>
 800cd80:	e00e      	b.n	800cda0 <__ieee754_rem_pio2+0x1c0>
 800cd82:	463b      	mov	r3, r7
 800cd84:	4632      	mov	r2, r6
 800cd86:	4650      	mov	r0, sl
 800cd88:	4659      	mov	r1, fp
 800cd8a:	f7f3 fa9d 	bl	80002c8 <__aeabi_dsub>
 800cd8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cd92:	9305      	str	r3, [sp, #20]
 800cd94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd98:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800cd9c:	2b10      	cmp	r3, #16
 800cd9e:	dc02      	bgt.n	800cda6 <__ieee754_rem_pio2+0x1c6>
 800cda0:	e9c4 0100 	strd	r0, r1, [r4]
 800cda4:	e039      	b.n	800ce1a <__ieee754_rem_pio2+0x23a>
 800cda6:	a34c      	add	r3, pc, #304	@ (adr r3, 800ced8 <__ieee754_rem_pio2+0x2f8>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdb0:	f7f3 fc42 	bl	8000638 <__aeabi_dmul>
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	460f      	mov	r7, r1
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4650      	mov	r0, sl
 800cdbe:	4659      	mov	r1, fp
 800cdc0:	f7f3 fa82 	bl	80002c8 <__aeabi_dsub>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4680      	mov	r8, r0
 800cdca:	4689      	mov	r9, r1
 800cdcc:	4650      	mov	r0, sl
 800cdce:	4659      	mov	r1, fp
 800cdd0:	f7f3 fa7a 	bl	80002c8 <__aeabi_dsub>
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	f7f3 fa76 	bl	80002c8 <__aeabi_dsub>
 800cddc:	a340      	add	r3, pc, #256	@ (adr r3, 800cee0 <__ieee754_rem_pio2+0x300>)
 800cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde2:	4606      	mov	r6, r0
 800cde4:	460f      	mov	r7, r1
 800cde6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdea:	f7f3 fc25 	bl	8000638 <__aeabi_dmul>
 800cdee:	4632      	mov	r2, r6
 800cdf0:	463b      	mov	r3, r7
 800cdf2:	f7f3 fa69 	bl	80002c8 <__aeabi_dsub>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	4640      	mov	r0, r8
 800ce00:	4649      	mov	r1, r9
 800ce02:	f7f3 fa61 	bl	80002c8 <__aeabi_dsub>
 800ce06:	9a05      	ldr	r2, [sp, #20]
 800ce08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	2b31      	cmp	r3, #49	@ 0x31
 800ce10:	dc20      	bgt.n	800ce54 <__ieee754_rem_pio2+0x274>
 800ce12:	e9c4 0100 	strd	r0, r1, [r4]
 800ce16:	46c2      	mov	sl, r8
 800ce18:	46cb      	mov	fp, r9
 800ce1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ce1e:	4650      	mov	r0, sl
 800ce20:	4642      	mov	r2, r8
 800ce22:	464b      	mov	r3, r9
 800ce24:	4659      	mov	r1, fp
 800ce26:	f7f3 fa4f 	bl	80002c8 <__aeabi_dsub>
 800ce2a:	463b      	mov	r3, r7
 800ce2c:	4632      	mov	r2, r6
 800ce2e:	f7f3 fa4b 	bl	80002c8 <__aeabi_dsub>
 800ce32:	9b04      	ldr	r3, [sp, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ce3a:	f6bf af0e 	bge.w	800cc5a <__ieee754_rem_pio2+0x7a>
 800ce3e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ce42:	6063      	str	r3, [r4, #4]
 800ce44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ce48:	f8c4 8000 	str.w	r8, [r4]
 800ce4c:	60a0      	str	r0, [r4, #8]
 800ce4e:	60e3      	str	r3, [r4, #12]
 800ce50:	426d      	negs	r5, r5
 800ce52:	e702      	b.n	800cc5a <__ieee754_rem_pio2+0x7a>
 800ce54:	a326      	add	r3, pc, #152	@ (adr r3, 800cef0 <__ieee754_rem_pio2+0x310>)
 800ce56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce5e:	f7f3 fbeb 	bl	8000638 <__aeabi_dmul>
 800ce62:	4606      	mov	r6, r0
 800ce64:	460f      	mov	r7, r1
 800ce66:	4602      	mov	r2, r0
 800ce68:	460b      	mov	r3, r1
 800ce6a:	4640      	mov	r0, r8
 800ce6c:	4649      	mov	r1, r9
 800ce6e:	f7f3 fa2b 	bl	80002c8 <__aeabi_dsub>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4682      	mov	sl, r0
 800ce78:	468b      	mov	fp, r1
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	4649      	mov	r1, r9
 800ce7e:	f7f3 fa23 	bl	80002c8 <__aeabi_dsub>
 800ce82:	4632      	mov	r2, r6
 800ce84:	463b      	mov	r3, r7
 800ce86:	f7f3 fa1f 	bl	80002c8 <__aeabi_dsub>
 800ce8a:	a31b      	add	r3, pc, #108	@ (adr r3, 800cef8 <__ieee754_rem_pio2+0x318>)
 800ce8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce90:	4606      	mov	r6, r0
 800ce92:	460f      	mov	r7, r1
 800ce94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce98:	f7f3 fbce 	bl	8000638 <__aeabi_dmul>
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	463b      	mov	r3, r7
 800cea0:	f7f3 fa12 	bl	80002c8 <__aeabi_dsub>
 800cea4:	4606      	mov	r6, r0
 800cea6:	460f      	mov	r7, r1
 800cea8:	e764      	b.n	800cd74 <__ieee754_rem_pio2+0x194>
 800ceaa:	4b1b      	ldr	r3, [pc, #108]	@ (800cf18 <__ieee754_rem_pio2+0x338>)
 800ceac:	4598      	cmp	r8, r3
 800ceae:	d935      	bls.n	800cf1c <__ieee754_rem_pio2+0x33c>
 800ceb0:	4632      	mov	r2, r6
 800ceb2:	463b      	mov	r3, r7
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	f7f3 fa06 	bl	80002c8 <__aeabi_dsub>
 800cebc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cec0:	e9c4 0100 	strd	r0, r1, [r4]
 800cec4:	e69e      	b.n	800cc04 <__ieee754_rem_pio2+0x24>
 800cec6:	bf00      	nop
 800cec8:	54400000 	.word	0x54400000
 800cecc:	3ff921fb 	.word	0x3ff921fb
 800ced0:	1a626331 	.word	0x1a626331
 800ced4:	3dd0b461 	.word	0x3dd0b461
 800ced8:	1a600000 	.word	0x1a600000
 800cedc:	3dd0b461 	.word	0x3dd0b461
 800cee0:	2e037073 	.word	0x2e037073
 800cee4:	3ba3198a 	.word	0x3ba3198a
 800cee8:	6dc9c883 	.word	0x6dc9c883
 800ceec:	3fe45f30 	.word	0x3fe45f30
 800cef0:	2e000000 	.word	0x2e000000
 800cef4:	3ba3198a 	.word	0x3ba3198a
 800cef8:	252049c1 	.word	0x252049c1
 800cefc:	397b839a 	.word	0x397b839a
 800cf00:	3fe921fb 	.word	0x3fe921fb
 800cf04:	4002d97b 	.word	0x4002d97b
 800cf08:	3ff921fb 	.word	0x3ff921fb
 800cf0c:	413921fb 	.word	0x413921fb
 800cf10:	3fe00000 	.word	0x3fe00000
 800cf14:	0800dd40 	.word	0x0800dd40
 800cf18:	7fefffff 	.word	0x7fefffff
 800cf1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cf20:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800cf24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cf28:	4630      	mov	r0, r6
 800cf2a:	460f      	mov	r7, r1
 800cf2c:	f7f3 fe1e 	bl	8000b6c <__aeabi_d2iz>
 800cf30:	f7f3 fb18 	bl	8000564 <__aeabi_i2d>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4630      	mov	r0, r6
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf40:	f7f3 f9c2 	bl	80002c8 <__aeabi_dsub>
 800cf44:	4b22      	ldr	r3, [pc, #136]	@ (800cfd0 <__ieee754_rem_pio2+0x3f0>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	f7f3 fb76 	bl	8000638 <__aeabi_dmul>
 800cf4c:	460f      	mov	r7, r1
 800cf4e:	4606      	mov	r6, r0
 800cf50:	f7f3 fe0c 	bl	8000b6c <__aeabi_d2iz>
 800cf54:	f7f3 fb06 	bl	8000564 <__aeabi_i2d>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	4639      	mov	r1, r7
 800cf60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cf64:	f7f3 f9b0 	bl	80002c8 <__aeabi_dsub>
 800cf68:	4b19      	ldr	r3, [pc, #100]	@ (800cfd0 <__ieee754_rem_pio2+0x3f0>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f7f3 fb64 	bl	8000638 <__aeabi_dmul>
 800cf70:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cf74:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800cf78:	f04f 0803 	mov.w	r8, #3
 800cf7c:	2600      	movs	r6, #0
 800cf7e:	2700      	movs	r7, #0
 800cf80:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cf84:	4632      	mov	r2, r6
 800cf86:	463b      	mov	r3, r7
 800cf88:	46c2      	mov	sl, r8
 800cf8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf8e:	f7f3 fdbb 	bl	8000b08 <__aeabi_dcmpeq>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d1f4      	bne.n	800cf80 <__ieee754_rem_pio2+0x3a0>
 800cf96:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd4 <__ieee754_rem_pio2+0x3f4>)
 800cf98:	9301      	str	r3, [sp, #4]
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	462a      	mov	r2, r5
 800cfa0:	4653      	mov	r3, sl
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	a806      	add	r0, sp, #24
 800cfa6:	f000 f81f 	bl	800cfe8 <__kernel_rem_pio2>
 800cfaa:	9b04      	ldr	r3, [sp, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	4605      	mov	r5, r0
 800cfb0:	f6bf ae53 	bge.w	800cc5a <__ieee754_rem_pio2+0x7a>
 800cfb4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800cfb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cfbc:	e9c4 2300 	strd	r2, r3, [r4]
 800cfc0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800cfc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cfc8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cfcc:	e740      	b.n	800ce50 <__ieee754_rem_pio2+0x270>
 800cfce:	bf00      	nop
 800cfd0:	41700000 	.word	0x41700000
 800cfd4:	0800ddc0 	.word	0x0800ddc0

0800cfd8 <fabs>:
 800cfd8:	ec51 0b10 	vmov	r0, r1, d0
 800cfdc:	4602      	mov	r2, r0
 800cfde:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cfe2:	ec43 2b10 	vmov	d0, r2, r3
 800cfe6:	4770      	bx	lr

0800cfe8 <__kernel_rem_pio2>:
 800cfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	ed2d 8b02 	vpush	{d8}
 800cff0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800cff4:	f112 0f14 	cmn.w	r2, #20
 800cff8:	9306      	str	r3, [sp, #24]
 800cffa:	9104      	str	r1, [sp, #16]
 800cffc:	4bbe      	ldr	r3, [pc, #760]	@ (800d2f8 <__kernel_rem_pio2+0x310>)
 800cffe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d000:	9008      	str	r0, [sp, #32]
 800d002:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	9b06      	ldr	r3, [sp, #24]
 800d00a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d00e:	bfa8      	it	ge
 800d010:	1ed4      	subge	r4, r2, #3
 800d012:	9305      	str	r3, [sp, #20]
 800d014:	bfb2      	itee	lt
 800d016:	2400      	movlt	r4, #0
 800d018:	2318      	movge	r3, #24
 800d01a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d01e:	f06f 0317 	mvn.w	r3, #23
 800d022:	fb04 3303 	mla	r3, r4, r3, r3
 800d026:	eb03 0b02 	add.w	fp, r3, r2
 800d02a:	9b00      	ldr	r3, [sp, #0]
 800d02c:	9a05      	ldr	r2, [sp, #20]
 800d02e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800d2e8 <__kernel_rem_pio2+0x300>
 800d032:	eb03 0802 	add.w	r8, r3, r2
 800d036:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d038:	1aa7      	subs	r7, r4, r2
 800d03a:	ae20      	add	r6, sp, #128	@ 0x80
 800d03c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d040:	2500      	movs	r5, #0
 800d042:	4545      	cmp	r5, r8
 800d044:	dd13      	ble.n	800d06e <__kernel_rem_pio2+0x86>
 800d046:	9b06      	ldr	r3, [sp, #24]
 800d048:	aa20      	add	r2, sp, #128	@ 0x80
 800d04a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d04e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d052:	f04f 0800 	mov.w	r8, #0
 800d056:	9b00      	ldr	r3, [sp, #0]
 800d058:	4598      	cmp	r8, r3
 800d05a:	dc31      	bgt.n	800d0c0 <__kernel_rem_pio2+0xd8>
 800d05c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800d2e8 <__kernel_rem_pio2+0x300>
 800d060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d064:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d068:	462f      	mov	r7, r5
 800d06a:	2600      	movs	r6, #0
 800d06c:	e01b      	b.n	800d0a6 <__kernel_rem_pio2+0xbe>
 800d06e:	42ef      	cmn	r7, r5
 800d070:	d407      	bmi.n	800d082 <__kernel_rem_pio2+0x9a>
 800d072:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d076:	f7f3 fa75 	bl	8000564 <__aeabi_i2d>
 800d07a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d07e:	3501      	adds	r5, #1
 800d080:	e7df      	b.n	800d042 <__kernel_rem_pio2+0x5a>
 800d082:	ec51 0b18 	vmov	r0, r1, d8
 800d086:	e7f8      	b.n	800d07a <__kernel_rem_pio2+0x92>
 800d088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d08c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d090:	f7f3 fad2 	bl	8000638 <__aeabi_dmul>
 800d094:	4602      	mov	r2, r0
 800d096:	460b      	mov	r3, r1
 800d098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d09c:	f7f3 f916 	bl	80002cc <__adddf3>
 800d0a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0a4:	3601      	adds	r6, #1
 800d0a6:	9b05      	ldr	r3, [sp, #20]
 800d0a8:	429e      	cmp	r6, r3
 800d0aa:	f1a7 0708 	sub.w	r7, r7, #8
 800d0ae:	ddeb      	ble.n	800d088 <__kernel_rem_pio2+0xa0>
 800d0b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0b4:	f108 0801 	add.w	r8, r8, #1
 800d0b8:	ecaa 7b02 	vstmia	sl!, {d7}
 800d0bc:	3508      	adds	r5, #8
 800d0be:	e7ca      	b.n	800d056 <__kernel_rem_pio2+0x6e>
 800d0c0:	9b00      	ldr	r3, [sp, #0]
 800d0c2:	f8dd 8000 	ldr.w	r8, [sp]
 800d0c6:	aa0c      	add	r2, sp, #48	@ 0x30
 800d0c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d0d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d0da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0dc:	ab98      	add	r3, sp, #608	@ 0x260
 800d0de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d0e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d0e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d0ea:	ac0c      	add	r4, sp, #48	@ 0x30
 800d0ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d0ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d0f2:	46a1      	mov	r9, r4
 800d0f4:	46c2      	mov	sl, r8
 800d0f6:	f1ba 0f00 	cmp.w	sl, #0
 800d0fa:	f1a5 0508 	sub.w	r5, r5, #8
 800d0fe:	dc77      	bgt.n	800d1f0 <__kernel_rem_pio2+0x208>
 800d100:	4658      	mov	r0, fp
 800d102:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d106:	f000 fac7 	bl	800d698 <scalbn>
 800d10a:	ec57 6b10 	vmov	r6, r7, d0
 800d10e:	2200      	movs	r2, #0
 800d110:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d114:	4630      	mov	r0, r6
 800d116:	4639      	mov	r1, r7
 800d118:	f7f3 fa8e 	bl	8000638 <__aeabi_dmul>
 800d11c:	ec41 0b10 	vmov	d0, r0, r1
 800d120:	f000 fb3a 	bl	800d798 <floor>
 800d124:	4b75      	ldr	r3, [pc, #468]	@ (800d2fc <__kernel_rem_pio2+0x314>)
 800d126:	ec51 0b10 	vmov	r0, r1, d0
 800d12a:	2200      	movs	r2, #0
 800d12c:	f7f3 fa84 	bl	8000638 <__aeabi_dmul>
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	4630      	mov	r0, r6
 800d136:	4639      	mov	r1, r7
 800d138:	f7f3 f8c6 	bl	80002c8 <__aeabi_dsub>
 800d13c:	460f      	mov	r7, r1
 800d13e:	4606      	mov	r6, r0
 800d140:	f7f3 fd14 	bl	8000b6c <__aeabi_d2iz>
 800d144:	9002      	str	r0, [sp, #8]
 800d146:	f7f3 fa0d 	bl	8000564 <__aeabi_i2d>
 800d14a:	4602      	mov	r2, r0
 800d14c:	460b      	mov	r3, r1
 800d14e:	4630      	mov	r0, r6
 800d150:	4639      	mov	r1, r7
 800d152:	f7f3 f8b9 	bl	80002c8 <__aeabi_dsub>
 800d156:	f1bb 0f00 	cmp.w	fp, #0
 800d15a:	4606      	mov	r6, r0
 800d15c:	460f      	mov	r7, r1
 800d15e:	dd6c      	ble.n	800d23a <__kernel_rem_pio2+0x252>
 800d160:	f108 31ff 	add.w	r1, r8, #4294967295
 800d164:	ab0c      	add	r3, sp, #48	@ 0x30
 800d166:	9d02      	ldr	r5, [sp, #8]
 800d168:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d16c:	f1cb 0018 	rsb	r0, fp, #24
 800d170:	fa43 f200 	asr.w	r2, r3, r0
 800d174:	4415      	add	r5, r2
 800d176:	4082      	lsls	r2, r0
 800d178:	1a9b      	subs	r3, r3, r2
 800d17a:	aa0c      	add	r2, sp, #48	@ 0x30
 800d17c:	9502      	str	r5, [sp, #8]
 800d17e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d182:	f1cb 0217 	rsb	r2, fp, #23
 800d186:	fa43 f902 	asr.w	r9, r3, r2
 800d18a:	f1b9 0f00 	cmp.w	r9, #0
 800d18e:	dd64      	ble.n	800d25a <__kernel_rem_pio2+0x272>
 800d190:	9b02      	ldr	r3, [sp, #8]
 800d192:	2200      	movs	r2, #0
 800d194:	3301      	adds	r3, #1
 800d196:	9302      	str	r3, [sp, #8]
 800d198:	4615      	mov	r5, r2
 800d19a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d19e:	4590      	cmp	r8, r2
 800d1a0:	f300 80b8 	bgt.w	800d314 <__kernel_rem_pio2+0x32c>
 800d1a4:	f1bb 0f00 	cmp.w	fp, #0
 800d1a8:	dd07      	ble.n	800d1ba <__kernel_rem_pio2+0x1d2>
 800d1aa:	f1bb 0f01 	cmp.w	fp, #1
 800d1ae:	f000 80bf 	beq.w	800d330 <__kernel_rem_pio2+0x348>
 800d1b2:	f1bb 0f02 	cmp.w	fp, #2
 800d1b6:	f000 80c6 	beq.w	800d346 <__kernel_rem_pio2+0x35e>
 800d1ba:	f1b9 0f02 	cmp.w	r9, #2
 800d1be:	d14c      	bne.n	800d25a <__kernel_rem_pio2+0x272>
 800d1c0:	4632      	mov	r2, r6
 800d1c2:	463b      	mov	r3, r7
 800d1c4:	494e      	ldr	r1, [pc, #312]	@ (800d300 <__kernel_rem_pio2+0x318>)
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	f7f3 f87e 	bl	80002c8 <__aeabi_dsub>
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	460f      	mov	r7, r1
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	d042      	beq.n	800d25a <__kernel_rem_pio2+0x272>
 800d1d4:	4658      	mov	r0, fp
 800d1d6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800d2f0 <__kernel_rem_pio2+0x308>
 800d1da:	f000 fa5d 	bl	800d698 <scalbn>
 800d1de:	4630      	mov	r0, r6
 800d1e0:	4639      	mov	r1, r7
 800d1e2:	ec53 2b10 	vmov	r2, r3, d0
 800d1e6:	f7f3 f86f 	bl	80002c8 <__aeabi_dsub>
 800d1ea:	4606      	mov	r6, r0
 800d1ec:	460f      	mov	r7, r1
 800d1ee:	e034      	b.n	800d25a <__kernel_rem_pio2+0x272>
 800d1f0:	4b44      	ldr	r3, [pc, #272]	@ (800d304 <__kernel_rem_pio2+0x31c>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f8:	f7f3 fa1e 	bl	8000638 <__aeabi_dmul>
 800d1fc:	f7f3 fcb6 	bl	8000b6c <__aeabi_d2iz>
 800d200:	f7f3 f9b0 	bl	8000564 <__aeabi_i2d>
 800d204:	4b40      	ldr	r3, [pc, #256]	@ (800d308 <__kernel_rem_pio2+0x320>)
 800d206:	2200      	movs	r2, #0
 800d208:	4606      	mov	r6, r0
 800d20a:	460f      	mov	r7, r1
 800d20c:	f7f3 fa14 	bl	8000638 <__aeabi_dmul>
 800d210:	4602      	mov	r2, r0
 800d212:	460b      	mov	r3, r1
 800d214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d218:	f7f3 f856 	bl	80002c8 <__aeabi_dsub>
 800d21c:	f7f3 fca6 	bl	8000b6c <__aeabi_d2iz>
 800d220:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d224:	f849 0b04 	str.w	r0, [r9], #4
 800d228:	4639      	mov	r1, r7
 800d22a:	4630      	mov	r0, r6
 800d22c:	f7f3 f84e 	bl	80002cc <__adddf3>
 800d230:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d238:	e75d      	b.n	800d0f6 <__kernel_rem_pio2+0x10e>
 800d23a:	d107      	bne.n	800d24c <__kernel_rem_pio2+0x264>
 800d23c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d240:	aa0c      	add	r2, sp, #48	@ 0x30
 800d242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d246:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800d24a:	e79e      	b.n	800d18a <__kernel_rem_pio2+0x1a2>
 800d24c:	4b2f      	ldr	r3, [pc, #188]	@ (800d30c <__kernel_rem_pio2+0x324>)
 800d24e:	2200      	movs	r2, #0
 800d250:	f7f3 fc78 	bl	8000b44 <__aeabi_dcmpge>
 800d254:	2800      	cmp	r0, #0
 800d256:	d143      	bne.n	800d2e0 <__kernel_rem_pio2+0x2f8>
 800d258:	4681      	mov	r9, r0
 800d25a:	2200      	movs	r2, #0
 800d25c:	2300      	movs	r3, #0
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	f7f3 fc51 	bl	8000b08 <__aeabi_dcmpeq>
 800d266:	2800      	cmp	r0, #0
 800d268:	f000 80bf 	beq.w	800d3ea <__kernel_rem_pio2+0x402>
 800d26c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d270:	2200      	movs	r2, #0
 800d272:	9900      	ldr	r1, [sp, #0]
 800d274:	428b      	cmp	r3, r1
 800d276:	da6e      	bge.n	800d356 <__kernel_rem_pio2+0x36e>
 800d278:	2a00      	cmp	r2, #0
 800d27a:	f000 8089 	beq.w	800d390 <__kernel_rem_pio2+0x3a8>
 800d27e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d282:	ab0c      	add	r3, sp, #48	@ 0x30
 800d284:	f1ab 0b18 	sub.w	fp, fp, #24
 800d288:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d0f6      	beq.n	800d27e <__kernel_rem_pio2+0x296>
 800d290:	4658      	mov	r0, fp
 800d292:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800d2f0 <__kernel_rem_pio2+0x308>
 800d296:	f000 f9ff 	bl	800d698 <scalbn>
 800d29a:	f108 0301 	add.w	r3, r8, #1
 800d29e:	00da      	lsls	r2, r3, #3
 800d2a0:	9205      	str	r2, [sp, #20]
 800d2a2:	ec55 4b10 	vmov	r4, r5, d0
 800d2a6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d2a8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800d304 <__kernel_rem_pio2+0x31c>
 800d2ac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d2b0:	4646      	mov	r6, r8
 800d2b2:	f04f 0a00 	mov.w	sl, #0
 800d2b6:	2e00      	cmp	r6, #0
 800d2b8:	f280 80cf 	bge.w	800d45a <__kernel_rem_pio2+0x472>
 800d2bc:	4644      	mov	r4, r8
 800d2be:	2c00      	cmp	r4, #0
 800d2c0:	f2c0 80fd 	blt.w	800d4be <__kernel_rem_pio2+0x4d6>
 800d2c4:	4b12      	ldr	r3, [pc, #72]	@ (800d310 <__kernel_rem_pio2+0x328>)
 800d2c6:	461f      	mov	r7, r3
 800d2c8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d2ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2ce:	9306      	str	r3, [sp, #24]
 800d2d0:	f04f 0a00 	mov.w	sl, #0
 800d2d4:	f04f 0b00 	mov.w	fp, #0
 800d2d8:	2600      	movs	r6, #0
 800d2da:	eba8 0504 	sub.w	r5, r8, r4
 800d2de:	e0e2      	b.n	800d4a6 <__kernel_rem_pio2+0x4be>
 800d2e0:	f04f 0902 	mov.w	r9, #2
 800d2e4:	e754      	b.n	800d190 <__kernel_rem_pio2+0x1a8>
 800d2e6:	bf00      	nop
	...
 800d2f4:	3ff00000 	.word	0x3ff00000
 800d2f8:	0800df08 	.word	0x0800df08
 800d2fc:	40200000 	.word	0x40200000
 800d300:	3ff00000 	.word	0x3ff00000
 800d304:	3e700000 	.word	0x3e700000
 800d308:	41700000 	.word	0x41700000
 800d30c:	3fe00000 	.word	0x3fe00000
 800d310:	0800dec8 	.word	0x0800dec8
 800d314:	f854 3b04 	ldr.w	r3, [r4], #4
 800d318:	b945      	cbnz	r5, 800d32c <__kernel_rem_pio2+0x344>
 800d31a:	b123      	cbz	r3, 800d326 <__kernel_rem_pio2+0x33e>
 800d31c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d320:	f844 3c04 	str.w	r3, [r4, #-4]
 800d324:	2301      	movs	r3, #1
 800d326:	3201      	adds	r2, #1
 800d328:	461d      	mov	r5, r3
 800d32a:	e738      	b.n	800d19e <__kernel_rem_pio2+0x1b6>
 800d32c:	1acb      	subs	r3, r1, r3
 800d32e:	e7f7      	b.n	800d320 <__kernel_rem_pio2+0x338>
 800d330:	f108 32ff 	add.w	r2, r8, #4294967295
 800d334:	ab0c      	add	r3, sp, #48	@ 0x30
 800d336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d33e:	a90c      	add	r1, sp, #48	@ 0x30
 800d340:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d344:	e739      	b.n	800d1ba <__kernel_rem_pio2+0x1d2>
 800d346:	f108 32ff 	add.w	r2, r8, #4294967295
 800d34a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d350:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d354:	e7f3      	b.n	800d33e <__kernel_rem_pio2+0x356>
 800d356:	a90c      	add	r1, sp, #48	@ 0x30
 800d358:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d35c:	3b01      	subs	r3, #1
 800d35e:	430a      	orrs	r2, r1
 800d360:	e787      	b.n	800d272 <__kernel_rem_pio2+0x28a>
 800d362:	3401      	adds	r4, #1
 800d364:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d368:	2a00      	cmp	r2, #0
 800d36a:	d0fa      	beq.n	800d362 <__kernel_rem_pio2+0x37a>
 800d36c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d36e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d372:	eb0d 0503 	add.w	r5, sp, r3
 800d376:	9b06      	ldr	r3, [sp, #24]
 800d378:	aa20      	add	r2, sp, #128	@ 0x80
 800d37a:	4443      	add	r3, r8
 800d37c:	f108 0701 	add.w	r7, r8, #1
 800d380:	3d98      	subs	r5, #152	@ 0x98
 800d382:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d386:	4444      	add	r4, r8
 800d388:	42bc      	cmp	r4, r7
 800d38a:	da04      	bge.n	800d396 <__kernel_rem_pio2+0x3ae>
 800d38c:	46a0      	mov	r8, r4
 800d38e:	e6a2      	b.n	800d0d6 <__kernel_rem_pio2+0xee>
 800d390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d392:	2401      	movs	r4, #1
 800d394:	e7e6      	b.n	800d364 <__kernel_rem_pio2+0x37c>
 800d396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d398:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d39c:	f7f3 f8e2 	bl	8000564 <__aeabi_i2d>
 800d3a0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800d668 <__kernel_rem_pio2+0x680>
 800d3a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d3a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d3b0:	46b2      	mov	sl, r6
 800d3b2:	f04f 0800 	mov.w	r8, #0
 800d3b6:	9b05      	ldr	r3, [sp, #20]
 800d3b8:	4598      	cmp	r8, r3
 800d3ba:	dd05      	ble.n	800d3c8 <__kernel_rem_pio2+0x3e0>
 800d3bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3c0:	3701      	adds	r7, #1
 800d3c2:	eca5 7b02 	vstmia	r5!, {d7}
 800d3c6:	e7df      	b.n	800d388 <__kernel_rem_pio2+0x3a0>
 800d3c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d3cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d3d0:	f7f3 f932 	bl	8000638 <__aeabi_dmul>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3dc:	f7f2 ff76 	bl	80002cc <__adddf3>
 800d3e0:	f108 0801 	add.w	r8, r8, #1
 800d3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3e8:	e7e5      	b.n	800d3b6 <__kernel_rem_pio2+0x3ce>
 800d3ea:	f1cb 0000 	rsb	r0, fp, #0
 800d3ee:	ec47 6b10 	vmov	d0, r6, r7
 800d3f2:	f000 f951 	bl	800d698 <scalbn>
 800d3f6:	ec55 4b10 	vmov	r4, r5, d0
 800d3fa:	4b9d      	ldr	r3, [pc, #628]	@ (800d670 <__kernel_rem_pio2+0x688>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	4620      	mov	r0, r4
 800d400:	4629      	mov	r1, r5
 800d402:	f7f3 fb9f 	bl	8000b44 <__aeabi_dcmpge>
 800d406:	b300      	cbz	r0, 800d44a <__kernel_rem_pio2+0x462>
 800d408:	4b9a      	ldr	r3, [pc, #616]	@ (800d674 <__kernel_rem_pio2+0x68c>)
 800d40a:	2200      	movs	r2, #0
 800d40c:	4620      	mov	r0, r4
 800d40e:	4629      	mov	r1, r5
 800d410:	f7f3 f912 	bl	8000638 <__aeabi_dmul>
 800d414:	f7f3 fbaa 	bl	8000b6c <__aeabi_d2iz>
 800d418:	4606      	mov	r6, r0
 800d41a:	f7f3 f8a3 	bl	8000564 <__aeabi_i2d>
 800d41e:	4b94      	ldr	r3, [pc, #592]	@ (800d670 <__kernel_rem_pio2+0x688>)
 800d420:	2200      	movs	r2, #0
 800d422:	f7f3 f909 	bl	8000638 <__aeabi_dmul>
 800d426:	460b      	mov	r3, r1
 800d428:	4602      	mov	r2, r0
 800d42a:	4629      	mov	r1, r5
 800d42c:	4620      	mov	r0, r4
 800d42e:	f7f2 ff4b 	bl	80002c8 <__aeabi_dsub>
 800d432:	f7f3 fb9b 	bl	8000b6c <__aeabi_d2iz>
 800d436:	ab0c      	add	r3, sp, #48	@ 0x30
 800d438:	f10b 0b18 	add.w	fp, fp, #24
 800d43c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d440:	f108 0801 	add.w	r8, r8, #1
 800d444:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d448:	e722      	b.n	800d290 <__kernel_rem_pio2+0x2a8>
 800d44a:	4620      	mov	r0, r4
 800d44c:	4629      	mov	r1, r5
 800d44e:	f7f3 fb8d 	bl	8000b6c <__aeabi_d2iz>
 800d452:	ab0c      	add	r3, sp, #48	@ 0x30
 800d454:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d458:	e71a      	b.n	800d290 <__kernel_rem_pio2+0x2a8>
 800d45a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d45c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d460:	f7f3 f880 	bl	8000564 <__aeabi_i2d>
 800d464:	4622      	mov	r2, r4
 800d466:	462b      	mov	r3, r5
 800d468:	f7f3 f8e6 	bl	8000638 <__aeabi_dmul>
 800d46c:	4652      	mov	r2, sl
 800d46e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d472:	465b      	mov	r3, fp
 800d474:	4620      	mov	r0, r4
 800d476:	4629      	mov	r1, r5
 800d478:	f7f3 f8de 	bl	8000638 <__aeabi_dmul>
 800d47c:	3e01      	subs	r6, #1
 800d47e:	4604      	mov	r4, r0
 800d480:	460d      	mov	r5, r1
 800d482:	e718      	b.n	800d2b6 <__kernel_rem_pio2+0x2ce>
 800d484:	9906      	ldr	r1, [sp, #24]
 800d486:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d48a:	9106      	str	r1, [sp, #24]
 800d48c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d490:	f7f3 f8d2 	bl	8000638 <__aeabi_dmul>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	4650      	mov	r0, sl
 800d49a:	4659      	mov	r1, fp
 800d49c:	f7f2 ff16 	bl	80002cc <__adddf3>
 800d4a0:	3601      	adds	r6, #1
 800d4a2:	4682      	mov	sl, r0
 800d4a4:	468b      	mov	fp, r1
 800d4a6:	9b00      	ldr	r3, [sp, #0]
 800d4a8:	429e      	cmp	r6, r3
 800d4aa:	dc01      	bgt.n	800d4b0 <__kernel_rem_pio2+0x4c8>
 800d4ac:	42b5      	cmp	r5, r6
 800d4ae:	dae9      	bge.n	800d484 <__kernel_rem_pio2+0x49c>
 800d4b0:	ab48      	add	r3, sp, #288	@ 0x120
 800d4b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d4b6:	e9c5 ab00 	strd	sl, fp, [r5]
 800d4ba:	3c01      	subs	r4, #1
 800d4bc:	e6ff      	b.n	800d2be <__kernel_rem_pio2+0x2d6>
 800d4be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	dc0b      	bgt.n	800d4dc <__kernel_rem_pio2+0x4f4>
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dc39      	bgt.n	800d53c <__kernel_rem_pio2+0x554>
 800d4c8:	d05d      	beq.n	800d586 <__kernel_rem_pio2+0x59e>
 800d4ca:	9b02      	ldr	r3, [sp, #8]
 800d4cc:	f003 0007 	and.w	r0, r3, #7
 800d4d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d4d4:	ecbd 8b02 	vpop	{d8}
 800d4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d1f3      	bne.n	800d4ca <__kernel_rem_pio2+0x4e2>
 800d4e2:	9b05      	ldr	r3, [sp, #20]
 800d4e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d4e8:	eb0d 0403 	add.w	r4, sp, r3
 800d4ec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d4f0:	4625      	mov	r5, r4
 800d4f2:	46c2      	mov	sl, r8
 800d4f4:	f1ba 0f00 	cmp.w	sl, #0
 800d4f8:	f1a5 0508 	sub.w	r5, r5, #8
 800d4fc:	dc6b      	bgt.n	800d5d6 <__kernel_rem_pio2+0x5ee>
 800d4fe:	4645      	mov	r5, r8
 800d500:	2d01      	cmp	r5, #1
 800d502:	f1a4 0408 	sub.w	r4, r4, #8
 800d506:	f300 8087 	bgt.w	800d618 <__kernel_rem_pio2+0x630>
 800d50a:	9c05      	ldr	r4, [sp, #20]
 800d50c:	ab48      	add	r3, sp, #288	@ 0x120
 800d50e:	441c      	add	r4, r3
 800d510:	2000      	movs	r0, #0
 800d512:	2100      	movs	r1, #0
 800d514:	f1b8 0f01 	cmp.w	r8, #1
 800d518:	f300 809c 	bgt.w	800d654 <__kernel_rem_pio2+0x66c>
 800d51c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800d520:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800d524:	f1b9 0f00 	cmp.w	r9, #0
 800d528:	f040 80a6 	bne.w	800d678 <__kernel_rem_pio2+0x690>
 800d52c:	9b04      	ldr	r3, [sp, #16]
 800d52e:	e9c3 7800 	strd	r7, r8, [r3]
 800d532:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d536:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d53a:	e7c6      	b.n	800d4ca <__kernel_rem_pio2+0x4e2>
 800d53c:	9d05      	ldr	r5, [sp, #20]
 800d53e:	ab48      	add	r3, sp, #288	@ 0x120
 800d540:	441d      	add	r5, r3
 800d542:	4644      	mov	r4, r8
 800d544:	2000      	movs	r0, #0
 800d546:	2100      	movs	r1, #0
 800d548:	2c00      	cmp	r4, #0
 800d54a:	da35      	bge.n	800d5b8 <__kernel_rem_pio2+0x5d0>
 800d54c:	f1b9 0f00 	cmp.w	r9, #0
 800d550:	d038      	beq.n	800d5c4 <__kernel_rem_pio2+0x5dc>
 800d552:	4602      	mov	r2, r0
 800d554:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d558:	9c04      	ldr	r4, [sp, #16]
 800d55a:	e9c4 2300 	strd	r2, r3, [r4]
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d566:	f7f2 feaf 	bl	80002c8 <__aeabi_dsub>
 800d56a:	ad4a      	add	r5, sp, #296	@ 0x128
 800d56c:	2401      	movs	r4, #1
 800d56e:	45a0      	cmp	r8, r4
 800d570:	da2b      	bge.n	800d5ca <__kernel_rem_pio2+0x5e2>
 800d572:	f1b9 0f00 	cmp.w	r9, #0
 800d576:	d002      	beq.n	800d57e <__kernel_rem_pio2+0x596>
 800d578:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d57c:	4619      	mov	r1, r3
 800d57e:	9b04      	ldr	r3, [sp, #16]
 800d580:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d584:	e7a1      	b.n	800d4ca <__kernel_rem_pio2+0x4e2>
 800d586:	9c05      	ldr	r4, [sp, #20]
 800d588:	ab48      	add	r3, sp, #288	@ 0x120
 800d58a:	441c      	add	r4, r3
 800d58c:	2000      	movs	r0, #0
 800d58e:	2100      	movs	r1, #0
 800d590:	f1b8 0f00 	cmp.w	r8, #0
 800d594:	da09      	bge.n	800d5aa <__kernel_rem_pio2+0x5c2>
 800d596:	f1b9 0f00 	cmp.w	r9, #0
 800d59a:	d002      	beq.n	800d5a2 <__kernel_rem_pio2+0x5ba>
 800d59c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	9b04      	ldr	r3, [sp, #16]
 800d5a4:	e9c3 0100 	strd	r0, r1, [r3]
 800d5a8:	e78f      	b.n	800d4ca <__kernel_rem_pio2+0x4e2>
 800d5aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d5ae:	f7f2 fe8d 	bl	80002cc <__adddf3>
 800d5b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d5b6:	e7eb      	b.n	800d590 <__kernel_rem_pio2+0x5a8>
 800d5b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d5bc:	f7f2 fe86 	bl	80002cc <__adddf3>
 800d5c0:	3c01      	subs	r4, #1
 800d5c2:	e7c1      	b.n	800d548 <__kernel_rem_pio2+0x560>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	e7c6      	b.n	800d558 <__kernel_rem_pio2+0x570>
 800d5ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d5ce:	f7f2 fe7d 	bl	80002cc <__adddf3>
 800d5d2:	3401      	adds	r4, #1
 800d5d4:	e7cb      	b.n	800d56e <__kernel_rem_pio2+0x586>
 800d5d6:	ed95 7b00 	vldr	d7, [r5]
 800d5da:	ed8d 7b00 	vstr	d7, [sp]
 800d5de:	ed95 7b02 	vldr	d7, [r5, #8]
 800d5e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5e6:	ec53 2b17 	vmov	r2, r3, d7
 800d5ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d5ee:	f7f2 fe6d 	bl	80002cc <__adddf3>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	460f      	mov	r7, r1
 800d5fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5fe:	f7f2 fe63 	bl	80002c8 <__aeabi_dsub>
 800d602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d606:	f7f2 fe61 	bl	80002cc <__adddf3>
 800d60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d60e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d612:	e9c5 6700 	strd	r6, r7, [r5]
 800d616:	e76d      	b.n	800d4f4 <__kernel_rem_pio2+0x50c>
 800d618:	ed94 7b00 	vldr	d7, [r4]
 800d61c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d620:	ec51 0b17 	vmov	r0, r1, d7
 800d624:	4652      	mov	r2, sl
 800d626:	465b      	mov	r3, fp
 800d628:	ed8d 7b00 	vstr	d7, [sp]
 800d62c:	f7f2 fe4e 	bl	80002cc <__adddf3>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	4606      	mov	r6, r0
 800d636:	460f      	mov	r7, r1
 800d638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d63c:	f7f2 fe44 	bl	80002c8 <__aeabi_dsub>
 800d640:	4652      	mov	r2, sl
 800d642:	465b      	mov	r3, fp
 800d644:	f7f2 fe42 	bl	80002cc <__adddf3>
 800d648:	3d01      	subs	r5, #1
 800d64a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d64e:	e9c4 6700 	strd	r6, r7, [r4]
 800d652:	e755      	b.n	800d500 <__kernel_rem_pio2+0x518>
 800d654:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d658:	f7f2 fe38 	bl	80002cc <__adddf3>
 800d65c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d660:	e758      	b.n	800d514 <__kernel_rem_pio2+0x52c>
 800d662:	bf00      	nop
 800d664:	f3af 8000 	nop.w
	...
 800d670:	41700000 	.word	0x41700000
 800d674:	3e700000 	.word	0x3e700000
 800d678:	9b04      	ldr	r3, [sp, #16]
 800d67a:	9a04      	ldr	r2, [sp, #16]
 800d67c:	601f      	str	r7, [r3, #0]
 800d67e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800d682:	605c      	str	r4, [r3, #4]
 800d684:	609d      	str	r5, [r3, #8]
 800d686:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d68a:	60d3      	str	r3, [r2, #12]
 800d68c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d690:	6110      	str	r0, [r2, #16]
 800d692:	6153      	str	r3, [r2, #20]
 800d694:	e719      	b.n	800d4ca <__kernel_rem_pio2+0x4e2>
 800d696:	bf00      	nop

0800d698 <scalbn>:
 800d698:	b570      	push	{r4, r5, r6, lr}
 800d69a:	ec55 4b10 	vmov	r4, r5, d0
 800d69e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	462b      	mov	r3, r5
 800d6a6:	b991      	cbnz	r1, 800d6ce <scalbn+0x36>
 800d6a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d6ac:	4323      	orrs	r3, r4
 800d6ae:	d03d      	beq.n	800d72c <scalbn+0x94>
 800d6b0:	4b35      	ldr	r3, [pc, #212]	@ (800d788 <scalbn+0xf0>)
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f7f2 ffbe 	bl	8000638 <__aeabi_dmul>
 800d6bc:	4b33      	ldr	r3, [pc, #204]	@ (800d78c <scalbn+0xf4>)
 800d6be:	429e      	cmp	r6, r3
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	460d      	mov	r5, r1
 800d6c4:	da0f      	bge.n	800d6e6 <scalbn+0x4e>
 800d6c6:	a328      	add	r3, pc, #160	@ (adr r3, 800d768 <scalbn+0xd0>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	e01e      	b.n	800d70c <scalbn+0x74>
 800d6ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d6d2:	4291      	cmp	r1, r2
 800d6d4:	d10b      	bne.n	800d6ee <scalbn+0x56>
 800d6d6:	4622      	mov	r2, r4
 800d6d8:	4620      	mov	r0, r4
 800d6da:	4629      	mov	r1, r5
 800d6dc:	f7f2 fdf6 	bl	80002cc <__adddf3>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	e022      	b.n	800d72c <scalbn+0x94>
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d6ec:	3936      	subs	r1, #54	@ 0x36
 800d6ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d6f2:	4296      	cmp	r6, r2
 800d6f4:	dd0d      	ble.n	800d712 <scalbn+0x7a>
 800d6f6:	2d00      	cmp	r5, #0
 800d6f8:	a11d      	add	r1, pc, #116	@ (adr r1, 800d770 <scalbn+0xd8>)
 800d6fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6fe:	da02      	bge.n	800d706 <scalbn+0x6e>
 800d700:	a11d      	add	r1, pc, #116	@ (adr r1, 800d778 <scalbn+0xe0>)
 800d702:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d706:	a31a      	add	r3, pc, #104	@ (adr r3, 800d770 <scalbn+0xd8>)
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	f7f2 ff94 	bl	8000638 <__aeabi_dmul>
 800d710:	e7e6      	b.n	800d6e0 <scalbn+0x48>
 800d712:	1872      	adds	r2, r6, r1
 800d714:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d718:	428a      	cmp	r2, r1
 800d71a:	dcec      	bgt.n	800d6f6 <scalbn+0x5e>
 800d71c:	2a00      	cmp	r2, #0
 800d71e:	dd08      	ble.n	800d732 <scalbn+0x9a>
 800d720:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d724:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d728:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d72c:	ec45 4b10 	vmov	d0, r4, r5
 800d730:	bd70      	pop	{r4, r5, r6, pc}
 800d732:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d736:	da08      	bge.n	800d74a <scalbn+0xb2>
 800d738:	2d00      	cmp	r5, #0
 800d73a:	a10b      	add	r1, pc, #44	@ (adr r1, 800d768 <scalbn+0xd0>)
 800d73c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d740:	dac1      	bge.n	800d6c6 <scalbn+0x2e>
 800d742:	a10f      	add	r1, pc, #60	@ (adr r1, 800d780 <scalbn+0xe8>)
 800d744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d748:	e7bd      	b.n	800d6c6 <scalbn+0x2e>
 800d74a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d74e:	3236      	adds	r2, #54	@ 0x36
 800d750:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d754:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d758:	4620      	mov	r0, r4
 800d75a:	4b0d      	ldr	r3, [pc, #52]	@ (800d790 <scalbn+0xf8>)
 800d75c:	4629      	mov	r1, r5
 800d75e:	2200      	movs	r2, #0
 800d760:	e7d4      	b.n	800d70c <scalbn+0x74>
 800d762:	bf00      	nop
 800d764:	f3af 8000 	nop.w
 800d768:	c2f8f359 	.word	0xc2f8f359
 800d76c:	01a56e1f 	.word	0x01a56e1f
 800d770:	8800759c 	.word	0x8800759c
 800d774:	7e37e43c 	.word	0x7e37e43c
 800d778:	8800759c 	.word	0x8800759c
 800d77c:	fe37e43c 	.word	0xfe37e43c
 800d780:	c2f8f359 	.word	0xc2f8f359
 800d784:	81a56e1f 	.word	0x81a56e1f
 800d788:	43500000 	.word	0x43500000
 800d78c:	ffff3cb0 	.word	0xffff3cb0
 800d790:	3c900000 	.word	0x3c900000
 800d794:	00000000 	.word	0x00000000

0800d798 <floor>:
 800d798:	ec51 0b10 	vmov	r0, r1, d0
 800d79c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d7a8:	2e13      	cmp	r6, #19
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	4680      	mov	r8, r0
 800d7b0:	dc34      	bgt.n	800d81c <floor+0x84>
 800d7b2:	2e00      	cmp	r6, #0
 800d7b4:	da17      	bge.n	800d7e6 <floor+0x4e>
 800d7b6:	a332      	add	r3, pc, #200	@ (adr r3, 800d880 <floor+0xe8>)
 800d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7bc:	f7f2 fd86 	bl	80002cc <__adddf3>
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	f7f3 f9c8 	bl	8000b58 <__aeabi_dcmpgt>
 800d7c8:	b150      	cbz	r0, 800d7e0 <floor+0x48>
 800d7ca:	2c00      	cmp	r4, #0
 800d7cc:	da55      	bge.n	800d87a <floor+0xe2>
 800d7ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d7d2:	432c      	orrs	r4, r5
 800d7d4:	2500      	movs	r5, #0
 800d7d6:	42ac      	cmp	r4, r5
 800d7d8:	4c2b      	ldr	r4, [pc, #172]	@ (800d888 <floor+0xf0>)
 800d7da:	bf08      	it	eq
 800d7dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	e023      	b.n	800d82e <floor+0x96>
 800d7e6:	4f29      	ldr	r7, [pc, #164]	@ (800d88c <floor+0xf4>)
 800d7e8:	4137      	asrs	r7, r6
 800d7ea:	ea01 0307 	and.w	r3, r1, r7
 800d7ee:	4303      	orrs	r3, r0
 800d7f0:	d01d      	beq.n	800d82e <floor+0x96>
 800d7f2:	a323      	add	r3, pc, #140	@ (adr r3, 800d880 <floor+0xe8>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	f7f2 fd68 	bl	80002cc <__adddf3>
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	2300      	movs	r3, #0
 800d800:	f7f3 f9aa 	bl	8000b58 <__aeabi_dcmpgt>
 800d804:	2800      	cmp	r0, #0
 800d806:	d0eb      	beq.n	800d7e0 <floor+0x48>
 800d808:	2c00      	cmp	r4, #0
 800d80a:	bfbe      	ittt	lt
 800d80c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d810:	4133      	asrlt	r3, r6
 800d812:	18e4      	addlt	r4, r4, r3
 800d814:	ea24 0407 	bic.w	r4, r4, r7
 800d818:	2500      	movs	r5, #0
 800d81a:	e7e1      	b.n	800d7e0 <floor+0x48>
 800d81c:	2e33      	cmp	r6, #51	@ 0x33
 800d81e:	dd0a      	ble.n	800d836 <floor+0x9e>
 800d820:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d824:	d103      	bne.n	800d82e <floor+0x96>
 800d826:	4602      	mov	r2, r0
 800d828:	460b      	mov	r3, r1
 800d82a:	f7f2 fd4f 	bl	80002cc <__adddf3>
 800d82e:	ec41 0b10 	vmov	d0, r0, r1
 800d832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d836:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d83a:	f04f 37ff 	mov.w	r7, #4294967295
 800d83e:	40df      	lsrs	r7, r3
 800d840:	4207      	tst	r7, r0
 800d842:	d0f4      	beq.n	800d82e <floor+0x96>
 800d844:	a30e      	add	r3, pc, #56	@ (adr r3, 800d880 <floor+0xe8>)
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	f7f2 fd3f 	bl	80002cc <__adddf3>
 800d84e:	2200      	movs	r2, #0
 800d850:	2300      	movs	r3, #0
 800d852:	f7f3 f981 	bl	8000b58 <__aeabi_dcmpgt>
 800d856:	2800      	cmp	r0, #0
 800d858:	d0c2      	beq.n	800d7e0 <floor+0x48>
 800d85a:	2c00      	cmp	r4, #0
 800d85c:	da0a      	bge.n	800d874 <floor+0xdc>
 800d85e:	2e14      	cmp	r6, #20
 800d860:	d101      	bne.n	800d866 <floor+0xce>
 800d862:	3401      	adds	r4, #1
 800d864:	e006      	b.n	800d874 <floor+0xdc>
 800d866:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d86a:	2301      	movs	r3, #1
 800d86c:	40b3      	lsls	r3, r6
 800d86e:	441d      	add	r5, r3
 800d870:	4545      	cmp	r5, r8
 800d872:	d3f6      	bcc.n	800d862 <floor+0xca>
 800d874:	ea25 0507 	bic.w	r5, r5, r7
 800d878:	e7b2      	b.n	800d7e0 <floor+0x48>
 800d87a:	2500      	movs	r5, #0
 800d87c:	462c      	mov	r4, r5
 800d87e:	e7af      	b.n	800d7e0 <floor+0x48>
 800d880:	8800759c 	.word	0x8800759c
 800d884:	7e37e43c 	.word	0x7e37e43c
 800d888:	bff00000 	.word	0xbff00000
 800d88c:	000fffff 	.word	0x000fffff

0800d890 <_init>:
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d892:	bf00      	nop
 800d894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d896:	bc08      	pop	{r3}
 800d898:	469e      	mov	lr, r3
 800d89a:	4770      	bx	lr

0800d89c <_fini>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	bf00      	nop
 800d8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a2:	bc08      	pop	{r3}
 800d8a4:	469e      	mov	lr, r3
 800d8a6:	4770      	bx	lr
